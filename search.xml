<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>AJAX-JSON</title>
    <url>/2020/07/16/AJAX-JSON/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>JSON(JavaScript Object Notation, JS 对象简谱) 是一种轻量级的数据交换格式。    </p>
<h1 id="为什么要使用json"><a href="#为什么要使用json" class="headerlink" title="为什么要使用json"></a>为什么要使用json</h1><ol>
<li>json格式好理解。</li>
<li>json格式数据在多种语言中，比较容易处理。 使用java， javascript读写json格式的数据比较容易。        </li>
<li>json格式数据他占用的空间小，在网络中传输快， 用户的体验好。<a id="more"></a>

</li>
</ol>
<h1 id="json分类"><a href="#json分类" class="headerlink" title="json分类"></a>json分类</h1><ol>
<li>json对象，JSONObject，这种对象的格式（名称:值），也可以看做是 key:value 格式。        </li>
<li>json数组， JSONArray, 基本格式  [{name:”河北”,jiancheng:”冀”,”shenghui”:”石家庄”},{ name:”山西”,jiancheng:”晋”,”shenghui”:”太原”}]        </li>
</ol>
<p>ajax发起请求——-servlet（返回的一个json格式的字符串{name:”河北”, jiancheng:”冀”,”shenghui”:”石家庄”}）<br>处理json的工具库： gson（google）; fastjson（阿里），jackson，json-lib        </p>
<p>在js中的，可以把json格式的字符串，转为json对象， json中的key，就是json对象的属性名。        </p>
<h1 id="使用jackson把java对象转为json格式的字符串"><a href="#使用jackson把java对象转为json格式的字符串" class="headerlink" title="使用jackson把java对象转为json格式的字符串"></a>使用jackson把java对象转为json格式的字符串</h1><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">protected void <span class="keyword">do</span><span class="constructor">Get(HttpServletRequest <span class="params">request</span>, HttpServletResponse <span class="params">response</span>)</span> throws ServletException, IOException &#123;</span><br><span class="line">      <span class="comment">//默认值， &#123;&#125; ：表示json格式的数据</span></span><br><span class="line">      String json = <span class="string">"&#123;&#125;"</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 获取请求参数，省份的id</span></span><br><span class="line">      String strProid = request.get<span class="constructor">Parameter(<span class="string">"proid"</span>)</span>;</span><br><span class="line">      <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"strProid========="</span>+strProid);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//判断proid有值时，调用dao查询数据</span></span><br><span class="line">      <span class="keyword">if</span>( strProid != null<span class="operator"> &amp;&amp; </span>strProid.trim<span class="literal">()</span>.length<span class="literal">()</span> &gt; <span class="number">0</span> )&#123;</span><br><span class="line">          ProvinceDao dao  = <span class="keyword">new</span> <span class="constructor">ProvinceDao()</span>;</span><br><span class="line">          Province p  = dao.query<span class="constructor">ProviceById(Integer.<span class="params">valueOf</span>(<span class="params">strProid</span>)</span>);</span><br><span class="line">          <span class="comment">//需要使用jackson 把  Provice对象转为  json</span></span><br><span class="line">          ObjectMapper om  = <span class="keyword">new</span> <span class="constructor">ObjectMapper()</span>;</span><br><span class="line">          json =  om.write<span class="constructor">ValueAsString(<span class="params">p</span>)</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//把获取的数据，通过网络传给ajax中的异步对象，响应结果数据</span></span><br><span class="line">      <span class="comment">//指定服务器端（servlet）返回给浏览器的是json格式的数据,json数据使用utf-8编码的</span></span><br><span class="line">      <span class="comment">//response.setContentType("text/json;charset=utf-8");</span></span><br><span class="line">      response.set<span class="constructor">ContentType(<span class="string">"application/json;charset=utf-8"</span>)</span>;</span><br><span class="line">      PrintWriter pw  = response.get<span class="constructor">Writer()</span>;</span><br><span class="line">      pw.println(json); <span class="comment">//输出数据---会付给ajax中 responseText属性</span></span><br><span class="line">      pw.flush<span class="literal">()</span>;</span><br><span class="line">      pw.close<span class="literal">()</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>AJAX</category>
      </categories>
      <tags>
        <tag>AJAX</tag>
      </tags>
  </entry>
  <entry>
    <title>AJAX-概述</title>
    <url>/2020/07/15/AJAX-%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<h1 id="全局刷新和局部刷新"><a href="#全局刷新和局部刷新" class="headerlink" title="全局刷新和局部刷新"></a>全局刷新和局部刷新</h1><p>全局刷新：整个浏览器被新的数据覆盖。在网络中传输大量的数据。浏览器需要加载，渲染页面。<br>局部刷新：在浏览器器的内部，发起请求，获取数据，改变页面中的部分内容。其余的页面无需加载和渲染。网络中数据传输量少，给用户的感受好。</p>
<a id="more"></a>
<h1 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h1><p>ajax:Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）<br>ajax是用来做局部刷新的。局部刷新使用的核心对象是 异步对象（XMLHttpRequest）这个异步对象是存在浏览器内存中的 ，使用javascript语法创建和使用XMLHttpRequest对象。        </p>
<p>ajax是一种做局部刷新的新方法（2003左右），不是一种语言。ajax包含的技术主要有javascript、dom、css、xml等等。核心是javascript 和 xml 。        </p>
<p>javascript：负责创建异步对象，发送请求，更新页面的dom对象。ajax请求需要服务器端的数据。<br>xml： 网络中的传输的数据格式。使用json替换了xml。</p>
<h1 id="AJAX中使用XMLHttpRequest对象"><a href="#AJAX中使用XMLHttpRequest对象" class="headerlink" title="AJAX中使用XMLHttpRequest对象"></a>AJAX中使用XMLHttpRequest对象</h1><ol>
<li>创建异步对象 var xmlHttp = new XMLHttpRequest();    </li>
<li>给异步对象绑定事件。onreadystatechange ：当异步对象发起请求，获取了数据都会触发这个事件。<br>这个事件需要指定一个函数，在函数中处理状态的变化。<figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line">xmlHttp.onreadystatechange= <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">处理请求的状态变化。</span><br><span class="line"><span class="keyword">if</span>(xmlHttp.readyState == <span class="number">4</span> &amp;&amp; xmlHttp.<span class="keyword">status</span>== <span class="number">200</span> )&#123;</span><br><span class="line">//可以处理服务器端的数据，更新当前页面</span><br><span class="line">	var <span class="keyword">data</span> = xmlHttp.responseText;</span><br><span class="line">	document.getElementById(<span class="string">"name"</span>).<span class="keyword">value</span>= <span class="keyword">data</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
异步对象的属性 readyState 表示异步对象请求的状态变化<br>0:创建异步对象时，new XMLHttpRequest();<br>1:初始异步请求对象，xmlHttp.open()<br>2:发送请求，xmlHttp.send()<br>3:从服务器端获取了数据，此时3，注意3是异步对象内部使用，获取了原始的数据<br>4:异步对象把接收的数据处理完成后。此时开发人员在4的时候处理数据。<br>在4的时候，开发人员更新当前页面。<br>异步对象的status属性，表示网络请求的状况的，200，404，500，需要是当status==200时，表示网络请求是成功的。</li>
<li>初始异步请求对象<br>异步的方法open()<br>xmlHttp.open(请求方式get或post, “服务器端的访问地址”, 同步或异步请求（默认是true，异步请求）)<br>例如：<br>xmlHttp.open(“get”, “loginServlet?name=zs&amp;pwd=123”,true);  </li>
<li>使用异步对象发送请求<br>xmlHttp.send()<br>获取服务器端返回的数据，使用异步对象的属性 responseText<br>例子：xmlHttp.responseText<br>回调：当请求的状态变化时，异步对象会自动调用onreadystatechange事件对应的函数。        </li>
</ol>
<h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">//使用内存中的异步对象，代替浏览器发起请求。异步对象使用js创建和管理的。</span></span></span><br><span class="line"><span class="actionscript">          <span class="function"><span class="keyword">function</span>  <span class="title">doAjax</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">              <span class="comment">//1.创建异步对象</span></span></span><br><span class="line"><span class="actionscript">              <span class="keyword">var</span> xmlHttp = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="actionscript">              <span class="comment">//2.绑定事件</span></span></span><br><span class="line"><span class="actionscript">              xmlHttp.onreadystatechange = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                  <span class="comment">//处理服务器端返回的数据，更新当前页面</span></span></span><br><span class="line"><span class="actionscript">                  <span class="comment">//alert("readyState属性值======" + xmlHttp.readyState + "| status:" + xmlHttp.status)</span></span></span><br><span class="line">                  if( xmlHttp.readyState == 4 &amp;&amp; xmlHttp.status ==200)&#123;</span><br><span class="line"><span class="actionscript">                     <span class="comment">// alert(xmlHttp.responseText);</span></span></span><br><span class="line"><span class="actionscript">                      <span class="keyword">var</span>  data = xmlHttp.responseText;</span></span><br><span class="line"><span class="actionscript">                      <span class="comment">//更新dom对象， 更新页面数据</span></span></span><br><span class="line"><span class="javascript">                      <span class="built_in">document</span>.getElementById(<span class="string">"mydata"</span>).innerText = data;</span></span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">              <span class="comment">//3.初始请求数据</span></span></span><br><span class="line"><span class="actionscript">              <span class="comment">//获取dom对象的value属性值</span></span></span><br><span class="line"><span class="javascript">              <span class="keyword">var</span> name = <span class="built_in">document</span>.getElementById(<span class="string">"name"</span>).value;</span></span><br><span class="line"><span class="javascript">              <span class="keyword">var</span> w = <span class="built_in">document</span>.getElementById(<span class="string">"w"</span>).value;</span></span><br><span class="line"><span class="javascript">              <span class="keyword">var</span> h = <span class="built_in">document</span>.getElementById(<span class="string">"h"</span>).value;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">              <span class="comment">//bmiPrint?name=李四&amp;w=82&amp;h=1.8</span></span></span><br><span class="line"><span class="actionscript">              <span class="keyword">var</span> param = <span class="string">"name="</span>+name + <span class="string">"&amp;w="</span>+w+<span class="string">"&amp;h="</span>+h;</span></span><br><span class="line"><span class="actionscript">              <span class="comment">//alert("param="+param);</span></span></span><br><span class="line"><span class="actionscript">              <span class="comment">// true :异步处理请求。 使用异步对象发起请求后，不用等待数据处理完毕，就可以执行其它的操作。</span></span></span><br><span class="line"><span class="actionscript">              <span class="comment">// false:同步，异步对象必须处理完成请求，从服务器端获取数据后，才能执行send之后的代码。任意时刻只能执行一个异步请求。</span></span></span><br><span class="line"><span class="actionscript">              xmlHttp.open(<span class="string">"get"</span>,<span class="string">"bmiAjax?"</span>+param,<span class="literal">true</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">              <span class="comment">//4.发起请求</span></span></span><br><span class="line">              xmlHttp.send();</span><br><span class="line">          &#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>局部刷新ajax-计算bmi<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 没有使用form  --&gt;</span></span><br><span class="line">       姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"name"</span> /&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">       体重（公斤）:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"w"</span> /&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">       身高（米）：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"h"</span> /&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"计算bmi"</span> <span class="attr">onclick</span>=<span class="string">"doAjax()"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"mydata"</span>&gt;</span>等待加载数据....<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>AJAX</category>
      </categories>
      <tags>
        <tag>AJAX</tag>
      </tags>
  </entry>
  <entry>
    <title>Git-简单使用</title>
    <url>/2020/08/29/Git-%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="什么是版本控制"><a href="#什么是版本控制" class="headerlink" title="什么是版本控制"></a>什么是版本控制</h1><p>版本控制（Revision control）是一种在开发的过程中用于管理我们对文件、目录或工程等内容的修改历史，方便查看更改历史记录，备份以便恢复以前的版本的软件工程技术。    </p>
<ul>
<li>实现跨区域多人协同开发</li>
<li>追踪和记载一个或者多个文件的历史记录</li>
<li>组织和保护你的源代码和文档</li>
<li>统计工作量</li>
<li>并行开发、提高开发效率</li>
<li>跟踪记录整个软件的开发过程</li>
<li>减轻开发人员的负担，节省时间，同时降低人为错误<a id="more"></a>
简单说就是用于管理多人协同开发项目的技术。    </li>
</ul>
<p>没有进行版本控制或者版本控制本身缺乏正确的流程管理，在软件开发过程中将会引入很多问题，如软件代码的一致性、软件内容的冗余、软件过程的事物性、软件开发过程中的并发性、软件源代码的安全性，以及软件的整合等问题。    </p>
<p>无论是工作还是学习，或者是自己做笔记，都经历过这样一个阶段！我们就迫切需要一个版本控制工具！    </p>
<h1 id="常见的版本控制工具"><a href="#常见的版本控制工具" class="headerlink" title="常见的版本控制工具"></a>常见的版本控制工具</h1><ul>
<li>Git</li>
<li>SVN（Subversion）</li>
<li>CVS（Concurrent Versions System）</li>
<li>VSS（Micorosoft Visual SourceSafe）</li>
<li>TFS（Team Foundation Server）</li>
<li>Visual Studio Online</li>
</ul>
<p>版本控制产品非常的多（Perforce、Rational ClearCase、RCS（GNU Revision Control System）、Serena Dimention、SVK、BitKeeper、Monotone、Bazaar、Mercurial、SourceGear Vault），现在影响力最大且使用最广泛的是Git与SVN    </p>
<h1 id="版本控制分类"><a href="#版本控制分类" class="headerlink" title="版本控制分类"></a>版本控制分类</h1><p>1、本地版本控制<br>记录文件每次的更新，可以对每个版本做一个快照，或是记录补丁文件，适合个人用，如RCS。<br>2、集中版本控制  SVN<br>所有的版本数据都保存在服务器上，协同开发者从服务器上同步更新或上传自己的修改<br>所有的版本数据都存在服务器上，用户的本地只有自己以前所同步的版本，如果不连网的话，用户就看不到历史版本，也无法切换版本验证问题，或在不同分支工作。而且，所有数据都保存在单一的服务器上，有很大的风险这个服务器会损坏，这样就会丢失所有的数据，当然可以定期备份。代表产品：SVN、CVS、VSS<br>3、分布式版本控制Git<br>每个人都拥有全部的代码！安全隐患！<br>所有版本信息仓库全部同步到本地的每个用户，这样就可以在本地查看所有版本历史，可以离线在本地提交，只需在连网时push到相应的服务器或其他用户那里。由于每个用户那里保存的都是所有的版本数据，只要有一个用户的设备没有问题就可以恢复所有的数据，但这增加了本地存储空间的占用。<br>不会因为服务器损坏或者网络问题，造成不能工作的情况！    </p>
<h1 id="Git与SVN的主要区别"><a href="#Git与SVN的主要区别" class="headerlink" title="Git与SVN的主要区别"></a>Git与SVN的主要区别</h1><p>SVN是集中式版本控制系统，版本库是集中放在中央服务器的，而工作的时候，用的都是自己的电脑，所以首先要从中央服务器得到最新的版本，然后工作，完成工作后，需要把自己做完的活推送到中央服务器。集中式版本控制系统是必须联网才能工作，对网络带宽要求较高。    </p>
<p>Git是分布式版本控制系统，没有中央服务器，每个人的电脑就是一个完整的版本库，工作的时候不需要联网了，因为版本都在自己电脑上。协同的方法是这样的：比如说自己在电脑上改了文件A，其他人也在电脑上改了文件A，这时，你们两之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。Git可以直接看到更新了哪些代码和文件！<br>Git是目前世界上最先进的分布式版本控制系统。    </p>
<h1 id="Git基本理论"><a href="#Git基本理论" class="headerlink" title="Git基本理论"></a>Git基本理论</h1><h2 id="三个区域"><a href="#三个区域" class="headerlink" title="三个区域"></a>三个区域</h2><p>Git本地有三个工作区域：工作目录（Working Directory）、暂存区(Stage/Index)、资源库(Repository或Git Directory)。如果在加上远程的git仓库(Remote Directory)就可以分为四个工作区域。文件在这四个区域之间的转换关系如下：    </p>
<ul>
<li>Workspace：工作区，就是你平时存放项目代码的地方</li>
<li>Index / Stage：暂存区，用于临时存放你的改动，事实上它只是一个文件，保存即将提交到文件列表信息</li>
<li>Repository：仓库区（或本地仓库），就是安全存放数据的位置，这里面有你提交到所有版本的数据。其中HEAD指向最新放入仓库的版本</li>
<li>Remote：远程仓库，托管代码的服务器，可以简单的认为是你项目组中的一台电脑用于远程数据交换</li>
</ul>
<p>本地的三个区域确切的说应该是git仓库中HEAD指向的版本：</p>
<ul>
<li>Directory：使用Git管理的一个目录，也就是一个仓库，包含我们的工作空间和Git的管理空间。</li>
<li>WorkSpace：需要通过Git进行版本控制的目录和文件，这些目录和文件组成了工作空间。</li>
<li>.git：存放Git管理信息的目录，初始化仓库的时候自动创建。</li>
<li>Index/Stage：暂存区，或者叫待提交更新区，在提交进入repo之前，我们可以把所有的更新放在暂存区。</li>
<li>Local Repo：本地仓库，一个存放在本地的版本库；HEAD会只是当前的开发分支（branch）。</li>
<li>Stash：隐藏，是一个工作状态保存栈，用于保存/恢复WorkSpace中的临时状态。    </li>
</ul>
<h2 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h2><p>git的工作流程一般是这样的：<br>１、在工作目录中添加、修改文件；<br>２、将需要进行版本管理的文件放入暂存区域；<br>３、将暂存区域的文件提交到git仓库。<br>因此，git管理的文件有三种状态：已修改（modified）,已暂存（staged）,已提交(committed)    </p>
<h1 id="Git项目搭建"><a href="#Git项目搭建" class="headerlink" title="Git项目搭建"></a>Git项目搭建</h1><h2 id="本地仓库搭建"><a href="#本地仓库搭建" class="headerlink" title="本地仓库搭建"></a>本地仓库搭建</h2><p>创建本地仓库的方法有两种：一种是创建全新的仓库，另一种是克隆远程仓库。<br>1、创建全新的仓库，需要用GIT管理的项目的根目录执行：    </p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在当前目录新建一个Git代码库</span></span><br><span class="line"><span class="variable">$ </span>git init</span><br></pre></td></tr></table></figure>
<p>2、执行后可以看到，仅仅在项目目录多出了一个.git目录，关于版本等的所有信息都在这个目录里面。</p>
<h2 id="克隆远程仓库"><a href="#克隆远程仓库" class="headerlink" title="克隆远程仓库"></a>克隆远程仓库</h2><p>1、另一种方式是克隆远程目录，由于是将远程服务器上的仓库完全镜像一份至本地！    </p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 克隆一个项目和它的整个代码历史(版本信息)</span></span><br><span class="line">$ git <span class="keyword">clone</span> <span class="title">[url</span>]  <span class="comment"># https://gitee.com/fubuking/openclass.git</span></span><br></pre></td></tr></table></figure>

<h1 id="Git文件操作"><a href="#Git文件操作" class="headerlink" title="Git文件操作"></a>Git文件操作</h1><h2 id="文件的四种状态"><a href="#文件的四种状态" class="headerlink" title="文件的四种状态"></a>文件的四种状态</h2><p>版本控制就是对文件的版本控制，要对文件进行修改、提交等操作，首先要知道文件当前在什么状态，不然可能会提交了现在还不想提交的文件，或者要提交的文件没提交上。    </p>
<ul>
<li>Untracked: 未跟踪, 此文件在文件夹中, 但并没有加入到git库, 不参与版本控制. 通过git add 状态变为Staged.</li>
<li>Unmodify: 文件已经入库, 未修改, 即版本库中的文件快照内容与文件夹中完全一致. 这种类型的文件有两种去处, 如果它被修改, 而变为Modified. 如果使用git rm移出版本库, 则成为Untracked文件</li>
<li>Modified: 文件已修改, 仅仅是修改, 并没有进行其他的操作. 这个文件也有两个去处, 通过git add可进入暂存staged状态, 使用git checkout 则丢弃修改过, 返回到unmodify状态, 这个git checkout即从库中取出文件, 覆盖当前修改 !</li>
<li>Staged: 暂存状态. 执行git commit则将修改同步到库中, 这时库中的文件和本地文件又变为一致, 文件为Unmodify状态. 执行git reset HEAD filename取消暂存, 文件状态为Modified</li>
</ul>
<h2 id="查看文件状态"><a href="#查看文件状态" class="headerlink" title="查看文件状态"></a>查看文件状态</h2><p>上面说文件有4种状态，通过如下命令可以查看到文件的状态：</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta">#查看指定文件状态</span></span><br><span class="line">git status [filename]</span><br><span class="line"></span><br><span class="line"><span class="meta">#查看所有文件状态</span></span><br><span class="line">git status</span><br><span class="line"></span><br><span class="line"><span class="meta"># git add .                  添加所有文件到暂存区</span></span><br><span class="line"><span class="meta"># git commit -m "消息内容"    提交暂存区中的内容到本地仓库 -m 提交信息</span></span><br></pre></td></tr></table></figure>

<h2 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h2><p>有些时候我们不想把某些文件纳入版本控制中，比如数据库文件，临时文件，设计文件等<br>在主目录下建立”.gitignore”文件，此文件有如下规则：</p>
<ol>
<li>忽略文件中的空行或以井号（#）开始的行将会被忽略。</li>
<li>可以使用Linux通配符。例如：星号（*）代表任意多个字符，问号（？）代表一个字符，方括号（[abc]）代表可选字符范围，大括号（{string1,string2,…}）代表可选的字符串等。</li>
<li>如果名称的最前面有一个感叹号（!），表示例外规则，将不被忽略。</li>
<li>如果名称的最前面是一个路径分隔符（/），表示要忽略的文件在此目录下，而子目录中的文件不忽略。</li>
<li>如果名称的最后面是一个路径分隔符（/），表示要忽略的是此目录下该名称的子目录，而非文件（默认文件或目录都忽略）。<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line"><span class="comment">#为注释</span></span><br><span class="line">*.txt        <span class="comment">#忽略所有 .txt结尾的文件,这样的话上传就不会被选中！</span></span><br><span class="line">!<span class="class"><span class="keyword">lib</span>.<span class="title">txt</span>     <span class="comment">#但lib.txt除外</span></span></span><br><span class="line">/temp        <span class="comment">#仅忽略项目根目录下的TODO文件,不包括其它目录temp</span></span><br><span class="line">build/       <span class="comment">#忽略build/目录下的所有文件</span></span><br><span class="line">doc/*.txt    <span class="comment">#会忽略 doc/notes.txt 但不包括 doc/server/arch.txt</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>UML-快速上手</title>
    <url>/2020/10/11/L-%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/</url>
    <content><![CDATA[<h1 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h1><p>1)    UML——Unified modeling language UML (统一建模语言)，是一种用于软件系统分析和设计的语言工具，它用于帮助软件开发人员进行思考和记录思路的结果<br>2)    UML 本身是一套符号的规定，就像数学符号和化学符号一样，这些符号用于描述软件模型中的各个元素和他们之间的关系，比如类、接口、实现、泛化、依赖、组合、聚合等</p>
<h1 id="UML-图"><a href="#UML-图" class="headerlink" title="UML 图"></a>UML 图</h1><p>画 UML 图与写文章差不多，都是把自己的思想描述给别人看，关键在于思路和条理，UML 图分类：    </p>
<p>1)    用例图(use case)<br>2)    静态结构图：类图、对象图、包图、组件图、部署图<br>3)    动态行为图：交互图（时序图与协作图）、状态图、活动图    </p>
<p>说明：<br>类图是描述类与类之间的关系的，是 UML 图中最核心的</p>
<a id="more"></a>
<h1 id="UML-类图"><a href="#UML-类图" class="headerlink" title="UML 类图"></a>UML 类图</h1><p>1)    用于描述系统中的类(对象)本身的组成和类(对象)之间的各种静态关系。<br>2)    类之间的关系：依赖、泛化（继承）、实现、关联、聚合与组合<br>3)    类图简单举例</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span>&#123;</span> <span class="comment">//代码形式-&gt;类图</span></span><br><span class="line"><span class="keyword">private</span> Integer id; <span class="keyword">private</span> <span class="keyword">String</span> name;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="keyword">String</span> name)</span></span>&#123; <span class="keyword">this</span>.name=name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getName</span><span class="params">()</span></span>&#123; <span class="keyword">return</span>	name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2020/10/11/L-%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/1.jpg" alt="01"></p>
<h1 id="类图—依赖关系（Dependence）"><a href="#类图—依赖关系（Dependence）" class="headerlink" title="类图—依赖关系（Dependence）"></a>类图—依赖关系（Dependence）</h1><p>只要是在类中用到了对方，那么他们之间就存在依赖关系。如果没有对方，连编绎都通过不了。</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">PersonServiceBean</span> &#123; <span class="keyword">private</span> PersonDao personDao;<span class="comment">//类public void save(Person person)&#123;&#125;</span></span><br><span class="line"><span class="keyword">public</span> IDCard getIDCard(Integer personid)&#123;&#125; <span class="keyword">public</span> <span class="built_in">void</span> modify()&#123;</span><br><span class="line">Department department = new Department();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">PersonDao</span>&#123;&#125; <span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">IDCard</span>&#123;&#125; <span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Person</span>&#123;&#125; <span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Department</span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>对应的类图：<br><img src="/2020/10/11/L-%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/2.jpg" alt="02"><br>小结    </p>
<p>1)    类中用到了对方<br>2)    如果是类的成员属性<br>3)    如果是方法的返回类型<br>4)    是方法接收的参数类型<br>5)    方法中使用到    </p>
<h1 id="类图—泛化关系-generalization）"><a href="#类图—泛化关系-generalization）" class="headerlink" title="类图—泛化关系(generalization）"></a>类图—泛化关系(generalization）</h1><p>泛化关系实际上就是继承关系，他是依赖关系的特例</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">public <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">DaoSupport</span></span>&#123; public void save(<span class="type">Object</span> entity)&#123;</span><br><span class="line">&#125;</span><br><span class="line">public void delete(<span class="type">Object</span> id)&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">PersonServiceBean</span> <span class="keyword">extends</span> <span class="title">Daosupport</span></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对应的类图<br><img src="/2020/10/11/L-%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/3.jpg" alt="03"><br>小结:    </p>
<p>1)    泛化关系实际上就是继承关系<br>2)    如果 A 类继承了 B 类，我们就说 A 和 B 存在泛化关系</p>
<h1 id="类图—实现关系（Implementation）"><a href="#类图—实现关系（Implementation）" class="headerlink" title="类图—实现关系（Implementation）"></a>类图—实现关系（Implementation）</h1><p>实现关系实际上就是 A 类实现 B 接口，他是依赖关系的特例</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PersonService</span> </span>&#123; <span class="keyword">public</span> <span class="keyword">void</span> <span class="keyword">delete</span>(Interger id);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonServiceBean</span> <span class="keyword">implements</span> <span class="title">PersonService</span> </span>&#123; <span class="keyword">public</span> <span class="keyword">void</span> <span class="keyword">delete</span>(Interger id)&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>类图<br><img src="/2020/10/11/L-%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/4.jpg" alt="04"></p>
<h1 id="类图—关联关系（Association）"><a href="#类图—关联关系（Association）" class="headerlink" title="类图—关联关系（Association）"></a>类图—关联关系（Association）</h1><p><img src="/2020/10/11/L-%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/5.jpg" alt="05"></p>
<h1 id="类图—聚合关系（Aggregation）"><a href="#类图—聚合关系（Aggregation）" class="headerlink" title="类图—聚合关系（Aggregation）"></a>类图—聚合关系（Aggregation）</h1><h2 id="基本介绍-1"><a href="#基本介绍-1" class="headerlink" title="基本介绍"></a>基本介绍</h2><p>聚合关系（Aggregation）表示的是整体和部分的关系，整体与部分可以分开。聚合关系是关联关系的特例，所以他具有关联的导航性与多重性。    </p>
<p>如：一台电脑由键盘(keyboard)、显示器(monitor)，鼠标等组成；组成电脑的各个配件是可以从电脑上分离出来的，使用带空心菱形的实线来表示</p>
<h2 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h2><p><img src="/2020/10/11/L-%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/6.jpg" alt="06"><br><img src="/2020/10/11/L-%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/7.jpg" alt="07"></p>
<h1 id="类图—组合关系（Composition）"><a href="#类图—组合关系（Composition）" class="headerlink" title="类图—组合关系（Composition）"></a>类图—组合关系（Composition）</h1><h2 id="基本介绍-2"><a href="#基本介绍-2" class="headerlink" title="基本介绍"></a>基本介绍</h2><p>组合关系：也是整体与部分的关系，但是整体与部分不可以分开。    </p>
<p>再看一个案例：在程序中我们定义实体：Person 与 IDCard、Head, 那么 Head 和 Person 就是 组合，IDCard 和<br>Person 就是聚合。</p>
<p>但是如果在程序中 Person 实体中定义了对 IDCard 进行级联删除，即删除 Person 时连同 IDCard 一起删除，那么 IDCard  和 Person 就是组合了    </p>
<h2 id="应用案例"><a href="#应用案例" class="headerlink" title="应用案例"></a>应用案例</h2><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Person</span>&#123; <span class="keyword">private</span> IDCard card;</span><br><span class="line"><span class="keyword">private</span> Head head = new Head();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">IDCard</span>&#123;&#125; <span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Head</span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>对应的类图:<br><img src="/2020/10/11/L-%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/8.jpg" alt="08"><br>案例 2:</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Computer</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">Mouse</span> mouse = <span class="keyword">new</span> <span class="built_in">Mouse</span>(); <span class="comment">//鼠标可以和 computer 不能分离private Moniter moniter = new Moniter();//显示器可以和 Computer 不能分离public void setMouse(Mouse mouse) &#123;</span></span><br><span class="line"><span class="keyword">this</span>.mouse = mouse;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMoniter</span><span class="params">(Moniter moniter)</span> </span>&#123; <span class="keyword">this</span>.moniter = moniter;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mouse</span> &#123;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Moniter</span> &#123;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对应的类图:<br><img src="/2020/10/11/L-%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/9.jpg" alt="09"></p>
]]></content>
      <categories>
        <category>UML</category>
      </categories>
      <tags>
        <tag>UML</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript-快速上手</title>
    <url>/2020/10/04/JavaScript-%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/</url>
    <content><![CDATA[<h1 id="引入JavaScript"><a href="#引入JavaScript" class="headerlink" title="引入JavaScript"></a>引入JavaScript</h1><p>1、内部标签</p>
<figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span> </span></span><br><span class="line"><span class="xml">	//....</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>2、外部引入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--外部引入</span></span><br><span class="line"><span class="comment">  注意：script必须成对出现</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/test.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--不用显示定义type，也默认就是javaScript--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="数据类型概述"><a href="#数据类型概述" class="headerlink" title="数据类型概述"></a>数据类型概述</h1><p>1、比较运算符</p>
<ul>
<li>= 赋值</li>
<li>== 等于（类型不一样，值一样，也会判断为true）</li>
<li>=== 绝对等于（类型一样，值一样，结果为true）    </li>
<li><strong>这是js的缺陷，尽量不使用==比较</strong>    </li>
</ul>
<p>2、NaN</p>
<ul>
<li>NaN === NaN，这个与所有的数值都不相等，包括自己</li>
<li>只能通过isNaN（NaN）来判断这个数是否是NaN    </li>
</ul>
<p>3、浮点数问题</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">console.log((<span class="number">1</span>/<span class="number">3</span>)===(<span class="number">1</span><span class="number">-2</span>/<span class="number">3</span>))</span><br></pre></td></tr></table></figure>
<p>结果为false，尽管数值是都等于1/3<br>尽量避免使用小数计算，因为精度问题    </p>
<p>4、null 和 undefined</p>
<ul>
<li>null 空</li>
<li>undefined 未定义    </li>
</ul>
<p>5、数组</p>
<p><strong>Java的数组必须是相同类型的对象，JS中不需要这样</strong></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//保证代码的可读性，尽量使用[]</span></span><br><span class="line">var arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="string">'hello'</span>,<span class="literal">null</span>,<span class="literal">true</span>];</span><br><span class="line"><span class="comment">//第二种定义方法</span></span><br><span class="line">new Array(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="string">'hello'</span>);</span><br></pre></td></tr></table></figure>
<p><strong>取数字下标：如果越界了，就会 报undefined</strong>    </p>
<p>6、对象    </p>
<p><strong>对象是大括号，数组是中括号</strong><br>每个属性之间使用逗号隔开，最后一个属性不需要逗号</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">var person = &#123;</span><br><span class="line">	name:<span class="string">'Tom'</span>,</span><br><span class="line">	age:<span class="number">3</span>,</span><br><span class="line">	<span class="keyword">tag</span><span class="variable">s:</span>[<span class="string">'js'</span>,<span class="string">'java'</span>,<span class="string">'web'</span>,<span class="string">'...'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>取对象值</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">person.name</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="string">"Tom"</span></span></span><br><span class="line">person.age</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> 3</span></span><br></pre></td></tr></table></figure>
<h1 id="严格检查格式"><a href="#严格检查格式" class="headerlink" title="严格检查格式"></a>严格检查格式</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    前提：IDEA需要设置支持ES6语法</span></span><br><span class="line"><span class="comment">    'use strict';严格检查模式，预防JavaScript的随意性导致产生的一些问题</span></span><br><span class="line"><span class="comment">    必须写在JavaScript的第一行</span></span><br><span class="line"><span class="comment">    局部变量建议都使用let去定义</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="meta">        'use strict'</span>;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//全局变量</span></span></span><br><span class="line"><span class="javascript">         <span class="keyword">let</span> i=<span class="number">1</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//ES6 let</span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="数据类型详解"><a href="#数据类型详解" class="headerlink" title="数据类型详解"></a>数据类型详解</h1><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>1、正常字符串使用单引号，或者双引号包裹<br>2、多行字符串编写</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> msg =</span><br><span class="line">           <span class="string">`hello</span></span><br><span class="line"><span class="string">           world</span></span><br><span class="line"><span class="string">           你好呀</span></span><br><span class="line"><span class="string">           nihao</span></span><br><span class="line"><span class="string">           `</span></span><br></pre></td></tr></table></figure>
<p>3、模板字符串</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">let name</span> = <span class="string">'Tom'</span>;</span><br><span class="line"><span class="attribute">var msg</span> = <span class="string">`你好，$&#123;name&#125;`</span></span><br></pre></td></tr></table></figure>
<p>4、字符串长度</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">str.<span class="built_in">length</span></span><br></pre></td></tr></table></figure>
<p>5、字符串的可变性：不可变    </p>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p><strong>可以包含任意的数据类型</strong></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">var arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];<span class="comment">//通过下标取值和赋值</span></span><br></pre></td></tr></table></figure>
<p>1、长度</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">arr.<span class="built_in">length</span></span><br></pre></td></tr></table></figure>
<p>注意：假如给arr.length赋值，数组大小就会发生变化，如果赋值过小，元素就会丢失<br>2、indexOf，通过元素获得下标索引</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">arr.indexOf(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<p>3、slice()截取Array的一部分，返回的一个新数组，类似于String中substring        </p>
<p>4、push()，pop()<br>push：压入到尾部<br>pop：弹出尾部的一个元素</p>
<p>5、unshift(),shift()<br>unshift：压入到头部<br>shift：弹出头部的一个元素    </p>
<p>6、排序sort()</p>
<p>7、元素反转reverse()    </p>
<p>8、concat()连接<br>注意：concat()并没有修改数组，只是会返回一个新的数组    </p>
<p>9、连接符join<br>打印拼接数组，使用特定的字符串连接    </p>
<h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>若干个键值对</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line">var 对象名 = &#123;</span><br><span class="line">	属性名：属性值，</span><br><span class="line">	属性名：属性值，</span><br><span class="line">	属性名：属性值</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义了一个person对象，它有四个属性</span></span><br><span class="line">var person = &#123;</span><br><span class="line"><span class="symbol">	name:</span><span class="string">"Tom"</span>,</span><br><span class="line"><span class="symbol">	age:</span><span class="number">3</span>,</span><br><span class="line"><span class="symbol">	email:</span><span class="string">"123456798@QQ.com"</span>,</span><br><span class="line"><span class="symbol">	score:</span><span class="number">66</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>JS中对象，{…}表示一个对象，键值对描述属性xxx：xxx，多个属性之间用逗号隔开，最后一个属性不加逗号！<br>JavaScript中的所有的键都是字符串，值是任意对象！    </p>
<p>1、对象赋值</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">person.name</span> = <span class="string">"fbk"</span></span><br></pre></td></tr></table></figure>
<p>2、使用一个不存在的对象属性，不会报错！(undefined)    </p>
<p>3、动态的删减属性，通过delete删除对象的属性    </p>
<p>4、动态的添加，直接给新的属性添加值即可`</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">person.ahh</span> = ahh</span><br></pre></td></tr></table></figure>
<p>5、判断属性值是否在这个对象中 : xxx in xxx</p>
<p>6、判断一个属性是否是这个对象自身拥有的 hasOwnProperty()</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">person</span><span class="selector-class">.hasOwnProperty</span>(<span class="string">'xxx'</span>);</span><br></pre></td></tr></table></figure>
<h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><p>1、if判断    </p>
<p>2、while循环&amp;for循环    </p>
<p>3、forEach循环<br><strong>ES5.1特性</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age = [<span class="number">12</span>,<span class="number">43</span>,<span class="number">64</span>,<span class="number">7</span>,<span class="number">8</span>]  </span><br><span class="line">age.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value)</span><br><span class="line">&#125;)<span class="comment">//打印数组</span></span><br></pre></td></tr></table></figure>
<p>4、for in循环</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="built_in">var</span> <span class="built_in">num</span> <span class="keyword">in</span> age)&#123;</span><br><span class="line">    <span class="keyword">if</span> (age.hasownProperty(<span class="built_in">num</span>)) &#123;</span><br><span class="line">        console.<span class="built_in">log</span>(<span class="string">"存在"</span>)</span><br><span class="line">        console.<span class="built_in">log</span>(age[<span class="built_in">num</span>])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Map和Set"><a href="#Map和Set" class="headerlink" title="Map和Set"></a>Map和Set</h2><p>ES6的新特性    </p>
<p>Map</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">map</span> = <span class="built_in">new</span> Map([[<span class="string">'tom'</span>,<span class="number">10</span>],[<span class="string">'jack'</span>,<span class="number">20</span>],[<span class="string">'haha'</span>,<span class="number">30</span>]]);</span><br><span class="line"><span class="keyword">var</span> name = <span class="keyword">map</span>.get(<span class="string">'tom'</span>); <span class="comment">// 通过key获得value  </span></span><br><span class="line"><span class="keyword">map</span>.set(<span class="string">'admin'</span>,<span class="number">12</span>); <span class="comment">// 新增或修改  </span></span><br><span class="line"><span class="keyword">map</span>.<span class="built_in">delete</span>(<span class="string">'tom'</span>); <span class="comment">// 删除元素</span></span><br></pre></td></tr></table></figure>
<p>Set：无序不重复的集合</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span>.<span class="built_in">add</span>(<span class="number">2</span>);<span class="comment"> //添加</span></span><br><span class="line"><span class="built_in">set</span>.<span class="built_in">delete</span>(<span class="string">'tom'</span>) <span class="comment"> // 删除</span></span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">set</span>.has(<span class="number">3</span>))<span class="comment">;// 是否包含某个元素</span></span><br></pre></td></tr></table></figure>

<h2 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h2><p>1、数组遍历：</p>
<figure class="highlight gml"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过forof遍历，forin遍历时用下标</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> <span class="symbol">x</span> of arr)&#123;</span><br><span class="line">    console.log(<span class="symbol">x</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、map集合遍历</p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">map</span> = <span class="keyword">new</span> <span class="keyword">map</span>([<span class="string">'jack'</span>,<span class="number">20</span>],[<span class="string">'haha'</span>,<span class="number">10</span>],[<span class="string">'tom'</span>,<span class="number">10</span>])  </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> x <span class="keyword">of</span> <span class="keyword">map</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3、set集合遍历</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">set</span> = <span class="keyword">new</span> <span class="keyword">set</span>([<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]) <span class="comment">//集合记得用[]包围  </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> x of <span class="keyword">set</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h2><p><strong>定义方式一</strong></p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title">abs</span>(x)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">x</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> -x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一旦执行到return代表函数结束，返回结果<br>如果没有执行return，函数执行完也会返回结果，结果就是undefined    </p>
<p><strong>定义方式二</strong></p>
<figure class="highlight gml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="built_in">abs</span> = function(<span class="symbol">x</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="symbol">x</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> -<span class="symbol">x</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>function(x){}是一个匿名函数，可以把结果赋值给abs，通过abs就可以调用函数<br><strong>方法一和方法二等价</strong>    </p>
<p>调用函数</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">abs</span><span class="params">(<span class="number">10</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">abs</span><span class="params">(-<span class="number">10</span>)</span></span></span><br></pre></td></tr></table></figure>
<p><strong>参数问题</strong><br>javascript可以传任何个参数，也可以不传参数<br>参数进来是否存在的问题？假设不存在参数，如何抛出异常？</p>
<figure class="highlight gml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="built_in">abs</span> = function(<span class="symbol">x</span>)&#123;</span><br><span class="line">    <span class="comment">//手动抛出异常来判断</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">typeof</span> <span class="symbol">x</span> !== <span class="string">'number'</span>) &#123;</span><br><span class="line">        throw <span class="string">'not a number'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="symbol">x</span>&gt;=o) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="symbol">x</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="symbol">x</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>arguments对象</strong><br>加入函数的实参没有写多个，但使用时传入了多个参数，使用arguments对象可以把这多个参数用数组返回,argument对象其实就是传入的所有参数的数组。<br>特性：<br>1.arguments对象和function是分不开的。<br>2.因为arguments这个对象不能显式创建。<br>3.arguments对象只有函数开始时才可用。<br>使用方法：<br>虽然arguments对象并不是一个数组，但是访问单个参数的方式与访问数组元素的方式相同<br>例如：<br>arguments[0],arguments[1]…..arguments[n]<br>在js中 不需要明确指出参数名，就能访问它们，例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> s = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">            alert(<span class="built_in">arguments</span>[i]);</span><br><span class="line">            s += <span class="built_in">arguments</span>[i] + <span class="string">","</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line">test(<span class="string">"name"</span>, <span class="string">"age"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//结果为name,age</span></span><br></pre></td></tr></table></figure>
<p><strong>rest参数</strong><br>函数定义了两个参数，但是传入了第三个参数，要怎么取出第三个参数呢？</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">(a,b)</span></span>&#123;</span><br><span class="line">    console.log(<span class="string">'a-&gt;'</span>+a);</span><br><span class="line">    console.log(<span class="string">'b-&gt;'</span>+b);</span><br><span class="line">    <span class="comment">//以前的方法取第三个元素：</span></span><br><span class="line">    <span class="keyword">if</span> (arguments.length&gt;<span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">2</span>; i&lt;arguments.length;i++)&#123;</span><br><span class="line">            console.log(arguments[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//现在的方法(rest参数)：在函数中定义rest参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test1</span><span class="params">(a,b,<span class="rest_arg">...rest</span>)</span></span>&#123;</span><br><span class="line">    console.log(<span class="string">'a-&gt;'</span>+a);</span><br><span class="line">    console.log(<span class="string">'b-&gt;'</span>+b);</span><br><span class="line">    console.log(rest);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h2><p><strong>变量的作用域</strong></p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//内部函数可以访问外部函数的成员，反之不行</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">a1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">var</span> y = x +<span class="number">1</span>; <span class="comment">//2</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//外部访问了内部函数的变量，会不行</span></span><br><span class="line">    <span class="keyword">var</span> z = y+<span class="number">1</span>; <span class="comment">//报错</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在JavaScript中，函数查找变量从自身函数开始，由“内”向“外”查找，假设外部存在这个同名的函数变量，则内部函数会屏蔽外部函数的变量。</p>
<p><strong>提升变量的作用域</strong></p>
<figure class="highlight gml"><table><tr><td class="code"><pre><span class="line">function xxx()&#123;</span><br><span class="line">	<span class="keyword">var</span> <span class="symbol">x</span> = <span class="string">'x'</span> + <span class="symbol">y</span>;</span><br><span class="line">    console.log(<span class="symbol">x</span>);</span><br><span class="line">    <span class="keyword">var</span> <span class="symbol">y</span> = <span class="string">'y'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果：x undefined<br>说明：js执行引擎，自动提升了y的声明，但是不会提升变量y的赋值；<br>这个是在javascript建立之初就存在的特性。 养成规范：所有 的变量定义都放在函数的头部，不要乱放，便于代码维护；</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">xxx</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x,y,z;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//之后再赋值调用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>全局变量</strong>    </p>
<p>全局对象window:默认所以的全局变量，都会自动绑定在window对象下<br>alert() 这个函数本身也是一个window的变量；</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x =<span class="string">'xxx'</span>;</span><br><span class="line"><span class="built_in">window</span>. alert(x);</span><br><span class="line"><span class="keyword">var</span> o1d_ _alert = <span class="built_in">window</span>. alert;</span><br><span class="line"><span class="comment">//o1d_ alert(x);</span></span><br><span class="line"><span class="built_in">window</span>.alert = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="comment">//发现alertO 失效了</span></span><br><span class="line"><span class="built_in">window</span>. alert(<span class="number">123</span>);</span><br><span class="line"><span class="comment">//恢复</span></span><br><span class="line"><span class="built_in">window</span>.alert = o1d_ _alert;</span><br><span class="line"><span class="built_in">window</span>. alert(<span class="number">456</span>);</span><br></pre></td></tr></table></figure>
<p>javascript实际上只有一个全局作用域，任何变量（函数也可以视为变量），假设没有在函数作用范围内找到，就会向外查找，如果在全局作用域都没有找到，就会报错 Refrence</p>
<p><strong>规范</strong><br>由于我们的所有变量都会绑定到window上，如果不同的js文件，使用了相同的全局变量，就会产生冲突—&gt;如何减少这样的冲突？    </p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 唯一全局变量</span></span><br><span class="line"><span class="keyword">var</span> fbk = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义全局变量</span></span><br><span class="line">fbk.name = <span class="string">'fox'</span>;</span><br><span class="line">fbk.add = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>把自己的代码全部放入自己定义的唯一空间名字中，降低全局命名冲突问题<br>jQuery中就是使用的该方法：jQuery.name，简便写法：$()    </p>
<p><strong>局部作用域</strong><br>ES6let关键字，解决局部作用域冲突问题，现建议大家都用let去定义局部变量    </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">aaa</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(vari=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(i+<span class="number">1</span>); <span class="comment">//问题? i 出了这个作用域还可以使用</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用let后</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">aaa</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(leti=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(i+<span class="number">1</span>); <span class="comment">//Uncaught ReferenceError: i is not defined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>常量</strong><br>在ES6之前，怎么定义常量：只有用全部大写字母命名的变量就是常量；建议不要修改这样的值。</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">var <span class="literal">PI</span> = '<span class="number">3.14</span>' ;</span><br><span class="line">console.' <span class="number">1</span>og(<span class="literal">PI</span>);</span><br><span class="line"><span class="literal">PI</span> = '<span class="number">213</span>'; <span class="comment">//可以改变这个值</span></span><br><span class="line">console<span class="number">.1</span>og(<span class="literal">PI</span>);</span><br></pre></td></tr></table></figure>
<p>在ES6引入了常量关键字 const</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="literal">PI</span> = <span class="string">'3.14'</span>;</span><br><span class="line">console.<span class="built_in">log</span>(<span class="literal">PI</span>);</span><br><span class="line"><span class="literal">PI</span> = <span class="string">'123'</span>; <span class="comment">//报错，常量不允许修改</span></span><br></pre></td></tr></table></figure>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>方法就是把函数放在对象的里面，对象只有两个东西：属性和方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    name: <span class="string">'XXX'</span>;</span><br><span class="line">    brith: <span class="number">1997</span>;</span><br><span class="line">    <span class="comment">//方法 </span></span><br><span class="line">    age: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear();</span><br><span class="line">        <span class="keyword">return</span> now - <span class="keyword">this</span>.brith; <span class="comment">//this是默认指向调用它的那个对象，这里值person</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//属性调用</span></span><br><span class="line">person.name;</span><br><span class="line"><span class="comment">//方法调用，方法一定要带（）</span></span><br><span class="line">person.age();</span><br></pre></td></tr></table></figure>
<p><strong>apply方法</strong><br>this是无法指向的，是默认指向调用它的那个对象的；<br>在js中可以控制this指向<br>apply方法是可以控制this指向的，该方法有两个参数，第一个是getArg要使用的是那个对象，第二个是数组    </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAge</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear();</span><br><span class="line">    <span class="keyword">return</span> now - <span class="keyword">this</span>.brith;</span><br><span class="line">&#125;</span><br><span class="line">getAge.apply(person,[]); <span class="comment">//this指向了person，参数为空</span></span><br></pre></td></tr></table></figure>
<h1 id="内部对象"><a href="#内部对象" class="headerlink" title="内部对象"></a>内部对象</h1><p><strong>标准对象</strong></p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">标准对象</span><br><span class="line"><span class="keyword">typeof</span> 123</span><br><span class="line">“number”</span><br><span class="line"><span class="keyword">typeof</span> ‘123’</span><br><span class="line">‘string’</span><br><span class="line"><span class="keyword">typeof</span> true</span><br><span class="line">“boolean”</span><br><span class="line"><span class="keyword">typeof</span> NaN</span><br><span class="line">“number”</span><br><span class="line"><span class="keyword">typeof</span> []</span><br><span class="line">"object’</span><br><span class="line"><span class="keyword">typeof</span> &#123;&#125;</span><br><span class="line">“object”</span><br><span class="line"><span class="keyword">typeof</span> Math. abs</span><br><span class="line">“functi <span class="keyword">on</span>”</span><br><span class="line"><span class="keyword">typeof</span> undefined</span><br><span class="line">“undefined”</span><br></pre></td></tr></table></figure>
<h2 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h2><p>基本使用</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">var now = <span class="keyword">new</span> <span class="constructor">Date()</span>; <span class="comment">//sat Jan 04 2020 10:47:06 GMT+0800 (中国标准时间)</span></span><br><span class="line">now. getFu11YearO); <span class="comment">//年</span></span><br><span class="line">now. get<span class="constructor">Month()</span>; <span class="comment">//月0~11 代表月</span></span><br><span class="line">now. get<span class="constructor">Date()</span>; <span class="comment">//日</span></span><br><span class="line">now. get<span class="constructor">Day()</span>; <span class="comment">//星期几</span></span><br><span class="line">now. get<span class="constructor">Hours()</span>; <span class="comment">//时</span></span><br><span class="line">now. get<span class="constructor">Minutes()</span>; <span class="comment">//分</span></span><br><span class="line">now. getseconds<span class="literal">()</span>; <span class="comment">//秒</span></span><br><span class="line">now. getTimeO); <span class="comment">//时间戳全世界统一1970 1.1 0:00:00 毫秒数</span></span><br><span class="line">console. log(<span class="keyword">new</span> <span class="constructor">Date(1578106175991)</span>) <span class="comment">//时间戳转为时间</span></span><br></pre></td></tr></table></figure>
<p>转换</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">now = <span class="keyword">new</span> Date (<span class="number">1578106175991</span>)</span><br><span class="line">sat Jan <span class="number">04</span> <span class="number">2020</span> <span class="number">10</span>:<span class="number">49</span>:<span class="number">35</span> GMT+<span class="number">0800</span> (中国标准时间)</span><br><span class="line">now. toLocalestring <span class="comment">//注意，调用是一个方式，不是一一个属性!</span></span><br><span class="line">f <span class="keyword">to</span><span class="constructor">Localestring()</span> &#123; <span class="literal">[<span class="identifier">native</span> <span class="identifier">code</span>]</span> &#125;</span><br><span class="line">now. <span class="keyword">to</span><span class="constructor">Localestring()</span></span><br><span class="line"><span class="string">"2020/1/4上午10:49:35"</span></span><br><span class="line">now. <span class="keyword">to</span><span class="constructor">GMTString()</span></span><br><span class="line">'Sat, <span class="number">04</span> Jan <span class="number">2020</span> <span class="number">02</span>:<span class="number">49</span>:<span class="number">35</span> GMT<span class="string">"</span></span><br></pre></td></tr></table></figure>
<h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><p><strong>JSON是什么</strong><br>早期，所有数据传输习惯使用XML文件</p>
<ul>
<li>JSON(JavaScript Object Notation, JS对象简谱)是一种轻量级的数据交换格式。</li>
<li>简洁和清晰的层次结构使得JSON成为理想的数据交换语言。</li>
<li>易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。</li>
<li>在JavaScript 一切皆为对象、任何js支持的类型都可以用JSON来表示; number, string…</li>
<li>格式:<br>对象都用{}<br>数组都用[]<br>所有的键值对都是用key:value    </li>
</ul>
<p><strong>json字符串和js对象的转换</strong></p>
<figure class="highlight excel"><table><tr><td class="code"><pre><span class="line"><span class="built_in">var</span> user = &#123;</span><br><span class="line">    name <span class="symbol">:</span></span><br><span class="line">    <span class="string">"XXX"</span>,</span><br><span class="line">    a<span class="symbol">ge:</span> <span class="number">3</span>,</span><br><span class="line">    s<span class="symbol">ex:</span> '男'</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">//对象转化为json字符串(json字符串每个键都用<span class="string">""</span>或'包围)</span><br><span class="line"><span class="built_in">var</span> jsonuser = JSON. stringify(user); </span><br><span class="line">//输出为&#123;<span class="string">"name"</span> <span class="symbol">:</span> <span class="string">"XXX"</span>，<span class="string">"age"</span><span class="symbol">:3</span>,<span class="string">"sex"</span> <span class="symbol">:</span><span class="string">"男"</span>&#125;</span><br><span class="line"></span><br><span class="line">//json字符串转化为对象参数为json 字符串</span><br><span class="line"><span class="built_in">var</span> obj = JSON. parse(' &#123;<span class="string">"name"</span><span class="symbol">:</span><span class="string">"XXX"</span> , <span class="string">"age"</span> <span class="symbol">:3</span>,<span class="string">"sex"</span><span class="symbol">:</span><span class="string">"男"</span>&#125;');</span><br><span class="line">//输出为&#123;<span class="built_in">na</span><span class="symbol">me:</span><span class="string">"XXX"</span>,a<span class="symbol">ge:3</span>,s<span class="symbol">ex:</span><span class="string">"男"</span>&#125;</span><br></pre></td></tr></table></figure>
<p>json和js对象的区别：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;a: <span class="symbol">'he11</span>o' ,b: <span class="symbol">'he11o</span>b'&#125;;</span><br><span class="line"><span class="keyword">var</span> json = '&#123;<span class="string">"a"</span>: <span class="string">"he11o"</span> , <span class="string">"b"</span>:<span class="string">"he1lob"</span>&#125;'</span><br></pre></td></tr></table></figure>

<h1 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h1><p>1、原型对象<br>当创建一个新函数时，系统会根据一组特定的规则为函数创建一个prototype属性，该属性会指向一个名为原型对象的对象，在默认情况下，该对象会自动生成一个构造函数（constructor），该构造函数是一个指向函数的指针。而在原型对象中，除了有这个构造函数，我们还可以添加其他的属性和方法。    </p>
<p>通俗来讲就是，当我们新建一个函数A时，函数A内部会有一个属性，该属性指向一个对象（名字叫原型对象），而这个对象里面默认有一个构造函数，这个构造函数指向我们最初新建的函数A。然后，我们还可以在原型对象中添加属性和方法</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">//①默认情况下，构造函数是空的</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> Person（）&#123;<span class="comment">//构造函数首字母大写</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//②添加属性和方法</span></span><br><span class="line"></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Person</span>.</span></span>prototype.name=<span class="string">"dp"</span>;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Person</span>.</span></span>prototype.doSomething=<span class="keyword">function</span>(）&#123;</span><br><span class="line">    alert(this.name);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//③定义好构造函数和其他属性方法之后，就可以创建实例了</span></span><br><span class="line"></span><br><span class="line">var person1=<span class="keyword">new</span> <span class="constructor">Person()</span>;</span><br><span class="line">var person2=<span class="keyword">new</span> <span class="constructor">Person()</span>;</span><br></pre></td></tr></table></figure>
<p>2、class继承<br><strong>class关键字是在ES6引入的</strong>    </p>
<p>1、添加方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//给student添加一个方法 </span></span><br><span class="line"><span class="comment">//1、先定义一个类、属性、方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">student</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name)&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    hello()&#123;</span><br><span class="line">        alert(<span class="string">'hello'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用方法</span></span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> student(<span class="string">'小明'</span>);</span><br><span class="line">person.hello();</span><br></pre></td></tr></table></figure>
<p>2、继承</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">student</span></span>&#123;</span><br><span class="line">    constructor(name)&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    hello()&#123;</span><br><span class="line">        alert(<span class="symbol">'hell</span>o');</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">xiaoStudent</span> <span class="keyword">extends</span> <span class="title">student</span></span>&#123;</span><br><span class="line">    constructor(name,grade)&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.grade = grade;</span><br><span class="line">    &#125;</span><br><span class="line">    mygrade()&#123;</span><br><span class="line">        alert('我是一个小学生')</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line"><span class="keyword">var</span> xiaoStudent = <span class="keyword">new</span> xiaoStudent(<span class="string">"xiaohong"</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure>
<h1 id="操作BOM对象"><a href="#操作BOM对象" class="headerlink" title="操作BOM对象"></a>操作BOM对象</h1><p><strong>window</strong><br>window代表浏览器窗口</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.alert(<span class="number">1</span>)</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line"><span class="built_in">window</span>.innerHeight</span><br><span class="line"><span class="number">258</span> </span><br><span class="line"><span class="built_in">window</span>.innerwidth</span><br><span class="line"><span class="number">919</span></span><br><span class="line"><span class="built_in">window</span>.outerHeight</span><br><span class="line"><span class="number">994</span></span><br><span class="line"><span class="built_in">window</span>.outerwidth</span><br><span class="line"><span class="number">919</span></span><br></pre></td></tr></table></figure>
<p><strong>Navigator（不建议使用）</strong><br>Navigator，封装了浏览器的信息</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">navigator . appName</span><br><span class="line"><span class="string">"Netscape"</span></span><br><span class="line">navigator . appVersion</span><br><span class="line"><span class="comment">"5.0 (windows NT 10.0; WOw64) Applewebkit/537.36 (KHTML， like Gecko)</span></span><br><span class="line">Chrome/<span class="number">63.0</span>.<span class="number">3239.132</span> Safari/<span class="number">537.36</span><span class="comment">"</span></span><br><span class="line">navigator . userAgent</span><br><span class="line"><span class="comment">"Mozi11a/5.0 (Windows NT 10. 0; WOw64) ApplewebKit/537.36 (KHTML， like :</span></span><br><span class="line">Gecko) Chrome/<span class="number">63.0</span>. <span class="number">3239.132</span> Safari/<span class="number">537.36</span><span class="comment">"</span></span><br><span class="line">navigator. platform</span><br><span class="line"><span class="string">"Win32"</span></span><br></pre></td></tr></table></figure>
<p>大多数时候，我们不会使用navigator对象，因为会被人为修改!<br>不建议使用这些属性来判断和编写代码</p>
<p><strong>screen</strong><br>代表屏幕尺寸</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">screen.width</span><br><span class="line"><span class="number">1920</span></span><br><span class="line">screen.Height</span><br><span class="line"><span class="number">1080</span></span><br></pre></td></tr></table></figure>
<p><strong>lacation</strong><br>代表当前页面的URL信息<br>location属性：<br>主机：host<br>当前指向的位置：href<br>协议:protocol<br>重新加载的方法：f reload() //location.reload()刷新网页<br>(设置新的地址:location.assign(‘想要跳转的地址’))    </p>
<p><strong>document</strong><br>document代表当前的页面，HTML DOM文档树</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">//获取具体的文档树节点：</span><br><span class="line"><span class="tag">&lt;<span class="name">d1</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span> Java<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span> JavaSE<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span> JavaEE<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">d1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> d] = <span class="built_in">document</span>. getElementById(<span class="string">' app '</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//获取cookie</span><br><span class="line">document.cookie</span><br><span class="line"></span><br><span class="line">//劫持cookie原理：把一段能劫持cookie的js代码放在网站上 一点开就能把你的cookie拿了</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">'劫持cookie'</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 获取你的cookie上传到他的服务器 --&gt;</span></span><br><span class="line">//服务器端可以设置cookie为httpOnly</span><br></pre></td></tr></table></figure>
<p><strong>history</strong><br>history代表浏览器的历史记录</p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">history.back<span class="comment">()</span> <span class="comment">//后退</span></span><br><span class="line">history.forward<span class="comment">()</span> <span class="comment">//前进</span></span><br></pre></td></tr></table></figure>
<h1 id="操作DOM对象"><a href="#操作DOM对象" class="headerlink" title="操作DOM对象"></a>操作DOM对象</h1><p>DOM：文档对象模型</p>
<p><strong>核心</strong><br>浏览器网页就是一个Dom树形结构！</p>
<ul>
<li>更新：更新Dom节点</li>
<li>遍历Dom节点：得到Dom节点</li>
<li>删除：删除一个Dom节点</li>
<li>添加：添加一个新的节点</li>
</ul>
<p>要操作一个Dom节点，就必须要先获得这个Dom节点</p>
<h2 id="获得dom节点"><a href="#获得dom节点" class="headerlink" title="获得dom节点"></a>获得dom节点</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题一<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">'p1'</span>&gt;</span>p1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">'p2'</span>&gt;</span>p2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="comment">//对应css选择器</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> h1 = <span class="built_in">document</span>.getElementByTagName(<span class="string">'h1'</span>); <span class="comment">//这里就是获取到了这个dom节点</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> p1 = <span class="built_in">document</span>.getElementByID(<span class="string">'p1'</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> p2 = <span class="built_in">document</span>.getElementByclassName(<span class="string">'p1'</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> father = <span class="built_in">document</span>.getElementByID(<span class="string">'father'</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> childrens = father.children;<span class="comment">// 获取父节点下的所有子节点</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> childrens = father.children[index]; <span class="comment">//获取其中一个节点</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//father.firstchild 获取父节点的第一个子节点</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//father.lostchild 获取父节点的最后一个子节点</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="更新节点"><a href="#更新节点" class="headerlink" title="更新节点"></a>更新节点</h2><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> id=<span class="string">"id1"</span>&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="selector-tag">var</span> id1 = document.getElementByID(<span class="string">'id1'</span>)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">id1<span class="selector-class">.innerText</span> = <span class="string">'123'</span> <span class="comment">//innerText方法修改文本内容  </span></span><br><span class="line">id1<span class="selector-class">.innerHTML</span> = <span class="string">'&lt;strong&gt;123&lt;/strong&gt;'</span> <span class="comment">//innerHTML解析HTML超文本的 可以修改id的样式</span></span><br><span class="line">id1<span class="selector-class">.style</span><span class="selector-class">.color</span> = <span class="string">'red'</span> <span class="comment">//style.什么：style方法修改css样式。即可以在js里操作修改样式</span></span><br><span class="line">id1<span class="selector-class">.style</span><span class="selector-class">.padding</span> = <span class="string">'2em'</span> <span class="comment">//属性使用字符串包裹</span></span><br></pre></td></tr></table></figure>
<h2 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h2><p>删除节点的步骤： 先获取父节点，通过父节点删除自己</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题一<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">'p1'</span>&gt;</span>p1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">'p2'</span>&gt;</span>p2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> self = <span class="built_in">document</span>.getElementByID(<span class="string">'p1'</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> father = p1.parentElement; <span class="comment">//找到p1的父节点</span></span></span><br><span class="line"><span class="actionscript">    father.removechild(self) <span class="comment">//通过父节点使用removechild删掉自己（只有标记为id选择器的节点才可以删除</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注意：删除多个节点时，children是时刻变化的，不能直接father.removechild(father.children[0])这样从第一个索引开始删</p>
<h2 id="插入节点"><a href="#插入节点" class="headerlink" title="插入节点"></a>插入节点</h2><p>我们获得了某个dom节点，假设这个dom节点是空的，我们通过innerHTML就可以增加一个元素了，但是这个dom节点以及存在元素了，就不能这么干了，因为会产生覆盖，这个时候就使用追加节点的方法：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"js"</span>&gt;</span>JavaScript<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"se"</span>&gt;</span>JavaSE<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"ee"</span>&gt;</span>JavaEE<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"me"</span>&gt;</span>JavaME<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> js = <span class="built_in">document</span>.getElementByID(<span class="string">'js'</span>); <span class="comment">//获取想要加入的节点</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> list = <span class="built_in">document</span>.getElementByID(<span class="string">'list'</span>); <span class="comment">//获取想要加入的父节点</span></span></span><br><span class="line"><span class="actionscript">    list.appendchild(js); <span class="comment">//在list节点下追加子节点 </span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="在js中创建一个新的节点追加"><a href="#在js中创建一个新的节点追加" class="headerlink" title="在js中创建一个新的节点追加"></a>在js中创建一个新的节点追加</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//第一个方法：通过js创建一个新节点</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> <span class="keyword">new</span> = <span class="built_in">document</span>.creatElement(<span class="string">'p'</span>); <span class="comment">//创建一个p标签</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">new</span>.id = <span class="string">'new'</span>;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">new</span>.innerText = <span class="string">'hello'</span>; <span class="comment">//在这个标签上输入文本</span></span></span><br><span class="line"><span class="actionscript">    list.appendchild(<span class="keyword">new</span>); <span class="comment">//在父节点下加进去</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//用第二种方法创建一个有自己属性的标签节点</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> myScript = <span class="built_in">document</span>.creatElement(<span class="string">'script'</span>);<span class="comment">//创建一个script标签节点</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    myScript.setAttribute('type','text/javascript'); /*setAttribute方法加入属性和属性值。第一个参数为属性名，第二个参数为属性值。生成效果为<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">'text/javascript'</span>&gt;</span><span class="javascript">&lt;<span class="regexp">/sript&gt;*/</span></span></span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//可以创建一个style标签</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> myStyle= <span class="built_in">document</span>.createElement(<span class="string">'style'</span>); <span class="comment">//创建了一个 空style标签</span></span></span><br><span class="line"><span class="actionscript">    myStyle.setAttribute(<span class="string">'type'</span>, <span class="string">'text/css'</span>);</span></span><br><span class="line"><span class="actionscript">    myStyle.innerHTML = <span class="string">'body&#123;background-color: chartreuse;&#125;'</span>; <span class="comment">//设置标签内容</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementsByTagName( <span class="string">'head'</span> )[<span class="number">0</span>]. appendChild(myStyle) <span class="comment">//在父节点追加这个style标签</span></span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="在前面插入节点：insertBefore"><a href="#在前面插入节点：insertBefore" class="headerlink" title="在前面插入节点：insertBefore"></a>在前面插入节点：insertBefore</h2><figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ee = <span class="built_in">document</span>. getElementById(<span class="string">'ee'</span>);</span><br><span class="line"><span class="keyword">var</span> js = <span class="built_in">document</span> . getElementById(<span class="string">'js'</span>);</span><br><span class="line"><span class="keyword">var</span> <span class="keyword">list</span> = <span class="built_in">document</span> . getElementById( <span class="string">'list'</span>);</span><br><span class="line"><span class="regexp">//要包含的节点. insertBefore(newNode, targetNode)</span></span><br><span class="line"><span class="regexp">list. insertBefore(js,ee); //</span>在<span class="keyword">list</span>节点中（<span class="keyword">list</span>是父节点），在ee节点前加入目标节点js</span><br></pre></td></tr></table></figure>
<h1 id="操作表单（验证）"><a href="#操作表单（验证）" class="headerlink" title="操作表单（验证）"></a>操作表单（验证）</h1><p><strong>表单 form</strong>    </p>
<ul>
<li>文本框—-text</li>
<li>下拉框—-select</li>
<li>单选框—-radio</li>
<li>多选框—-checkbox</li>
<li>隐藏域—-hidden</li>
<li>密码框—-password</li>
<li>…    </li>
</ul>
<h2 id="获取表单信息"><a href="#获取表单信息" class="headerlink" title="获取表单信息"></a>获取表单信息</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">'#'</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    //文本框</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"username"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    //单选框</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"man"</span> <span class="attr">id</span>=<span class="string">"boy"</span>&gt;</span>男</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"women"</span> <span class="attr">id</span>=<span class="string">"girl"</span>&gt;</span>女</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> input_text = <span class="built_in">document</span>.getElementById(<span class="string">'username'</span>;)</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//得到文本框的值</span></span></span><br><span class="line">    input_text.value</span><br><span class="line"><span class="actionscript">    <span class="comment">//修改文本框的值</span></span></span><br><span class="line"><span class="actionscript">    input_text.value=<span class="string">'123'</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> boy_radio = <span class="built_in">document</span>.getElementById(<span class="string">'boy'</span>;)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> girl_radio = <span class="built_in">document</span>.getElementById(<span class="string">'girl'</span>)</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//对于单选框、多选课等固定的value，boy_radio.value只能去到当前的值  </span></span></span><br><span class="line"><span class="actionscript">    boy_radio.checked; <span class="comment">//看返回的结果，是否为true，如果为true则被选中</span></span></span><br><span class="line"><span class="actionscript">    boy_radio.checked=<span class="literal">true</span>; <span class="comment">//赋值</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="8-2、提交表单，MD5加密"><a href="#8-2、提交表单，MD5加密" class="headerlink" title="8.2、提交表单，MD5加密"></a>8.2、提交表单，MD5加密</h2><p>文本框的密码在控制台上加密，即后台的密码是如何加密的？</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 首先要导入MD5这个工具包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn . bootcss . com/blueimp-md5/2.10.0/js/md5.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- action属性是提交完表单后调整的网页 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"#"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>用户名: <span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"username"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">P</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>密码: <span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">id</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--绑定事件onclick被点击。按钮提交事件aaa()--&gt;</span> .</span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">onclick</span>=<span class="string">"aaa()"</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">aaa</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> uname = <span class="built_in">document</span>.getElementById( <span class="string">'username '</span> );</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> pwd = <span class="built_in">document</span>.getElementById(<span class="string">'password'</span> );</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span><span class="number">.1</span>og(uname.value);</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//MD5算法把pwd变成乱码，用这个方法会在前端把密码加长 用户体验感不好</span></span></span><br><span class="line">        pwd.value = md5(pwd.value);</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span><span class="number">.1</span>og(pwd.value);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>表单提交，md5加密优化版：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用form提交事件aaa()</span></span><br><span class="line"><span class="comment">    οnsubmit=绑定一个检测的函数，返回true或false</span></span><br><span class="line"><span class="comment">    将这个结果返回给表单，使用onsubmit接收</span></span><br><span class="line"><span class="comment">    οnsubmit="return aaa()"</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"https ://www. baidu. com/"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">onsubmit</span>=<span class="string">"return aaa()"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">P</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>用户名: <span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"username"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>密码: <span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">id</span>=<span class="string">" input - password"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>= <span class="string">"hidden"</span> <span class="attr">id</span>=<span class="string">"md5-password"</span> <span class="attr">name</span>=<span class="string">" password"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">aaa</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line">        alert(1);</span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> uname = <span class="built_in">document</span>.getElementById( <span class="string">'username'</span> );</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> pwd = <span class="built_in">document</span>.getElementById(<span class="string">" input-password"</span> );</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//通过隐藏去提交</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> md5pwd = <span class="built_in">document</span>.getElementById(<span class="string">'md5-password'</span> );</span></span><br><span class="line">        md5pwd.value = md5(pwd.value);</span><br><span class="line"><span class="actionscript">        <span class="comment">//可以校验判断表中内容，true就是通过提交，false, 阻止提交</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> <span class="literal">true</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h1><p>使用时导入包或者jQuery的cdn网址<br>jq使用的公式：$(selector).action() //这个selector选择器就是css的选择器.action是事件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span> = <span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span> = <span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"lib/jquery-3.4.1.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">id</span> = <span class="string">"test-jquery"</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        	<span class="comment">//选择器就是css选择器</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">'#test-jquery'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">                alert(<span class="string">'hello,jQuery!'</span>);</span></span><br><span class="line">            &#125;);</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><p>原生的js选择器的种类有：</p>
<ul>
<li>标签选择器：document.getElementByTagName()</li>
<li>id选择器： document.getElementByID()</li>
<li>类选择器： document.getElementByClassName()    </li>
</ul>
<p>jq选择器有（css中的选择器他全部都能用）：</p>
<ul>
<li>标签选择器：$(‘p’).click();</li>
<li>id选择器：$(’#id名’).click();</li>
<li>class选择器：$(’.class名’).click();</li>
<li>…查看文档看更多</li>
</ul>
<p>例子：</p>
<figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"test_jquery"</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 在这个a标签中添加一个单击事件 --&gt;</span></span></span><br><span class="line"><span class="xml">    // 使用js语法</span></span><br><span class="line"><span class="xml">    var id = document.getElementById('test_jquery')</span></span><br><span class="line"><span class="xml">    id.click(function()</span><span class="xquery">&#123;</span></span><br><span class="line"><span class="xquery">         alert(<span class="string">'jQuery'</span>);</span></span><br><span class="line"><span class="xquery">    &#125;</span><span class="xml">)</span></span><br><span class="line"><span class="xml">    // 使用jq语法</span></span><br><span class="line"><span class="xml">    $('#test_jquery').click(function()</span><span class="xquery">&#123;</span></span><br><span class="line"><span class="xquery">        alert(<span class="string">'jQuery'</span>);</span></span><br><span class="line"><span class="xquery">    &#125;</span><span class="xml">)</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><p>有鼠标事件、键盘事件、其他事件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 要求：获取鼠标当前的一个坐标 --&gt;</span></span><br><span class="line">mouse:<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"mouseMove"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"divMove"</span>&gt;</span></span><br><span class="line">    在这里移动鼠标试试</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 当前网页元素加载完毕之后，响应事件</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// $(document).ready(function()&#123; //document默认是文档，ready默认是加载完</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// &#125;)</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 上面这行的简写</span></span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">'#divMove'</span>).mousemove(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123; <span class="comment">//获取了divMove的鼠标移动的坐标</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">'#mouseMove'</span>).text(<span class="string">'x:'</span>+e.pageX+<span class="string">'Y:'</span>+e.pageY) <span class="comment">//在mouseMove这个span里显示鼠标移动的坐标</span></span></span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="操作DOM事件"><a href="#操作DOM事件" class="headerlink" title="操作DOM事件"></a>操作DOM事件</h2><p>1、节点文本操作</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"test_ul"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"js"</span>&gt;</span>JavaScript<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">name</span>=<span class="string">"python"</span>&gt;</span>Python<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//拿到这个标签的文本，</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">'#test_ul li[name=python]'</span>).text();</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//修改这个标签的文本</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">'#test_ul li[name=python]'</span>).text(<span class="string">'123'</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//修改样式</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">'#test_ul'</span>).html();</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>2、css的操作</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">     $(<span class="string">'#test_ul'</span>).css(<span class="string">"color"</span>,<span class="string">"red"</span>); <span class="comment">//使用键值对来表示属性和属性值</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>3、元素的显示和消失：本质是display：none</p>
<figure class="highlight mel"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'#test_ul'</span>).show();</span><br><span class="line">$(<span class="string">'#test_ul'</span>).<span class="keyword">hide</span>();</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis-简单使用</title>
    <url>/2020/07/02/MyBatis-%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>mybatis早期叫做ibatis，代码在github。<br>mybatis是 MyBatis SQL Mapper Framework for Java (sql映射框架)<br>1)sql mapper: sql映射，可以把数据库表中的一行数据映射为一个java对象。一行数据可以看做是一个java对象。操作这个对象，就相当于操作表中的数据。<br>2)Data Access Objects（DAOs）: 数据访问，对数据库执行增删改查。    <a id="more"></a></p>
<h1 id="mybatis提供的功能"><a href="#mybatis提供的功能" class="headerlink" title="mybatis提供的功能"></a>mybatis提供的功能</h1><ol>
<li>提供了创建Connection，Statement，ResultSet的能力，不用开发人员创建这些对象了。    </li>
<li>提供了执行sql语句的能力，不用你执行sql。    </li>
<li>提供了循环sql，把sql的结果转为java对象，List集合的能力。    </li>
<li>提供了关闭资源的能力，不用你关闭Connection，Statement，ResultSet。    </li>
</ol>
<p>开发人员做的是： 提供sql语句。<br>开发人员提供sql语句—mybatis处理sql—开发人员得到List集合或java对象（表中的数据）。    </p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>mybatis是一个sql映射框架，提供的数据库的操作能力。是增强的JDBC。使用mybatis让开发人员集中精神写sql就可以了，不必关心Connection，Statement，ResultSet的创建，销毁，sql的执行。 </p>
<h1 id="mapper文件"><a href="#mapper文件" class="headerlink" title="mapper文件"></a>mapper文件</h1><p>sql映射文件（sql mapper）： 写sql语句的， mybatis会执行这些sql。<br>配置mapper文件：    </p>
<ol>
<li>指定约束文件<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">PUBLIC <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br></pre></td></tr></table></figure>
约束文件作用：限制，检查在当前文件中出现的标签，属性必须符合mybatis的要求。mybatis-3-mapper.dtd是约束文件的名称，扩展名是dtd的。    </li>
<li>mapper是当前文件的根标签，必须的。</li>
<li>namespace：叫做命名空间，唯一值的，可以是自定义的字符串。<strong>最好使用dao接口的全限定名称</strong>。    </li>
<li>在当前文件中，可以使用特定的标签，表示数据库的特定操作。    <figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml">//<span class="tag">&lt;<span class="name">select</span>&gt;</span>:表示执行查询，select语句</span></span><br><span class="line"><span class="xml">//<span class="tag">&lt;<span class="name">update</span>&gt;</span>:表示更新数据库的操作，就是在<span class="tag">&lt;<span class="name">update</span>&gt;</span>标签中写update sql语句</span></span><br><span class="line"><span class="xml">//<span class="tag">&lt;<span class="name">insert</span>&gt;</span>:表示插入，放的是insert语句</span></span><br><span class="line"><span class="xml">//<span class="tag">&lt;<span class="name">delete</span>&gt;</span>:表示删除，执行的delete语句</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.fubuking.dao.StudentDao"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--</span></span></span><br><span class="line"><span class="xml">       select:表示查询操作。</span></span><br><span class="line"><span class="xml">       id: 你要执行的sql语法的唯一标识，mybatis会使用这个id的值来找到要执行的sql语句</span></span><br><span class="line"><span class="xml">       可以自定义，但是最好使用接口中的方法名称。</span></span><br><span class="line"><span class="xml">       resultType:表示结果类型的，是sql语句执行后得到ResultSet，遍历这个ResultSet得到java对象的类型。</span></span><br><span class="line"><span class="xml">       值写的类型是全限定名称。</span></span><br><span class="line"><span class="xml">    --&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectStudents"</span> <span class="attr">resultType</span>=<span class="string">"com.bjpowernode.domain.Student"</span> &gt;</span></span></span><br><span class="line"><span class="xml">        select id,name,email,age from student order by id</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--插入操作--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertStudent"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        insert into student values(#</span><span class="template-variable">&#123;id&#125;</span><span class="xml">,#</span><span class="template-variable">&#123;name&#125;</span><span class="xml">,#</span><span class="template-variable">&#123;email&#125;</span><span class="xml">,#</span><span class="template-variable">&#123;age&#125;</span><span class="xml">)</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h1 id="主配置文件"><a href="#主配置文件" class="headerlink" title="主配置文件"></a>主配置文件</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--settings：控制mybatis全局行为--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--设置mybatis输出日志--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"logImpl"</span> <span class="attr">value</span>=<span class="string">"STDOUT_LOGGING"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--环境配置： 数据库的连接信息</span></span><br><span class="line"><span class="comment">        default:必须和某个environment的id值一样。</span></span><br><span class="line"><span class="comment">        告诉mybatis使用哪个数据库的连接信息。也就是访问哪个数据库。</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"mydev"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- environment : 一个数据库信息的配置， 环境。</span></span><br><span class="line"><span class="comment">                id:一个唯一值，自定义，表示环境的名称。</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"mydev"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">               transactionManager ：mybatis的事务类型</span></span><br><span class="line"><span class="comment">               type: JDBC(表示使用jdbc中的Connection对象的commit，rollback做事务处理)</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">               dataSource:表示数据源，连接数据库的</span></span><br><span class="line"><span class="comment">               type：表示数据源的类型， POOLED表示使用连接池</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">                   driver, user, username, password 是固定的，不能自定义。</span></span><br><span class="line"><span class="comment">                --&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--数据库的驱动类名--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--连接数据库的url字符串--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/springdb"</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--访问数据库的用户名--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--密码--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--表示线上的数据库，是项目真实使用的库--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"online"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/onlinedb"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"fhwertwr"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- sql mapper(sql映射文件)的位置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--一个mapper标签指定一个文件的位置。</span></span><br><span class="line"><span class="comment">           从类路径开始的路径信息。  target/clasess(类路径)</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/fubuking/dao/StudentDao.xml"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;mapper resource="com/fubukinig/dao/SchoolDao.xml" /&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">   mybatis的主配置文件： 主要定义了数据库的配置信息， sql映射文件的位置。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="传参"><a href="#传参" class="headerlink" title="传参"></a>传参</h1><ol>
<li>一个简单类型的参数<br>简单类型：mybatis把java的基本数据类型和String都叫简单类型。<br>在mapper文件获取简单类型的一个参数的值，使用 #{任意字符}    <figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">接口：public Student  selectStudentById(Integer <span class="built_in">id</span>) </span><br><span class="line">mapper:select <span class="built_in">id</span>,<span class="built_in">name</span>, email,age <span class="keyword">from</span> student <span class="keyword">where</span> <span class="built_in">id</span>=<span class="comment">#&#123;studentId&#125;</span></span><br></pre></td></tr></table></figure></li>
<li>多个参数，使用@Param命名参数    <figure class="highlight julia"><table><tr><td class="code"><pre><span class="line"> 接口 public List&lt;Student&gt; selectMulitParam(<span class="meta">@Param</span>(<span class="string">"myname"</span>) <span class="built_in">String</span> name, <span class="meta">@Param</span>(<span class="string">"myage"</span>) <span class="built_in">Integer</span> age)	</span><br><span class="line">使用  <span class="meta">@Param</span>(<span class="string">"参数名"</span>)  <span class="built_in">String</span> name 	</span><br><span class="line">mapper文件：</span><br><span class="line">select * from student <span class="keyword">where</span> name=<span class="comment">#&#123;myname&#125; or age=#&#123;myage&#125;</span></span><br></pre></td></tr></table></figure></li>
<li>多个参数，使用java对象<br>语法 #{属性名}<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>,<span class="keyword">name</span>, email,age <span class="keyword">from</span> student <span class="keyword">where</span></span><br><span class="line"><span class="keyword">name</span>=<span class="comment">#&#123;paramName&#125; or age=#&#123;paramAge&#125;</span></span><br></pre></td></tr></table></figure>


</li>
</ol>
<h1 id="和-区别"><a href="#和-区别" class="headerlink" title="# 和 $区别"></a># 和 $区别</h1><ol>
<li>#使用 ？在sql语句中做站位的， 使用PreparedStatement执行sql，效率高。    </li>
<li>#能够避免sql注入，更安全。    </li>
<li>$不使用占位符，是字符串连接方式，使用Statement对象执行sql，效率低。    </li>
<li>$有sql注入的风险，缺乏安全性。</li>
<li>$可以替换表名或者列名。</li>
</ol>
]]></content>
      <categories>
        <category>MyBatis</category>
      </categories>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring-IoC</title>
    <url>/2020/07/06/Spring-IoC/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>IoC(Inversion of Control) 即控制反转，是一个理论、概念、思想。它描述的是把对象的创建、赋值、管理工作都交给代码之外的容器实现，也就是对象的创建是由其它外部资源完成。<br><strong>控制：</strong>创建对象，对象的属性赋值，对象之间的关系管理。<br><strong>反转：</strong>把原来开发人员的管理，创建对象的权限转移给代码之外的容器实现。由容器代替开发人员管理对象、创建对象和给属性赋值。 </p>
<a id="more"></a>  
<p><strong>正转：</strong>由开发人员在代码中，使用new构造方法创建对象 开发人员主动管理对象。例如：  </p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 在代码中，创建对象。--正转。</span></span><br><span class="line">        Student student = <span class="keyword">new</span> Student(); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>容器：</strong>是一个服务器软件，一个框架(spring)。  </p>
<h1 id="为什么要使用-IoC"><a href="#为什么要使用-IoC" class="headerlink" title="为什么要使用 IoC ?"></a>为什么要使用 IoC ?</h1><p>目的就是减少对代码的改动，也能实现不同的功能。 实现解耦合。 </p>
<h1 id="IoC的体现"><a href="#IoC的体现" class="headerlink" title="IoC的体现"></a>IoC的体现</h1><p><strong>servlet：</strong>  </p>
<ol>
<li>创建类继承HttpServelt。  </li>
<li>在web.xml 注册servlet，使用 <figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&lt;servlet-<span class="built_in">name</span>&gt;myservlet&lt;/servlet-<span class="built_in">name</span>&gt;</span><br><span class="line">&lt;servelt-<span class="built_in">class</span>&gt;com.fubuking.controller.MyServlet&lt;/servlet-<span class="built_in">class</span>&gt;</span><br></pre></td></tr></table></figure></li>
<li>没有创建Servlet对象，没有 MyServlet myservlet = new MyServlet();  </li>
<li>Servlet是Tomcat服务器给你创建的。Tomcat也称为容器，他作为容器里面存放的有Servlet对象，Listener，Filter对象。  </li>
</ol>
<h1 id="IoC的技术实现"><a href="#IoC的技术实现" class="headerlink" title="IoC的技术实现"></a>IoC的技术实现</h1><p>DI（Dependency Injection）是ioc的技术实现。<br><strong>DI：</strong>依赖注入，只需要在程序中提供要使用的对象名称就可以，至于对象如何在容器中创建，赋值，查找都由容器内部实现。<br>spring是使用的di实现了ioc的功能，spring底层创建对象，使用的是反射机制。<br>spring是一个容器，管理对象，给属性赋值，底层是反射创建对象。</p>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring-使用AspectJ实现AOP</title>
    <url>/2020/07/10/Spring-AspectJ/</url>
    <content><![CDATA[<h1 id="基本步骤"><a href="#基本步骤" class="headerlink" title="基本步骤"></a>基本步骤</h1><ol>
<li>新建maven项目</li>
<li>加入依赖  <ol>
<li>spring依赖</li>
<li>aspectj依赖</li>
</ol>
</li>
<li>创建目标类：接口和他的实现类<br>要做的是给类中的方法增加功能。  </li>
<li>创建切面类：普通类    <a id="more"></a>
<ol>
<li>在类的上面加入 @Aspect  </li>
<li>在类中定义方法，方法就是切面要执行的功能代码  </li>
<li>在方法的上面加入aspectj中的通知注解，例如@Before</li>
<li>指定切入点表达式execution()   </li>
</ol>
</li>
<li>创建spring的配置文件：声明对象，把对象交给容器统一管理  <ol>
<li>声明目标对象</li>
<li>声明切面类对象  </li>
<li>声明aspectj框架中的自动代理生成器标签<br>自动代理生成器：用来完成代理对象的自动创建功能的。<br>注：声明对象可以使用注解或者xml配置文件bean     </li>
</ol>
</li>
<li>创建测试类，从spring容器中获取目标对象（实际就是代理对象）<br>通过代理执行方法，实现aop的功能增强。    </li>
</ol>
<h1 id="execution语法"><a href="#execution语法" class="headerlink" title="execution语法"></a>execution语法</h1><p>execution(访问权限 方法返回值 方法声明(参数) 异常类型)<br><strong>execution(public * *(..))</strong><br>指定切入点为：任意公共方法<br><strong>execution(* set*(..))</strong><br>指定切入点为：任何一个以“set”开始的方法。<br><strong>execution(* com.xyz.service.<em>.</em>(..))</strong><br>指定切入点为：定义在 service 包里的任意类的任意方法。<br><strong>execution(* <em>..service.</em>.*(..))</strong><br>指定所有包下的 serivce 子包下所有类（接口）中所有方法为切入点<br><strong>execution(* com.xyz.service..<em>.</em>(..))</strong><br>指定切入点为：定义在 service 包或者子包里的任意类的任意方法。“..”出现在类名中时，后 面必须跟“*”，表示包、子包下的所有类。 </p>
<h1 id="Aspect"><a href="#Aspect" class="headerlink" title="@Aspect"></a>@Aspect</h1><p>@Aspect是aspectj框架中的注解。<br>作用：表示当前类是切面类。<br>切面类：是用来给业务方法增加功能的类，在这个类中有切面的功能代码。<br>位置：在类定义的上面    </p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">@Aspect</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">MyAspect</span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<h1 id="JoinPoint"><a href="#JoinPoint" class="headerlink" title="JoinPoint"></a>JoinPoint</h1><p>JoinPoint:业务方法，要加入切面功能的业务方法。<br>作用是：可以在通知方法中获取方法执行时的信息，例如方法名称，方法的实参。<br>如果你的切面功能中需要用到方法的信息，就加入JoinPoint。<br>JoinPoint参数的值是由框架赋予，必须是第一个位置的参数。</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">@XXX</span><br><span class="line">public void xxx(JoinPoint jp,XXXX xxxx)&#123;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"方法的签名（定义）="</span>+jp.get<span class="constructor">Signature()</span>);</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"方法的名称="</span>+jp.get<span class="constructor">Signature()</span>.get<span class="constructor">Name()</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Before"><a href="#Before" class="headerlink" title="@Before:"></a>@Before:</h1><p>方法的定义要求：<br>1.公共方法 public<br>2.方法没有返回值<br>3.方法名称自定义<br>4.方法可以有参数，也可以没有参数<br>如果有参数，参数不是自定义的，有几个参数类型可以使用</p>
<p>属性：value，是切入点表达式，表示切面的功能执行的位置。<br>位置：在方法的上面。<br>特点：<br>1.在目标方法之前先执行的。<br>2.不会改变目标方法的执行结果。<br>3.不会影响目标方法的执行。</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Before</span>(value = <span class="string">"execution(xxx)"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">myBefore</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//就是你切面要执行的功能代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="AfterReturning"><a href="#AfterReturning" class="headerlink" title="@AfterReturning"></a>@AfterReturning</h1><p>@AfterReturning:后置通知<br>后置通知定义方法，方法是实现切面功能的。<br>方法的定义要求：<br>1.公共方法 public<br>2.方法没有返回值<br>3.方法名称自定义<br>4.方法有参数的,推荐是Object,参数名自定义  </p>
<p>属性：<br>1.value 切入点表达式。<br>2.returning 自定义的变量，表示目标方法的返回值。<br>自定义变量名必须和通知方法的形参名一样。<br>位置：在方法定义的上面。<br>特点：<br>1.在目标方法之后执行的。<br>2.能够获取到目标方法的返回值，可以根据这个返回值做不同的处理功能。<br>3.可以修改这个返回值。</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">@<span class="constructor">AfterReturning(<span class="params">value</span> = <span class="string">"execution(XXX)"</span> <span class="params">returning</span> = <span class="string">"res"</span>)</span>&#123;</span><br><span class="line">public void my<span class="constructor">AfterReturing(JoinPoint <span class="params">jp</span> , Object <span class="params">res</span> )</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Around"><a href="#Around" class="headerlink" title="@Around"></a>@Around</h1><p>@Around: 环绕通知<br>环绕通知方法的定义格式<br>1.public<br>2.必须有一个返回值，推荐使用Object<br>3.方法名称自定义<br>4.方法有参数，固定的参数 ProceedingJoinPoint  </p>
<p>属性：value 切入点表达式<br>位置：在方法的定义上面<br>特点：<br>1.它是功能最强的通知。<br>2.在目标方法的前和后都能增强功能。<br>3.控制目标方法是否被调用执行。<br>4.修改原来的目标方法的执行结果。 影响最后的调用结果。<br>环绕通知，等同于jdk动态代理的，InvocationHandler接口。<br>参数：ProceedingJoinPoint 就等同于Method。<br>作用：执行目标方法。<br>返回值：就是目标方法的执行结果，可以被修改。<br>环绕通知：经常做事务，在目标方法之前开启事务，执行目标方法，在目标方法之后提交事务。</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">@<span class="constructor">Around(<span class="params">value</span> = <span class="string">"execution()"</span>)</span></span><br><span class="line">public Object my<span class="constructor">Around(ProceedingJoinPoint <span class="params">pjp</span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<h1 id="AfterThrowing"><a href="#AfterThrowing" class="headerlink" title="@AfterThrowing"></a>@AfterThrowing</h1><p>@AfterThrowing:异常通知<br>异常通知方法的定义格式<br>1.public<br>2.没有返回值<br>3.方法名称自定义<br>4.方法有个一个Exception，如果还有是JoinPoint  </p>
<p>属性：<br>1.value 切入点表达式<br>2.throwinng 自定义的变量，表示目标方法抛出的异常对象<br>变量名必须和方法的参数名一样<br>特点：<br>1.在目标方法抛出异常时执行的。<br>2.可以做异常的监控程序，监控目标方法执行时是不是有异常。<br>如果有异常，可以发送邮件，短信进行通知。</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">//执行就是：</span></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">SomeServiceImpl</span>.</span></span><span class="keyword">do</span><span class="constructor">Second(..)</span></span><br><span class="line">&#125;catch(Exception e)&#123;</span><br><span class="line">my<span class="constructor">AfterThrowing(<span class="params">e</span>)</span>;</span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">@<span class="constructor">AfterThrowing(<span class="params">value</span> = <span class="string">"execution()"</span>,<span class="params">throwing</span> = <span class="string">"ex"</span>)</span></span><br><span class="line">public void my<span class="constructor">AfterThrowing(Exception <span class="params">ex</span>)</span>&#123;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"异常通知："</span>+ex.get<span class="constructor">Message()</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="After"><a href="#After" class="headerlink" title="@After"></a>@After</h1><p>@After :最终通属性： value 切入点表达式知<br>最终通知方法的定义格式<br>1.public<br>2.没有返回值<br>3.方法名称自定义<br>4.方法没有参数，如果还有是JoinPoint    </p>
<p>属性：value 切入点表达式<br>位置： 在方法的上面<br>特点：<br>1.总是会执行<br>2.在目标方法之后执行的</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@After(<span class="keyword">value</span> = <span class="string">"execution()"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myAfter</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">"执行最终通知，总是会被执行的代码"</span>);</span><br><span class="line"><span class="comment">//一般做资源清除工作的。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Pointcut"><a href="#Pointcut" class="headerlink" title="@Pointcut"></a>@Pointcut</h1><p>@Pointcut: 定义和管理切入点， 如果你的项目中有多个切入点表达式是重复的，可以复用的。<br>属性：value 切入点表达式<br>位置：在自定义的方法上面<br>特点：当使用@Pointcut定义在一个方法的上面 ，此时这个方法的名称就是切入点表达式的别名。<br>其它的通知中，value属性就可以使用这个方法名称，代替切入点表达式了。</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Pointcut</span>(value = <span class="string">"execution()"</span>)</span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">mypt</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//无需代码，</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>SSM-简单整合</title>
    <url>/2020/07/19/SSM-%E7%AE%80%E5%8D%95%E6%95%B4%E5%90%88/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>SSM: SpringMVC + Spring + MyBatis<br>SpringMVC: 视图层，界面层，负责接收请求，显示处理结果的。<br>Spring: 业务层，管理service，dao，工具类对象的。<br>MyBatis：持久层，访问数据库的。        </p>
<p>用户发起请求–&gt;SpringMVC接收–&gt;Spring中的Service对象–&gt;MyBatis处理数据        </p>
<a id="more"></a>
<p>SSM整合中的容器：</p>
<ol>
<li>第一个容器SpringMVC容器，管理Controller控制器对象的。    </li>
<li>第二个容器Spring容器，管理Service，Dao,工具类对象的。</li>
</ol>
<p>我们要做的是把使用的对象交给合适的容器创建，管理。把Controller还有web开发的相关对象交给springmvc容器，这些web用的对象写在springmvc配置文件中。<br>service，dao对象定义在spring的配置文件中，让spring管理这些对象。<br>springmvc容器和spring容器是有关系的，关系已经确定好了。<br>springmvc容器是spring容器的子容器，类似java中的继承。子可以访问父的内容。<br>在子容器中的Controller可以访问父容器中的Service对象，就可以实现controller使用service对象。        </p>
<h1 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h1><ol>
<li>新建maven web项目        </li>
<li>加入依赖springmvc，spring，mybatis三个框架的依赖，jackson依赖，mysql驱动，druid连接池，jsp，servlet依赖。        <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--servlet依赖--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- jsp依赖 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1-b03<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span><span class="comment">&lt;!--所在的目录--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">includes</span>&gt;</span><span class="comment">&lt;!--包括目录下的.properties,.xml 文件都会扫描到--&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>写web.xml    <ol>
<li>注册DispatcherServlet，目的：    <ol>
<li>创建springmvc容器对象，才能创建Controller类对象。</li>
<li>创建Servlet，才能接受用户的请求。    </li>
</ol>
</li>
<li>注册spring的监听器ContextLoaderListener，目的：<ol>
<li>创建spring的容器对象，才能创建service，dao等对象。</li>
</ol>
</li>
<li>注册字符集过滤器，解决post请求乱码的问题</li>
</ol>
</li>
<li>创建包，Controller包，service ，dao，实体类包    </li>
<li>写springmvc，spring，mybatis的配置文件<br>springmvc配置文件：<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--springmvc配置文件， 声明controller和其它web相关的对象--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.bjpowernode.controller"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">     1. 响应ajax请求，返回json</span></span><br><span class="line"><span class="comment">     2. 解决静态资源访问问题</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br></pre></td></tr></table></figure>
spring配置文件:<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!--spring配置文件： 声明service，dao，工具类等对象--&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:conf/jdbc.properties"</span> /&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">   <span class="comment">&lt;!--声明数据源，连接数据库--&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span></span></span></span><br><span class="line"><span class="xml">         init-method="init" destroy-method="close"&gt;</span></span><br><span class="line"><span class="xml">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;jdbc.url&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;jdbc.username&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;jdbc.password&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">   <span class="comment">&lt;!--SqlSessionFactoryBean创建SqlSessionFactory--&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span></span><br><span class="line"><span class="xml">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span>  <span class="attr">value</span>=<span class="string">"classpath:conf/mybatis.xml"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br><span class="line"><span class="xml">   </span></span><br><span class="line"><span class="xml">   <span class="comment">&lt;!--声明mybatis的扫描器，创建dao对象--&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span></span><br><span class="line"><span class="xml">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactoryBeanName"</span> <span class="attr">value</span>=<span class="string">"sqlSessionFactory"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.bjpowernode.dao"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">   <span class="comment">&lt;!--声明service的注解@Service所在的包名位置--&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.bjpowernode.service"</span> /&gt;</span></span></span><br></pre></td></tr></table></figure>
mybatis主配置文件:<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--settings：控制mybatis全局行为--&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- &lt;settings&gt;</span></span><br><span class="line"><span class="comment">        &amp;lt;!&amp;ndash;设置mybatis输出日志&amp;ndash;&amp;gt;</span></span><br><span class="line"><span class="comment">        &lt;setting name="logImpl" value="STDOUT_LOGGING"/&gt;</span></span><br><span class="line"><span class="comment">    &lt;/settings&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置别名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--name:实体类所在的包名(不是实体类的包名也可以)--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.bjpowernode.domain"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- sql mapper(sql映射文件)的位置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">          name：是包名， 这个包中的所有mapper.xml一次都能加载</span></span><br><span class="line"><span class="comment">          使用package的要求：</span></span><br><span class="line"><span class="comment">           1. mapper文件名称和dao接口名必须完全一样，包括大小写</span></span><br><span class="line"><span class="comment">           2. mapper文件和dao接口必须在同一目录</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.bjpowernode.dao"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>写代码，dao接口和mapper文件，service和实现类，controller， 实体类。<br>Controller:<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(<span class="meta-string">"/student"</span>)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> StudentService service;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注册学生</span></span><br><span class="line">    <span class="meta">@RequestMapping(<span class="meta-string">"/addStudent.do"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView addStudent(Student student)&#123;</span><br><span class="line">        ModelAndView mv = new ModelAndView();</span><br><span class="line">        String tips = <span class="string">"注册失败"</span>;</span><br><span class="line">        <span class="comment">//调用service处理student</span></span><br><span class="line">        int nums = service.addStudent(student);</span><br><span class="line">        <span class="keyword">if</span>( nums &gt; <span class="number">0</span> )&#123;</span><br><span class="line">            <span class="comment">//注册成功</span></span><br><span class="line">            tips = <span class="string">"学生【"</span> + student.getName() + <span class="string">"】注册成功"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//添加数据</span></span><br><span class="line">        mv.addObject(<span class="string">"tips"</span>,tips);</span><br><span class="line">        <span class="comment">//指定结果页面</span></span><br><span class="line">        mv.setViewName(<span class="string">"result"</span>);</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理查询，响应ajax</span></span><br><span class="line">    <span class="meta">@RequestMapping(<span class="meta-string">"/queryStudent.do"</span>)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Student&gt; queryStudent()&#123;</span><br><span class="line">        <span class="comment">//参数检查， 简单的数据处理</span></span><br><span class="line">        List&lt;Student&gt; students = service.findStudents();</span><br><span class="line">        <span class="keyword">return</span> students;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
Service:<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">public<span class="built_in"> interface </span>StudentService &#123;</span><br><span class="line">    int addStudent(Student student);</span><br><span class="line">    List&lt;Student&gt; findStudents();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentServiceImpl</span> <span class="keyword">implements</span> <span class="title">StudentService</span> </span>&#123;</span><br><span class="line">    <span class="comment">//引用类型自动注入@Autowired, @Resource</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> StudentDao studentDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addStudent</span><span class="params">(Student student)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> nums = studentDao.insertStudent(student);</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">findStudents</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studentDao.selectStudents();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
Dao:<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">&lt;mapper namespace="com.bjpowernode.dao.StudentDao"&gt;</span><br><span class="line">    &lt;<span class="keyword">select</span> id="selectStudents" resultType="Student"&gt;</span><br><span class="line">        <span class="keyword">select</span> id,<span class="type">name</span>,age <span class="keyword">from</span> student <span class="keyword">order</span> <span class="keyword">by</span> id <span class="keyword">desc</span></span><br><span class="line">    &lt;/<span class="keyword">select</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;<span class="keyword">insert</span> id="insertStudent"&gt;</span><br><span class="line">        <span class="keyword">insert</span> <span class="keyword">into</span> student(<span class="type">name</span>,age) <span class="keyword">values</span>(#&#123;<span class="type">name</span>&#125;,#&#123;age&#125;)</span><br><span class="line">    &lt;/<span class="keyword">insert</span>&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">public<span class="built_in"> interface </span>StudentDao &#123;</span><br><span class="line">    int insertStudent(Student student);</span><br><span class="line">    List&lt;Student&gt; selectStudents();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>写jsp页面<figure class="highlight vbscript-html"><table><tr><td class="code"><pre><span class="line"><span class="xml"> </span><span class="vbscript">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span></span><br><span class="line"><span class="vbscript">&lt;%</span></span><br><span class="line"><span class="vbscript">    <span class="built_in">String</span> basePath = <span class="built_in">request</span>.getScheme() + <span class="string">"://"</span> +</span></span><br><span class="line"><span class="vbscript">            <span class="built_in">request</span>.getServerName() + <span class="string">":"</span> + <span class="built_in">request</span>.getServerPort() +</span></span><br><span class="line"><span class="vbscript">            <span class="built_in">request</span>.getContextPath() + <span class="string">"/"</span>;</span></span><br><span class="line"><span class="vbscript">%&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>功能入口<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">"</span></span></span><span class="vbscript">&lt;%=basePath%&gt;</span><span class="xml"><span class="tag"><span class="string">"</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>SSM整合的例子<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/ssm.jpg"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"addStudent.jsp"</span>&gt;</span> 注册学生<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"listStudent.jsp"</span>&gt;</span>浏览学生<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<figure class="highlight vbscript-html"><table><tr><td class="code"><pre><span class="line"><span class="xml"> </span><span class="vbscript">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span></span><br><span class="line"><span class="vbscript">&lt;%</span></span><br><span class="line"><span class="vbscript">    <span class="built_in">String</span> basePath = <span class="built_in">request</span>.getScheme() + <span class="string">"://"</span> +</span></span><br><span class="line"><span class="vbscript">            <span class="built_in">request</span>.getServerName() + <span class="string">":"</span> + <span class="built_in">request</span>.getServerPort() +</span></span><br><span class="line"><span class="vbscript">            <span class="built_in">request</span>.getContextPath() + <span class="string">"/"</span>;</span></span><br><span class="line"><span class="vbscript">%&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>注册学生<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">"</span></span></span><span class="vbscript">&lt;%=basePath%&gt;</span><span class="xml"><span class="tag"><span class="string">"</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"student/addStudent.do"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">table</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>姓名：<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>年龄：<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"age"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"注册"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>SSM</category>
      </categories>
      <tags>
        <tag>SSM</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring-AOP</title>
    <url>/2020/07/09/Spring-AOP/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>AOP（Aspect Orient Programming）面向切面编程基于动态代理的，可以使用jdk，cglib两种代理方式。Aop就是动态代理的规范化，把动态代理的实现步骤，方式都定义好了，让开发人员用一种统一的方式，使用动态代理。<br>Aspect:切面，给你的目标类增加的功能，就是切面。例如日志事务、都是切面。切面的特点：一般都是非业务方法，独立使用的。<br>Orient：面向<br>Programming：编程<br>oop: 面向对象编程  </p>
<a id="more"></a>
<h1 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h1><p><strong>作用：</strong>  </p>
<ol>
<li>在目标类源代码不改变的情况下，增加功能。  </li>
<li>减少代码的重复  </li>
<li>专注业务逻辑代码  </li>
<li>解耦合，让你的业务功能和日志，事务非业务功能分离。  </li>
</ol>
<p><strong>实现方式：</strong><br>jdk动态代理，使用jdk中的Proxy，Method，invocationhandler创建代理对象。jdk动态代理要求目标类必须实现接口。<br>cglib动态代理：第三方的工具库，创建代理对象，原理是继承。通过继承目标类，创建子类。子类就是代理对象。要求目标类不能是final的， 方法也不能是final的。  </p>
<h1 id="怎么理解面向切面编程"><a href="#怎么理解面向切面编程" class="headerlink" title="怎么理解面向切面编程"></a>怎么理解面向切面编程</h1><ol>
<li>需要在分析项目功能时，找出切面。  </li>
<li>合理的安排切面的执行时间（在目标方法前，还是目标方法后）。  </li>
<li>合理的安排切面执行的位置，在哪个类，哪个方法增加增强功能。  </li>
</ol>
<h1 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h1><p>Aspect:切面，表示增强的功能，就是完成某个一个功能的代码。非业务功能，常见的切面功能有日志，事务，统计信息，参数检查，权限验证。  JoinPoint:连接点，连接业务方法和切面的位置。就某类中的业务方法。<br>Pointcut : 切入点，指多个连接点方法的集合。多个方法。<br>目标对象：给哪个类的方法增加功能，这个类就是目标对象。<br>Advice:通知，通知表示切面功能执行的时间。  </p>
<h1 id="切面的三个关键的要素"><a href="#切面的三个关键的要素" class="headerlink" title="切面的三个关键的要素"></a>切面的三个关键的要素</h1><ol>
<li>切面的功能代码，切面干什么。  </li>
<li>切面的执行位置，使用Pointcut表示切面执行的位置。  </li>
<li>切面的执行时间，使用Advice表示时间，在目标方法之前，还是目标方法之后。   </li>
</ol>
<h1 id="AOP的实现"><a href="#AOP的实现" class="headerlink" title="AOP的实现"></a>AOP的实现</h1><p>aop的技术实现框架：  </p>
<ol>
<li>spring：spring在内部实现了aop规范，能做aop的工作。spring主要在事务处理时使用aop。项目开发中很少使用spring的aop实现。 因为spring的aop比较笨重。  </li>
<li>aspectJ: 一个开源的专门做aop的框架。spring框架中集成了aspectj框架，通过spring就能使用aspectj的功能。aspectJ框架实现aop有两种方式：  <ol>
<li>使用xml的配置文件 ： 配置全局事务</li>
<li>使用注解，我们在项目中要做aop功能，一般都使用注解， aspectj有5个注解。</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring-事务</title>
    <url>/2020/07/13/Spring-%E4%BA%8B%E5%8A%A1/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><ol>
<li>什么是事务？<br>事务是指一组sql语句的集合，集合中有多条sql语句，可能是insert ， update，select，delete，我们希望这些多个sql语句都能成功，或者都失败，这些sql语句的执行是一致的，作为一个整体执行。  </li>
<li>在什么时候想到使用事务？<br>当我的操作，涉及得到多个表，或者是多个sql语句的insert，update，delete。需要保证这些语句都是成功才能完成我的功能，或者都失败，保证操作是符合要求的。  </li>
<li>在java代码中写程序，控制事务，此时事务应该放在那里呢？    <a id="more"></a><br>service类的业务方法上，因为业务方法会调用多个dao方法，执行多个sql语句。      </li>
<li>JDBC访问数据库，mybatis访问数据库怎么处理事务？<br>jdbc访问数据库，处理事务:Connection conn;conn.commit();conn.rollback();<br>mybatis访问数据库，处理事务:SqlSession.commit();SqlSession.rollback();<br>hibernate访问数据库，处理事务:Session.commit();Session.rollback();    </li>
<li>4问题中事务的处理方式，有什么不足？<br>1)不同的数据库访问技术，处理事务的对象，方法不同，需要了解不同数据库访问技术使用事务的原理。<br>2)掌握多种数据库中事务的处理逻辑。什么时候提交事务，什么时候回顾事务。<br>3)处理事务的多种方法。<br>总结：就是多种数据库的访问技术，有不同的事务处理的机制，对象，方法。    </li>
<li>怎么解决不足？<br>spring提供一种处理事务的统一模型，能使用统一步骤，方式完成多种不同数据库访问技术的事务处理。</li>
<li>处理事务，需要怎么做，做什么？<br>spring处理事务的模型，使用的步骤都是固定的。把事务使用的信息提供给spring就可以了。      </li>
</ol>
<h1 id="spring框架中提供的事务处理方案"><a href="#spring框架中提供的事务处理方案" class="headerlink" title="spring框架中提供的事务处理方案"></a>spring框架中提供的事务处理方案</h1><ol>
<li>适合中小项目使用的，注解方案。<br>spring框架自己用aop实现给业务方法增加事务的功能， 使用@Transactional注解增加事务。<br>@Transactional注解是spring框架自己注解，放在public方法的上面，表示当前方法具有事务。<br>可以给注解的属性赋值，表示具体的隔离级别，传播行为，异常信息等等。<br>使用@Transactional的步骤：   <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--使用spring的事务处理--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--1. 声明事务管理器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--连接的数据库， 指定数据源--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"myDataSource"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--2. 开启事务注解驱动，告诉spring使用注解管理事务，创建代理对象</span></span><br><span class="line"><span class="comment">           transaction-manager:事务管理器对象的id</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--3. 在你的方法的上面加入@Trancational--&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>适合大型项目，有很多的类，方法，需要大量的配置事务，使用aspectj框架功能，在spring配置文件中声明类，方法需要的事务。这种方式业务方法和事务配置完全分离。<br>实现步骤： 都是在xml配置文件中实现。<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--声明式事务处理：和源代码完全分离的--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--1.声明事务管理器对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"myDataSource"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--2.声明业务方法它的事务属性（隔离级别，传播行为，超时时间）</span></span><br><span class="line"><span class="comment">          id:自定义名称，表示 &lt;tx:advice&gt; 和 &lt;/tx:advice&gt;之间的配置内容的</span></span><br><span class="line"><span class="comment">          transaction-manager:事务管理器对象的id</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"myAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--tx:attributes：配置事务属性--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--tx:method：给具体的方法配置事务属性，method可以有多个，分别给不同的方法设置事务属性</span></span><br><span class="line"><span class="comment">                name:方法名称，1）完整的方法名称，不带有包和类。</span></span><br><span class="line"><span class="comment">                              2）方法可以使用通配符,* 表示任意字符</span></span><br><span class="line"><span class="comment">                propagation：传播行为，枚举值</span></span><br><span class="line"><span class="comment">                isolation：隔离级别</span></span><br><span class="line"><span class="comment">                rollback-for：你指定的异常类名，全限定类名。 发生异常一定回滚</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"buy"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">isolation</span>=<span class="string">"DEFAULT"</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">rollback-for</span>=<span class="string">"java.lang.NullPointerException,com.bjpowernode.excep.NotEnoughException"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--使用通配符，指定很多的方法--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"add*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRES_NEW"</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--指定修改方法--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"modify*"</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--删除方法--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"remove*"</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--查询方法，query，search，find--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">propagation</span>=<span class="string">"SUPPORTS"</span> <span class="attr">read-only</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置aop--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置切入点表达式：指定哪些包中类，要使用事务</span></span><br><span class="line"><span class="comment">            id:切入点表达式的名称，唯一值</span></span><br><span class="line"><span class="comment">            expression：切入点表达式，指定哪些类要使用事务，aspectj会创建代理对象</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"servicePt"</span> <span class="attr">expression</span>=<span class="string">"execution(* *..service..*.*(..))"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--配置增强器：关联adivce和pointcut</span></span><br><span class="line"><span class="comment">           advice-ref:通知，上面tx:advice哪里的配置</span></span><br><span class="line"><span class="comment">           pointcut-ref：切入点表达式的id</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"myAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"servicePt"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring-通过注解创建对象和赋值</title>
    <url>/2020/07/09/Spring-%E9%80%9A%E8%BF%87%E6%B3%A8%E8%A7%A3%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E5%92%8C%E8%B5%8B%E5%80%BC/</url>
    <content><![CDATA[<h1 id="实现步骤-创建对象"><a href="#实现步骤-创建对象" class="headerlink" title="实现步骤/创建对象"></a>实现步骤/创建对象</h1><ol>
<li><p>加入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>创建类，在类中加入注解</p>
<a id="more"></a>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用value属性，指定对象名称</span></span><br><span class="line"><span class="comment">//@Component(value = "myStudent")</span></span><br><span class="line"><span class="comment">//不指定对象名称，由spring提供默认名称: 类名的首字母小写</span></span><br><span class="line"><span class="comment">//@Component</span></span><br><span class="line"><span class="comment">//省略value</span></span><br><span class="line"><span class="meta">@Component(<span class="meta-string">"myStudent"</span>)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>@Component: 创建对象的，等同于bean标签的功能属性：value 就是对象的名称，也就是bean的id值，value的值是唯一的，创建的对象在整个spring容器中就一个。<br>@Component(value = “myStudent”)等同于</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&lt;bean <span class="built_in">id</span>=<span class="string">"myStudent"</span> <span class="built_in">class</span>=<span class="string">"xxx.xxx.xxx.Student"</span> /&gt;</span><br></pre></td></tr></table></figure>
<p>spring中和@Component功能一致，创建对象的注解还有:<br>@Repository（用在持久层类的上面）: 放在dao的实现类上面，表示创建dao对象，dao对象是能访问数据库的。<br>@Service(用在业务层类的上面)：放在service的实现类上面，创建service对象，service对象是做业务处理，可以有事务等功能的。<br>@Controller(用在控制器的上面)：放在控制器（处理器）类的上面，创建控制器对象的，控制器对象，能够接受用户提交的参数，显示请求的处理结果。<br>以上三个注解的使用语法和@Component一样的。都能创建对象，但是这三个注解还有额外的功能。<br>@Repository，@Service，@Controller是给项目的对象分层的。</p>
</li>
<li><p>创建spring的配置文件声明组件扫描器的标签，指名注解在你的项目的中的位置。</p>
<figure class="highlight vhdl"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">context</span>:<span class="keyword">component</span>-scan base-<span class="keyword">package</span>=<span class="string">"xxx.xxx.xxx"</span>/&gt;</span><br></pre></td></tr></table></figure>
<p>声明组件扫描器(component-scan),组件就是java对象。<br>base-package：指定注解在你的项目中的包名。<br>component-scan工作方式： spring会扫描遍历base-package指定的包，把包中和子包中的所有类，找到类中的注解，按照注解的功能创建对象，或给属性赋值。   </p>
</li>
<li><p>使用注解创建对象，创建容器ApplicationContext  </p>
</li>
</ol>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">String<span class="built_in"> config </span>= <span class="string">"applicationContext.xml"</span>;</span><br><span class="line">ApplicationContext ac = new ClassPathXmlApplicationContext(config);</span><br><span class="line">Student stu = (Student) ac.getBean(<span class="string">"myStudent"</span>);</span><br></pre></td></tr></table></figure>
<h1 id="属性赋值"><a href="#属性赋值" class="headerlink" title="属性赋值"></a>属性赋值</h1><ol>
<li>@Value: 简单类型的属性赋值<br>属性：value是String类型的，表示简单类型的属性值<br>位置: 1)在属性定义的上面，无需set方法，推荐使用。<br>2)在set方法的上面<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(<span class="meta-string">"XXX"</span> )</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br></pre></td></tr></table></figure></li>
<li>引用类型的属性赋值<br>@Autowired: spring框架提供的注解，实现引用类型的赋值。<br>spring中通过注解给引用类型赋值，使用的是自动注入原理，支持byName, byType<br>@Autowired:默认使用的是byType自动注入。<br>位置：1）在属性定义的上面，无需set方法，推荐使用<br>2）在set方法的上面  <figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> School school;</span><br></pre></td></tr></table></figure>
如果要使用byName方式，需要做的是：<br>1)在属性上面加入@Autowired<br>2)在属性上面加入@Qualifier(value=”bean的id”)：表示使用指定名称的bean完成赋值。  <figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">//byName自动注入</span></span><br><span class="line"><span class="variable">@Autowired</span></span><br><span class="line"><span class="variable">@Qualifier</span>(<span class="string">"mySchool"</span>)</span><br><span class="line">private School school;</span><br></pre></td></tr></table></figure>
@Resource: 来自jdk中的注解，spring框架提供了对这个注解的功能支持，可以使用它给引用类型赋值<br>使用的也是自动注入原理，支持byName， byType .默认是byName<br>位置: 1)在属性定义的上面，无需set方法，推荐使用。<br>2)在set方法的上面  <figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="comment">//默认是byName： 先使用byName自动注入，如果byName赋值失败，再使用byType</span></span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> School school;</span><br></pre></td></tr></table></figure>
@Resource只使用byName方式，需要增加一个属性 name<br>name的值是bean的id（名称）  <figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//只使用byName</span></span><br><span class="line"><span class="meta">@Resource(name = <span class="meta-string">"mySchool"</span>)</span></span><br><span class="line"><span class="keyword">private</span> School school;</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring-拦截器</title>
    <url>/2020/07/19/Spring-%E6%8B%A6%E6%88%AA%E5%99%A8/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><ol>
<li>拦截器是springmvc中的一种对象，需要实现HandlerInterceptor接口。</li>
<li>拦截器和过滤器类似，功能方向侧重点不同。 过滤器是用来过滤器请求参数，设置编码字符集等工作。拦截器是拦截用户的请求，对请求做判断处理的。</li>
<li>拦截器是全局的，可以对多个Controller做拦截。一个项目中可以有0个或多个拦截器， 他们在一起拦截用户的请求。<br>拦截器常用在：用户登录处理，权限检查， 记录日志。    <a id="more"></a>

</li>
</ol>
<h1 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h1><ol>
<li>创建一个普通类，作为拦截器使用<ol>
<li>实现HandlerInterceptor接口</li>
<li>实现接口中的三个方法    </li>
</ol>
</li>
<li>在springmvc配置文件中，声明拦截器，让框架知道拦截器的存在。<ol>
<li>组件扫描器，扫描@Controller注解</li>
<li>声明拦截器，并指定拦截的请求uri地址</li>
</ol>
</li>
</ol>
<h1 id="preHandle"><a href="#preHandle" class="headerlink" title="preHandle"></a>preHandle</h1><p>preHandle叫做预处理方法。是整个项目的入口，门户。当preHandle返回true 请求可以被处理。preHandle返回false，请求到此方法就截止。<br>参数： Object handler，被拦截的控制器对象<br>返回值boolean:<br>true：请求是通过了拦截器的验证，可以执行处理器方法。<br>false：请求没有通过拦截器的验证，请求到达拦截器就截止了。请求没有被处理。<br>特点：<br>1.方法在控制器方法（MyController的doSome）之前先执行的。 用户的请求首先到达此方法。<br>2.在这个方法中可以获取请求的信息， 验证请求是否符合要求。可以验证用户是否登录， 验证用户是否有权限访问某个连接地址(url)。 如果验证失败，可以截断请求，请求不能被处理。如果验证成功，可以放行请求，此时控制器方法才能执行。    </p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="comment">//拦截器类：拦截用户的请求。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object <span class="keyword">handler</span>)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        btime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"拦截器的MyInterceptor的preHandle()"</span>);</span><br><span class="line">        <span class="comment">//计算的业务逻辑，根据计算结果，返回true或者false</span></span><br><span class="line">        <span class="comment">//给浏览器一个返回结果</span></span><br><span class="line">        <span class="comment">//request.getRequestDispatcher("/tips.jsp").forward(request,response);</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="postHandle"><a href="#postHandle" class="headerlink" title="postHandle"></a>postHandle</h1><p>postHandle:后处理方法。<br>参数：Object handle，被拦截的处理器对象MyController。<br>ModelAndView mv，处理器方法的返回值。<br>特点：<br>1.在处理器方法之后执行(MyController.doSome())<br>2.能够获取到处理器方法的返回值ModelAndView,可以修改ModelAndView中的数据和视图，可以影响到最后的执行结果。<br>3.主要是对原来的执行结果做二次修正。    </p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> postHandle(HttpServletRequest request,</span><br><span class="line">                           HttpServletResponse response,</span><br><span class="line">                           Object <span class="keyword">handler</span>, ModelAndView mv) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">"拦截器的MyInterceptor的postHandle()"</span>);</span><br><span class="line">        <span class="comment">//对原来的doSome执行结果，需要调整。</span></span><br><span class="line">        <span class="keyword">if</span>( mv != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//修改数据</span></span><br><span class="line">            mv.addObject(<span class="string">"mydate"</span>,<span class="keyword">new</span> Date());</span><br><span class="line">            <span class="comment">//修改视图</span></span><br><span class="line">            mv.setViewName(<span class="string">"other"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h1 id="afterCompletion"><a href="#afterCompletion" class="headerlink" title="afterCompletion"></a>afterCompletion</h1><p>afterCompletion:最后执行的方法<br>参数: Object handler，被拦截器的处理器对象<br>Exception ex，程序中发生的异常<br>特点:<br>1.在请求处理完成后执行。框架中规定是当你的视图处理完成后，对视图执行了forward。就认为请求处理完成。<br>2.一般做资源回收工作，程序请求过程中创建了一些对象，在这里可以删除，把占用的内存回收。    </p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> afterCompletion(HttpServletRequest request, HttpServletResponse response,</span><br><span class="line">                                Object <span class="keyword">handler</span>, Exception ex) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">"拦截器的MyInterceptor的afterCompletion()"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> etime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"计算从preHandle到请求处理完成的时间："</span>+(etime - btime ));</span><br><span class="line">    &#125;	</span><br><span class="line">   <span class="comment">// 执行顺序：</span></span><br><span class="line">   <span class="comment">// 拦截器的MyInterceptor的preHandle()</span></span><br><span class="line">   <span class="comment">// =====执行MyController中的doSome方法=====</span></span><br><span class="line">   <span class="comment">// 拦截器的MyInterceptor的postHandle()</span></span><br><span class="line">   <span class="comment">// 拦截器的MyInterceptor的afterCompletion()</span></span><br></pre></td></tr></table></figure>
<h1 id="多个拦截器"><a href="#多个拦截器" class="headerlink" title="多个拦截器"></a>多个拦截器</h1><ol>
<li>第一个拦截器preHandle=true , 第二个拦截器preHandle=true<br>11111-拦截器的MyInterceptor的preHandle()<br>22222-拦截器的MyInterceptor的preHandle()<br>=====执行MyController中的doSome方法=====<br>22222-拦截器的MyInterceptor的postHandle()<br>11111-拦截器的MyInterceptor的postHandle()<br>22222-拦截器的MyInterceptor的afterCompletion()<br>11111-拦截器的MyInterceptor的afterCompletion()    </li>
<li>第一个拦截器preHandle=true , 第二个拦截器preHandle=false<br>11111-拦截器的MyInterceptor的preHandle()<br>22222-拦截器的MyInterceptor的preHandle()<br>11111-拦截器的MyInterceptor的afterCompletion()        </li>
<li>第一个拦截器preHandle=false , 第二个拦截器preHandle=true|false<br>11111-拦截器的MyInterceptor的preHandle()        </li>
</ol>
<p>拦截器 1————-拦截器 2———-处理器<br>preHandle() –&gt;    preHandle() –&gt;处理器方法<br>postHandle() &lt;–postHandle() &lt;–处理器方法</p>
<h1 id="拦截器和过滤器的区别"><a href="#拦截器和过滤器的区别" class="headerlink" title="拦截器和过滤器的区别"></a>拦截器和过滤器的区别</h1><ol>
<li>过滤器是servlet中的对象，拦截器是框架中的对象</li>
<li>过滤器实现Filter接口的对象，拦截器是实现HandlerInterceptor</li>
<li>过滤器是用来设置request，response的参数，属性的，侧重对数据过滤的。拦截器是用来验证请求的，能截断请求。    </li>
<li>过滤器是在拦截器之前先执行的。</li>
<li>过滤器是tomcat服务器创建的对象，拦截器是springmvc容器中创建的对象。</li>
<li>过滤器是一个执行时间点。 拦截器有三个执行时间点。</li>
<li>过滤器可以处理jsp，js，html等等，拦截器是侧重拦截对Controller的对象。 如果你的请求不能被DispatcherServlet接收， 这个请求不会执行拦截器内容。    </li>
<li>拦截器拦截普通类方法执行，过滤器过滤servlet请求响应。</li>
</ol>
]]></content>
      <categories>
        <category>SpringMVC</category>
      </categories>
      <tags>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring-集成MyBatis</title>
    <url>/2020/07/11/Spring-%E9%9B%86%E6%88%90MyBatis/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>把mybatis框架和spring集成在一起用的技术是IoC。 </p>
<p><strong>为什么用IoC？</strong>  </p>
<ol>
<li>能把mybatis和spring集成在一起，像一个框架，因为ioc能创建对象。  </li>
<li>可以把mybatis框架中的对象交给spring统一创建， 开发人员从spring中获取对象。开发人员就不用同时面对两个或多个框架了，只面对一个spring。  <a id="more"></a>  

</li>
</ol>
<h1 id="mybatis基本使用步骤"><a href="#mybatis基本使用步骤" class="headerlink" title="mybatis基本使用步骤"></a>mybatis基本使用步骤</h1><ol>
<li>定义dao接口 ，StudentDao  </li>
<li>定义mapper文件 StudentDao.xml  </li>
<li>定义mybatis的主配置文件 mybatis.xml  </li>
<li>创建dao的代理对象</li>
</ol>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">StudentDao dao = <span class="module-access"><span class="module"><span class="identifier">SqlSession</span>.</span></span>get<span class="constructor">Mapper(StudentDao.<span class="params">class</span>)</span>;</span><br><span class="line">List&lt;Student&gt; students  = dao.select<span class="constructor">Students()</span>;</span><br></pre></td></tr></table></figure>

<p>要使用dao对象，需要使用getMapper()方法<br>怎么能使用getMapper()方法，需要哪些条件？   </p>
<ol>
<li>获取SqlSession对象，需要使用SqlSessionFactory的openSession()方法。  </li>
<li>创建SqlSessionFactory对象。 通过读取mybatis的主配置文件，能创建SqlSessionFactory对象。      </li>
</ol>
<p>需要SqlSessionFactory对象，使用Factory能获取SqlSession，有了SqlSession就能有dao，目的就是获取dao对象<br>Factory创建需要读取主配置文件。  </p>
<p>主配置文件：   </p>
<ol>
<li>数据库信息</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"mydev"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"mydev"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--数据库的驱动类名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--连接数据库的url字符串--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/springdb"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--访问数据库的用户名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--密码--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>mapper文件的位置</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/fubuking/dao/StudentDao.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>我们会使用独立的连接池类替换mybatis默认自己带的，把连接池类也交给spring创建。  </p>
<h1 id="spring和mybatis的集成"><a href="#spring和mybatis的集成" class="headerlink" title="spring和mybatis的集成"></a>spring和mybatis的集成</h1><p>步骤：  </p>
<ol>
<li>新建maven项目  </li>
<li>加入maven的依赖<br>1）spring依赖<br>2）mybatis依赖<br>3）mysql驱动<br>4）spring的事务的依赖<br>5）mybatis和spring集成的依赖：mybatis官方使用的，用来在spring项目中创建mybatis的SqlSesissonFactory，dao对象。  </li>
<li>创建实体类</li>
<li>创建dao接口和mapper文件</li>
<li>创建mybatis主配置文件</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--settings：控制mybatis全局行为--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--设置mybatis输出日志--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"logImpl"</span> <span class="attr">value</span>=<span class="string">"STDOUT_LOGGING"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--设置别名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--name:实体类所在的包名</span></span><br><span class="line"><span class="comment">            表示com.fubuking.entity包中的列名就是别名</span></span><br><span class="line"><span class="comment">            你可以使用Student表示com.fubuking.entity.Student</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.fubuking.entity"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- sql mapper(sql映射文件)的位置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">          name：是包名， 这个包中的所有mapper.xml一次都能加载</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.fubuking.dao"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> 6.创建Service接口和实现类，属性是dao<br> 7.创建spring的配置文件：声明mybatis的对象交给spring创建<br>    1）数据源DataSource<br>    2）SqlSessionFactory<br>    3）Dao对象<br>    4）声明自定义的service  </p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span></span><br><span class="line"><span class="xml">       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line"><span class="xml">       xmlns:context="http://www.springframework.org/schema/context"</span></span><br><span class="line"><span class="xml">       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--</span></span></span><br><span class="line"><span class="xml">       把数据库的配置信息，写在一个独立的文件，编译修改数据库的配置内容</span></span><br><span class="line"><span class="xml">       spring知道jdbc.properties文件的位置</span></span><br><span class="line"><span class="xml">    --&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:jdbc.properties"</span> /&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--声明数据源DataSource, 作用是连接数据库的--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myDataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span></span></span></span><br><span class="line"><span class="xml">          init-method="init" destroy-method="close"&gt;</span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!--set注入给DruidDataSource提供连接数据库信息 --&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!--    使用属性配置文件中的数据，语法 $</span></span><span class="template-variable">&#123;key&#125;</span><span class="xml"><span class="comment"> --&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;jdbc.url&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> /&gt;</span><span class="comment">&lt;!--setUrl()--&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;jdbc.username&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;jdbc.passwd&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxActive"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;jdbc.max&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--声明的是mybatis中提供的SqlSessionFactoryBean类，这个类内部创建SqlSessionFactory的</span></span></span><br><span class="line"><span class="xml">        SqlSessionFactory  sqlSessionFactory = new ..</span></span><br><span class="line"><span class="xml">    --&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!--set注入，把数据库连接池付给了dataSource属性--&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"myDataSource"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!--mybatis主配置文件的位置</span></span></span><br><span class="line"><span class="xml">           configLocation属性是Resource类型，读取配置文件</span></span><br><span class="line"><span class="xml">           它的赋值，使用value，指定文件的路径，使用classpath:表示文件的位置</span></span><br><span class="line"><span class="xml">        --&gt;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis.xml"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--创建dao对象，使用SqlSession的getMapper（StudentDao.class）</span></span></span><br><span class="line"><span class="xml">        MapperScannerConfigurer:在内部调用getMapper()生成每个dao接口的代理对象。</span></span><br><span class="line"></span><br><span class="line"><span class="xml">    --&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!--指定SqlSessionFactory对象的id--&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactoryBeanName"</span> <span class="attr">value</span>=<span class="string">"sqlSessionFactory"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!--指定包名， 包名是dao接口所在的包名。</span></span></span><br><span class="line"><span class="xml">            MapperScannerConfigurer会扫描这个包中的所有接口，把每个接口都执行</span></span><br><span class="line"><span class="xml">            一次getMapper()方法，得到每个接口的dao对象。</span></span><br><span class="line"><span class="xml">            创建好的dao对象放入到spring的容器中的。 dao对象的默认名称是 接口名首字母小写</span></span><br><span class="line"><span class="xml">        --&gt;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.bjpowernode.dao"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--声明service--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"studentService"</span> <span class="attr">class</span>=<span class="string">"com.fubuking.service.impl.StudentServiceImpl"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"studentDao"</span> <span class="attr">ref</span>=<span class="string">"studentDao"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p> 8.创建测试类，获取Service对象，通过service调用dao完成数据库的访问</p>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot-JSR303数据校验及多环境切换</title>
    <url>/2020/08/22/SpringBoot-JSR303%E6%95%B0%E6%8D%AE%E6%A0%A1%E9%AA%8C%E5%8F%8A%E5%A4%9A%E7%8E%AF%E5%A2%83%E5%88%87%E6%8D%A2/</url>
    <content><![CDATA[<h1 id="JSR303数据校验使用方法"><a href="#JSR303数据校验使用方法" class="headerlink" title="JSR303数据校验使用方法"></a>JSR303数据校验使用方法</h1><p>Springboot中可以用@validated来校验数据，如果数据异常则会统一抛出异常，方便异常中心统一处理。这里来写个注解让我们的name只能支持Email格式；    </p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@Component</span> <span class="comment">//注册bean</span></span><br><span class="line"><span class="variable">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"><span class="variable">@Validated</span>  <span class="comment">//数据校验</span></span><br><span class="line">public class Person &#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable">@Email</span>(message=<span class="string">"邮箱格式错误"</span>) <span class="comment">//name必须是邮箱格式</span></span><br><span class="line">    private String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用数据校验，可以保证数据的正确性；</p>
<a id="more"></a>
<h1 id="JSR303常见参数"><a href="#JSR303常见参数" class="headerlink" title="JSR303常见参数"></a>JSR303常见参数</h1><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@NotNull</span>(message=<span class="string">"名字不能为空"</span>)</span><br><span class="line">private String userName;</span><br><span class="line"><span class="variable">@Max</span>(value=<span class="number">120</span>,message=<span class="string">"年龄最大不能查过120"</span>)</span><br><span class="line">private int age;</span><br><span class="line"><span class="variable">@Email</span>(message=<span class="string">"邮箱格式错误"</span>)</span><br><span class="line">private String email;</span><br><span class="line"></span><br><span class="line">空检查</span><br><span class="line"><span class="variable">@Null</span>       验证对象是否为null</span><br><span class="line"><span class="variable">@NotNull</span>    验证对象是否不为null, 无法查检长度为<span class="number">0</span>的字符串</span><br><span class="line"><span class="variable">@NotBlank</span>   检查约束字符串是不是Null还有被Trim的长度是否大于<span class="number">0</span>,只对字符串,且会去掉前后空格.</span><br><span class="line"><span class="variable">@NotEmpty</span>   检查约束元素是否为NULL或者是EMPTY.</span><br><span class="line">    </span><br><span class="line">Booelan检查</span><br><span class="line"><span class="variable">@AssertTrue</span>     验证 Boolean 对象是否为 true  </span><br><span class="line"><span class="variable">@AssertFalse</span>    验证 Boolean 对象是否为 false  </span><br><span class="line">    </span><br><span class="line">长度检查</span><br><span class="line"><span class="variable">@Size</span>(min=, max=) 验证对象（Array,Collection,Map,String）长度是否在给定的范围之内  </span><br><span class="line"><span class="variable">@Length</span>(min=, max=) string is between min and max included.</span><br><span class="line"></span><br><span class="line">日期检查</span><br><span class="line"><span class="variable">@Past</span>       验证 Date 和 Calendar 对象是否在当前时间之前  </span><br><span class="line"><span class="variable">@Future</span>     验证 Date 和 Calendar 对象是否在当前时间之后  </span><br><span class="line"><span class="variable">@Pattern</span>    验证 String 对象是否符合正则表达式的规则</span><br><span class="line"></span><br><span class="line">.......等等</span><br><span class="line">除此以外，我们还可以自定义一些数据校验规则</span><br></pre></td></tr></table></figure>
<h1 id="多环境切换-多配置文件"><a href="#多环境切换-多配置文件" class="headerlink" title="多环境切换-多配置文件"></a>多环境切换-多配置文件</h1><p>profile是Spring对不同环境提供不同配置功能的支持，可以通过激活不同的环境版本，实现快速切换环境    </p>
<p>我们在主配置文件编写的时候，文件名可以是 application-{profile}.properties/yml , 用来指定多个环境版本<br>例如：<br>application-test.properties 代表测试环境配置<br>application-dev.properties 代表开发环境配置<br>但是Springboot并不会直接启动这些配置文件，它<strong>默认使用        application.properties主配置文件；</strong><br>我们需要通过一个配置来选择需要激活的环境：    </p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment">#比如在配置文件中指定使用dev环境，我们可以通过设置不同的端口号进行测试；</span></span><br><span class="line"><span class="comment">#我们启动SpringBoot，就可以看到已经切换到dev下的配置了；</span></span><br><span class="line"><span class="attr">spring.profiles.active</span>=dev</span><br></pre></td></tr></table></figure>
<h1 id="yaml的多文档块"><a href="#yaml的多文档块" class="headerlink" title="yaml的多文档块"></a>yaml的多文档块</h1><p>和properties配置文件中一样，但是使用yml去实现不需要创建多个配置文件，更加方便了 </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="comment">#选择要激活那个环境块</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">prod</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8083</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">dev</span> <span class="comment">#配置环境的名称</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8084</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">prod</span>  <span class="comment">#配置环境的名称</span></span><br></pre></td></tr></table></figure>
<p><strong>注意：如果yml和properties同时都配置了端口，并且没有激活其他环境 ， 默认会使用properties配置文件的</strong>    </p>
<h1 id="配置文件加载位置"><a href="#配置文件加载位置" class="headerlink" title="配置文件加载位置"></a>配置文件加载位置</h1><p>外部加载配置文件的方式十分多，我们选择最常用的即可，在开发的资源文件中进行配置！<br>springboot 启动会扫描以下位置的application.properties或者application.yml文件作为Spring boot的默认配置文件：    </p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">优先级<span class="number">1</span>：项目路径下的config文件夹配置文件</span><br><span class="line">优先级<span class="number">2</span>：项目路径下配置文件</span><br><span class="line">优先级<span class="number">3</span>：资源路径下的config文件夹配置文件</span><br><span class="line">优先级<span class="number">4</span>：资源路径下配置文件</span><br></pre></td></tr></table></figure>
<p>优先级由高到底，高优先级的配置会覆盖低优先级的配置；    </p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot-Web开发静态资源处理</title>
    <url>/2020/08/23/SpringBoot-Web%E5%BC%80%E5%8F%91%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h1 id="静态资源映射规则"><a href="#静态资源映射规则" class="headerlink" title="静态资源映射规则"></a>静态资源映射规则</h1><p>SpringBoot中，SpringMVC的web配置都在 WebMvcAutoConfiguration 这个配置类里面；<br>我们可以去看看 WebMvcAutoConfigurationAdapter 中有很多配置方法；<br>有一个方法：addResourceHandlers 添加资源处理    </p>
<a id="more"></a>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void add<span class="constructor">ResourceHandlers(ResourceHandlerRegistry <span class="params">registry</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!this.resourceProperties.is<span class="constructor">AddMappings()</span>) &#123;</span><br><span class="line">        <span class="comment">// 已禁用默认资源处理</span></span><br><span class="line">        logger.debug(<span class="string">"Default resource handling disabled"</span>);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 缓存控制</span></span><br><span class="line">    Duration cachePeriod = this.resourceProperties.get<span class="constructor">Cache()</span>.get<span class="constructor">Period()</span>;</span><br><span class="line">    CacheControl cacheControl = this.resourceProperties.get<span class="constructor">Cache()</span>.get<span class="constructor">Cachecontrol()</span>.<span class="keyword">to</span><span class="constructor">HttpCacheControl()</span>;</span><br><span class="line">    <span class="comment">// webjars 配置</span></span><br><span class="line">    <span class="keyword">if</span> (!registry.has<span class="constructor">MappingForPattern(<span class="string">"/webjars/**"</span>)</span>) &#123;</span><br><span class="line">        customize<span class="constructor">ResourceHandlerRegistration(<span class="params">registry</span>.<span class="params">addResourceHandler</span>(<span class="string">"/webjars/**"</span>)</span></span><br><span class="line">                                             .add<span class="constructor">ResourceLocations(<span class="string">"classpath:/META-INF/resources/webjars/"</span>)</span></span><br><span class="line">                                             .set<span class="constructor">CachePeriod(<span class="params">getSeconds</span>(<span class="params">cachePeriod</span>)</span>).set<span class="constructor">CacheControl(<span class="params">cacheControl</span>)</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 静态资源配置</span></span><br><span class="line">    String staticPathPattern = this.mvcProperties.get<span class="constructor">StaticPathPattern()</span>;</span><br><span class="line">    <span class="keyword">if</span> (!registry.has<span class="constructor">MappingForPattern(<span class="params">staticPathPattern</span>)</span>) &#123;</span><br><span class="line">        customize<span class="constructor">ResourceHandlerRegistration(<span class="params">registry</span>.<span class="params">addResourceHandler</span>(<span class="params">staticPathPattern</span>)</span></span><br><span class="line">                                             .add<span class="constructor">ResourceLocations(<span class="params">getResourceLocations</span>(<span class="params">this</span>.<span class="params">resourceProperties</span>.<span class="params">getStaticLocations</span>()</span>))</span><br><span class="line">                                             .set<span class="constructor">CachePeriod(<span class="params">getSeconds</span>(<span class="params">cachePeriod</span>)</span>).set<span class="constructor">CacheControl(<span class="params">cacheControl</span>)</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>读一下源代码：比如所有的 /webjars/** ， 都需要去 classpath:/META-INF/resources/webjars/ 找对应的资源；    </p>
<h1 id="webjars"><a href="#webjars" class="headerlink" title="webjars"></a>webjars</h1><p>Webjars本质就是以jar包的方式引入我们的静态资源 ， 我们以前要导入一个静态资源文件，直接导入即可。</p>
<p>要使用jQuery，我们只要要引入jQuery对应版本的pom依赖即可！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.webjars<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jquery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="第二种静态资源映射规则"><a href="#第二种静态资源映射规则" class="headerlink" title="第二种静态资源映射规则"></a>第二种静态资源映射规则</h1><p>我们去找staticPathPattern发现第二种映射规则 ：/** , 访问当前的项目任意资源，它会去找 resourceProperties 这个类，我们可以点进去看一下分析：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 进入方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">String</span>[] getStaticLocations() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.staticLocations;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 找到对应的值</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">String</span>[] staticLocations = CLASSPATH_RESOURCE_LOCATIONS;</span><br><span class="line"><span class="comment">// 找到路径</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">String</span>[] CLASSPATH_RESOURCE_LOCATIONS = &#123; </span><br><span class="line">    <span class="string">"classpath:/META-INF/resources/"</span>,</span><br><span class="line">  <span class="string">"classpath:/resources/"</span>, </span><br><span class="line">    <span class="string">"classpath:/static/"</span>, </span><br><span class="line">    <span class="string">"classpath:/public/"</span> </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>ResourceProperties 可以设置和我们静态资源有关的参数；这里面指向了它会去寻找资源的文件夹，即上面数组的内容。<br>所以得出结论，以下四个目录存放的静态资源可以被我们识别：    </p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="string">"classpath:/META-INF/resources/"</span></span><br><span class="line"><span class="string">"classpath:/resources/"</span></span><br><span class="line"><span class="string">"classpath:/static/"</span></span><br><span class="line"><span class="string">"classpath:/public/"</span></span><br></pre></td></tr></table></figure>
<p>我们可以在resources根目录下新建对应的文件夹，都可以存放我们的静态文件；<br>比如我们访问 <a href="http://localhost:8080/1.js" target="_blank" rel="noopener">http://localhost:8080/1.js</a> , 他就会去这些文件夹中寻找对应的静态资源文件；    </p>
<h1 id="自定义静态资源路径"><a href="#自定义静态资源路径" class="headerlink" title="自定义静态资源路径"></a>自定义静态资源路径</h1><p>我们也可以自己通过配置文件来指定一下，哪些文件夹是需要我们放静态资源文件的，在application.properties中配置；    </p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">spring.resources.<span class="keyword">static</span>-locations=<span class="keyword">classpath</span>:<span class="regexp">/coding/</span>,<span class="keyword">classpath</span>:<span class="regexp">/fbk/</span></span><br></pre></td></tr></table></figure>
<h1 id="首页处理"><a href="#首页处理" class="headerlink" title="首页处理"></a>首页处理</h1><p>静态资源文件夹说完后，我们继续向下看源码！可以看到一个欢迎页的映射，就是我们的首页！    </p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> WelcomePageHandlerMapping welcomePageHandlerMapping(ApplicationContext applicationContext,</span><br><span class="line">                                                           FormattingConversionService mvcConversionService,</span><br><span class="line">                                                           ResourceUrlProvider mvcResourceUrlProvider) &#123;</span><br><span class="line">    WelcomePageHandlerMapping welcomePageHandlerMapping = <span class="keyword">new</span> WelcomePageHandlerMapping(</span><br><span class="line">        <span class="keyword">new</span> TemplateAvailabilityProviders(applicationContext), applicationContext, getWelcomePage(), <span class="comment">// getWelcomePage 获得欢迎页</span></span><br><span class="line">        <span class="keyword">this</span>.mvcProperties.getStaticPathPattern());</span><br><span class="line">    welcomePageHandlerMapping.setInterceptors(getInterceptors(mvcConversionService, mvcResourceUrlProvider));</span><br><span class="line">    <span class="keyword">return</span> welcomePageHandlerMapping;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>点进去继续看</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Optional&lt;Resource&gt; getWelcomePage() &#123;</span><br><span class="line">    String[] locations = getResourceLocations(<span class="keyword">this</span>.resourceProperties.getStaticLocations());</span><br><span class="line">    <span class="comment">// ::是java8 中新引入的运算符</span></span><br><span class="line">    <span class="comment">// Class::function的时候function是属于Class的，应该是静态方法。</span></span><br><span class="line">    <span class="comment">// this::function的funtion是属于这个对象的。</span></span><br><span class="line">    <span class="comment">// 简而言之，就是一种语法糖而已，是一种简写</span></span><br><span class="line">    <span class="keyword">return</span> Arrays.stream(locations).map(<span class="keyword">this</span>::getIndexHtml).filter(<span class="keyword">this</span>::isReadable).findFirst();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 欢迎页就是一个location下的的 index.html 而已</span></span><br><span class="line"><span class="keyword">private</span> Resource getIndexHtml(String location) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.resourceLoader.getResource(location + <span class="string">"index.html"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>欢迎页，静态资源文件夹下的所有 index.html 页面；被 /** 映射。<br>比如我访问  <a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a> ，就会找静态资源文件夹下的 index.html</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot-MVC自动配置原理 </title>
    <url>/2020/08/24/SpringBoot-MVC%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h1 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h1><p>官方文档说明了SpringBoot对我们的SpringMVC还做了哪些配置，包括如何扩展，如何定制。<br>地址:<br><a href="https://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/reference/htmlsingle/#boot-features-spring-mvc-auto-configuration" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/reference/htmlsingle/#boot-features-spring-mvc-auto-configuration</a></p>
<a id="more"></a>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">Spring MVC Auto-configuration</span><br><span class="line">// Spring Boot为Spring MVC提供了自动配置，它可以很好地与大多数应用程序一起工作。</span><br><span class="line">Spring Boot provides auto-configuration for Spring MVC that works well <span class="keyword">with</span> most applications.</span><br><span class="line">// 自动配置在Spring默认设置的基础上添加了以下功能：</span><br><span class="line">The <span class="keyword">auto</span>-configuration adds the <span class="keyword">following</span> features <span class="keyword">on</span> top <span class="keyword">of</span> Spring’s <span class="keyword">defaults</span>:</span><br><span class="line">// 包含视图解析器</span><br><span class="line">Inclusion <span class="keyword">of</span> ContentNegotiatingViewResolver <span class="keyword">and</span> BeanNameViewResolver beans.</span><br><span class="line">// 支持静态资源文件夹的路径，以及webjars</span><br><span class="line">Support <span class="keyword">for</span> serving <span class="keyword">static</span> resources, <span class="keyword">including</span> support <span class="keyword">for</span> WebJars </span><br><span class="line">// 自动注册了Converter：</span><br><span class="line">// 转换器，这就是我们网页提交数据到后台自动封装成为对象的东西，比如把<span class="string">"1"</span>字符串自动转换为<span class="built_in">int</span>类型</span><br><span class="line">// Formatter：【格式化器，比如页面给我们了一个<span class="number">2019</span><span class="number">-8</span><span class="number">-10</span>，它会给我们自动格式化为<span class="built_in">Date</span>对象】</span><br><span class="line"><span class="keyword">Automatic</span> registration <span class="keyword">of</span> Converter, GenericConverter, <span class="keyword">and</span> Formatter beans.</span><br><span class="line">// HttpMessageConverters</span><br><span class="line">// SpringMVC用来转换<span class="keyword">Http</span>请求和响应的的，比如我们要把一个<span class="keyword">User</span>对象转换为<span class="keyword">JSON</span>字符串，可以去看官网文档解释；</span><br><span class="line">Support <span class="keyword">for</span> HttpMessageConverters (covered later <span class="keyword">in</span> this <span class="keyword">document</span>).</span><br><span class="line">// 定义错误代码生成规则的</span><br><span class="line"><span class="keyword">Automatic</span> registration <span class="keyword">of</span> MessageCodesResolver (covered later <span class="keyword">in</span> this <span class="keyword">document</span>).</span><br><span class="line">// 首页定制</span><br><span class="line"><span class="keyword">Static</span> index.html support.</span><br><span class="line">// 图标定制</span><br><span class="line">Custom Favicon support (covered later <span class="keyword">in</span> this <span class="keyword">document</span>).</span><br><span class="line">// 初始化数据绑定器：帮我们把请求数据绑定到JavaBean中！</span><br><span class="line"><span class="keyword">Automatic</span> <span class="keyword">use</span> <span class="keyword">of</span> a ConfigurableWebBindingInitializer bean (covered later <span class="keyword">in</span> this <span class="keyword">document</span>).</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">如果您希望保留Spring Boot MVC功能，并且希望添加其他MVC配置（拦截器、格式化程序、视图控制器和其他功能），则可以添加自己</span></span><br><span class="line"><span class="comment">的@configuration类，类型为webmvcconfiguer，但不添加@EnableWebMvc。如果希望提供</span></span><br><span class="line"><span class="comment">RequestMappingHandlerMapping、RequestMappingHandlerAdapter或ExceptionHandlerExceptionResolver的自定义</span></span><br><span class="line"><span class="comment">实例，则可以声明WebMVCregistrationAdapter实例来提供此类组件。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">If</span> you want <span class="keyword">to</span> <span class="keyword">keep</span> Spring Boot MVC features <span class="keyword">and</span> you want <span class="keyword">to</span> <span class="keyword">add</span> additional MVC configuration </span><br><span class="line">(interceptors, formatters, <span class="keyword">view</span> controllers, <span class="keyword">and</span> other features), you can <span class="keyword">add</span> your own </span><br><span class="line">@Configuration <span class="keyword">class</span> <span class="keyword">of</span> <span class="keyword">type</span> WebMvcConfigurer but <span class="keyword">without</span> @EnableWebMvc. <span class="keyword">If</span> you wish <span class="keyword">to</span> provide </span><br><span class="line">custom instances <span class="keyword">of</span> RequestMappingHandlerMapping, RequestMappingHandlerAdapter, <span class="keyword">or</span> </span><br><span class="line">ExceptionHandlerExceptionResolver, you can <span class="keyword">declare</span> a WebMvcRegistrationsAdapter <span class="keyword">instance</span> <span class="keyword">to</span> provide such components.</span><br><span class="line"></span><br><span class="line">// 如果您想完全控制Spring MVC，可以添加自己的@Configuration，并用@EnableWebMvc进行注释。</span><br><span class="line"><span class="keyword">If</span> you want <span class="keyword">to</span> take <span class="keyword">complete</span> control <span class="keyword">of</span> Spring MVC, you can <span class="keyword">add</span> your own @Configuration annotated <span class="keyword">with</span> @EnableWebMvc.</span><br></pre></td></tr></table></figure>
<h1 id="ContentNegotiatingViewResolver内容协商视图解析器"><a href="#ContentNegotiatingViewResolver内容协商视图解析器" class="headerlink" title="ContentNegotiatingViewResolver内容协商视图解析器"></a>ContentNegotiatingViewResolver内容协商视图解析器</h1><p>自动配置了ViewResolver，就是SpringMVC的视图解析器；<br>即根据方法的返回值取得视图对象（View），然后由视图对象决定如何渲染（转发，重定向）。<br>源码：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">@Bean</span><br><span class="line">@<span class="constructor">ConditionalOnBean(ViewResolver.<span class="params">class</span>)</span></span><br><span class="line">@<span class="constructor">ConditionalOnMissingBean(<span class="params">name</span> = <span class="string">"viewResolver"</span>, <span class="params">value</span> = ContentNegotiatingViewResolver.<span class="params">class</span>)</span></span><br><span class="line">public ContentNegotiatingViewResolver view<span class="constructor">Resolver(BeanFactory <span class="params">beanFactory</span>)</span> &#123;</span><br><span class="line">    ContentNegotiatingViewResolver resolver = <span class="keyword">new</span> <span class="constructor">ContentNegotiatingViewResolver()</span>;</span><br><span class="line">    resolver.set<span class="constructor">ContentNegotiationManager(<span class="params">beanFactory</span>.<span class="params">getBean</span>(ContentNegotiationManager.<span class="params">class</span>)</span>);</span><br><span class="line">    <span class="comment">// ContentNegotiatingViewResolver使用所有其他视图解析器来定位视图，因此它应该具有较高的优先级</span></span><br><span class="line">    resolver.set<span class="constructor">Order(Ordered.HIGHEST_PRECEDENCE)</span>;</span><br><span class="line">    return resolver;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们可以点进这类看看！找到对应的解析视图的代码；</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">@Nullable <span class="comment">// 注解说明：@Nullable 即参数可为null</span></span><br><span class="line">public View resolve<span class="constructor">ViewName(String <span class="params">viewName</span>, Locale <span class="params">locale</span>)</span> throws Exception &#123;</span><br><span class="line">    RequestAttributes attrs = <span class="module-access"><span class="module"><span class="identifier">RequestContextHolder</span>.</span></span>get<span class="constructor">RequestAttributes()</span>;</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">Assert</span>.</span></span>state(attrs instanceof ServletRequestAttributes, <span class="string">"No current ServletRequestAttributes"</span>);</span><br><span class="line">    List&lt;MediaType&gt; requestedMediaTypes = this.get<span class="constructor">MediaTypes(((ServletRequestAttributes)</span>attrs).get<span class="constructor">Request()</span>);</span><br><span class="line">    <span class="keyword">if</span> (requestedMediaTypes != null) &#123;</span><br><span class="line">        <span class="comment">// 获取候选的视图对象</span></span><br><span class="line">        List&lt;View&gt; candidateViews = this.get<span class="constructor">CandidateViews(<span class="params">viewName</span>, <span class="params">locale</span>, <span class="params">requestedMediaTypes</span>)</span>;</span><br><span class="line">        <span class="comment">// 选择一个最适合的视图对象，然后把这个对象返回</span></span><br><span class="line">        View bestView = this.get<span class="constructor">BestView(<span class="params">candidateViews</span>, <span class="params">requestedMediaTypes</span>, <span class="params">attrs</span>)</span>;</span><br><span class="line">        <span class="keyword">if</span> (bestView != null) &#123;</span><br><span class="line">            return bestView;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// .....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们继续点进去看，他是怎么获得候选的视图的。<br>getCandidateViews中看到他是把所有的视图解析器拿来，进行while循环，挨个解析！</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Iterator</span> var5 = <span class="keyword">this</span>.viewResolvers.iterator();</span><br></pre></td></tr></table></figure>
<p>所以得出结论：ContentNegotiatingViewResolver 这个视图解析器就是用来组合所有的视图解析器的<br>我们再去研究下他的组合逻辑，看到有个属性viewResolvers，看看它是在哪里进行赋值的！</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">protected void init<span class="constructor">ServletContext(ServletContext <span class="params">servletContext</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 这里它是从beanFactory工具中获取容器中的所有视图解析器</span></span><br><span class="line">    <span class="comment">// ViewRescolver.class 把所有的视图解析器来组合的</span></span><br><span class="line">    Collection&lt;ViewResolver&gt; matchingBeans = <span class="module-access"><span class="module"><span class="identifier">BeanFactoryUtils</span>.</span></span>beans<span class="constructor">OfTypeIncludingAncestors(<span class="params">this</span>.<span class="params">obtainApplicationContext</span>()</span>, <span class="module-access"><span class="module"><span class="identifier">ViewResolver</span>.</span></span><span class="keyword">class</span>).values<span class="literal">()</span>;</span><br><span class="line">    ViewResolver viewResolver;</span><br><span class="line">    <span class="keyword">if</span> (this.viewResolvers<span class="operator"> == </span>null) &#123;</span><br><span class="line">        this.viewResolvers = <span class="keyword">new</span> <span class="constructor">ArrayList(<span class="params">matchingBeans</span>.<span class="params">size</span>()</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...............</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果想要使用自己定制化的东西，我们只需要给容器中添加这个组件就好了！剩下的事情SpringBoot就会帮我们做了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span> <span class="comment">//放到bean中</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ViewResolver <span class="title">myViewResolver</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyViewResolver();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//我们写一个静态内部类，视图解析器就需要实现ViewResolver接口</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyViewResolver</span> <span class="keyword">implements</span> <span class="title">ViewResolver</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">resolveViewName</span><span class="params">(String s, Locale locale)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="修改SpringBoot的默认配置"><a href="#修改SpringBoot的默认配置" class="headerlink" title="修改SpringBoot的默认配置"></a>修改SpringBoot的默认配置</h1><p>SpringBoot在自动配置很多组件的时候，先看容器中有没有用户自己配置的（如果用户自己配置@bean），如果有就用用户配置的，如果没有就用自动配置的；<br>如果有些组件可以存在多个，比如我们的视图解析器，就将用户配置的和自己默认的组合起来！<br>扩展使用SpringMVC官方文档如下：<br>If you want to keep Spring Boot MVC features and you want to add additional MVC configuration (interceptors, formatters, view controllers, and other features), you can add your own @Configuration class of type WebMvcConfigurer but without @EnableWebMvc. If you wish to provide custom instances of RequestMappingHandlerMapping, RequestMappingHandlerAdapter, or ExceptionHandlerExceptionResolver, you can declare a WebMvcRegistrationsAdapter instance to provide such components.<br>我们要做的就是编写一个@Configuration注解类，并且类型要为WebMvcConfigurer，还不能标注@EnableWebMvc注解；    </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//应为类型要求为WebMvcConfigurer，所以我们实现其接口</span></span><br><span class="line"><span class="comment">//可以使用自定义类扩展MVC的功能</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 浏览器发送/test ， 就会跳转到test页面；</span></span><br><span class="line">        registry.addViewController(<span class="string">"/test"</span>).setViewName(<span class="string">"test"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们可以去分析一下原理：<br>1、WebMvcAutoConfiguration 是 SpringMVC的自动配置类，里面有一个类WebMvcAutoConfigurationAdapter<br>2、这个类上有一个注解，在做其他自动配置时会导入：@Import(EnableWebMvcConfiguration.class)<br>3、我们点进EnableWebMvcConfiguration这个类看一下，它继承了一个父类：DelegatingWebMvcConfiguration<br>这个父类中有这样一段代码：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">DelegatingWebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurationSupport</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">WebMvcConfigurerComposite</span> configurers = <span class="keyword">new</span> <span class="type">WebMvcConfigurerComposite</span>();</span><br><span class="line">    </span><br><span class="line">  <span class="comment">// 从容器中获取所有的webmvcConfigurer</span></span><br><span class="line">    <span class="meta">@Autowired</span>(required = <span class="literal">false</span>)</span><br><span class="line">    public void setConfigurers(<span class="type">List</span>&lt;<span class="type">WebMvcConfigurer</span>&gt; configurers) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="type">CollectionUtils</span>.isEmpty(configurers)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.configurers.addWebMvcConfigurers(configurers);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们可以在这个类中去寻找一个我们刚才设置的viewController当做参考，发现它调用了一个</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.configurers.addViewControllers(registry);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>点进去看一下</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span>(<span class="params">ViewControllerRegistry registry</span>)</span> &#123;</span><br><span class="line">    Iterator var2 = <span class="keyword">this</span>.delegates.iterator();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(var2.hasNext()) &#123;</span><br><span class="line">        <span class="comment">// 将所有的WebMvcConfigurer相关配置来一起调用！包括我们自己配置的和Spring给我们配置的</span></span><br><span class="line">        WebMvcConfigurer <span class="keyword">delegate</span> = (WebMvcConfigurer)var2.next();</span><br><span class="line">        <span class="keyword">delegate</span>.addViewControllers(registry);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>所以得出结论：所有的WebMvcConfiguration都会被作用，不止Spring自己的配置类，我们自己的配置类当然也会被调用；</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot-yaml配置注入 </title>
    <url>/2020/08/22/SpringBoot-yaml%E9%85%8D%E7%BD%AE%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<h1 id="SpringBoot配置文件"><a href="#SpringBoot配置文件" class="headerlink" title="SpringBoot配置文件"></a>SpringBoot配置文件</h1><p>SpringBoot使用一个全局的配置文件 ， 配置文件名称是固定的    </p>
<ul>
<li>application.properties<ul>
<li>语法结构 ：key=value</li>
</ul>
</li>
<li>application.yml<ul>
<li>语法结构 ：key：空格 value</li>
</ul>
</li>
</ul>
<p>配置文件的作用 ：修改SpringBoot自动配置的默认值，<strong>因为SpringBoot在底层都给我们自动配置好了</strong>    </p>
<p>比如我们可以在配置文件中修改Tomcat 默认启动的端口号</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="number">8081</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="yaml概述"><a href="#yaml概述" class="headerlink" title="yaml概述"></a>yaml概述</h1><p>YAML是 “YAML Ain’t a Markup Language” （YAML不是一种标记语言）的递归缩写。在开发的这种语言时，YAML 的意思其实是：”Yet Another Markup Language”（仍是一种标记语言）    </p>
<p><strong>这种语言以数据作为中心，而不是以标记语言为重点</strong>    </p>
<p>以前的配置文件，大多数都是使用xml来配置；比如一个简单的端口配置，我们来对比下yaml和xml        </p>
<p>传统xml配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">port</span>&gt;</span>8081<span class="tag">&lt;<span class="name">port</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>yaml配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">server：</span></span><br><span class="line">  <span class="attr">prot:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure>

<h1 id="yaml基础语法"><a href="#yaml基础语法" class="headerlink" title="yaml基础语法"></a>yaml基础语法</h1><p>说明：<strong>语法要求严格！</strong><br>1、空格不能省略.<br>2、以缩进来控制层级关系，只要是左边对齐的一列数据都是同一个层级的。<br>3、属性和值的大小写都是十分敏感的。    </p>
<p><strong>字面量：普通的值  [ 数字，布尔值，字符串  ]</strong><br>字面量直接写在后面就可以 ， 字符串默认不用加上双引号或者单引号；    </p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">k:</span> v</span><br></pre></td></tr></table></figure>
<p>注意：<br>“ ” 双引号，不会转义字符串里面的特殊字符 ， 特殊字符会作为本身想表示的意思；<br>比如 ：name: “123 \n 123”   输出 ：123  换行   123<br>‘’ 单引号，会转义特殊字符 ， 特殊字符最终会变成和普通字符一样输出<br>比如 ：name: ‘123 \n 123’   输出 ：123  \n   123    </p>
<p><strong>对象、Map（键值对）</strong>    </p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="meta">#对象、Map格式</span></span><br><span class="line"><span class="symbol">k:</span> </span><br><span class="line"><span class="symbol">    v1:</span></span><br><span class="line"><span class="symbol">    v2:</span></span><br></pre></td></tr></table></figure>
<p>在下一行来写对象的属性和值得关系，注意缩进；比如：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">student:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">fubuking</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure>
<p>行内写法</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">student</span>: &#123;<span class="attribute">name</span>: fubuking,age: <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure>
<p><strong>数组（ List、set ）</strong><br>用 - 值表示数组中的一个元素,比如：    </p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">pets:</span><br><span class="line"><span class="bullet"> - </span>cat</span><br><span class="line"><span class="bullet"> - </span>dog</span><br><span class="line"><span class="bullet"> - </span>pig</span><br></pre></td></tr></table></figure>
<p>行内写法</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">pet<span class="variable">s:</span> [<span class="keyword">cat</span>,dog,pig]</span><br></pre></td></tr></table></figure>
<p><strong>修改SpringBoot的默认端口号</strong><br>配置文件中添加，端口号的参数，就可以切换端口；</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8082</span></span><br></pre></td></tr></table></figure>
<h1 id="yaml注入配置文件"><a href="#yaml注入配置文件" class="headerlink" title="yaml注入配置文件"></a>yaml注入配置文件</h1><ol>
<li>在springboot项目中的resources目录下新建一个文件 application.yaml</li>
<li>编写一个实体类 Dog<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">@Component  <span class="comment">//注册bean到容器中</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Dog</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//有参无参构造、get、set方法、toString()方法  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>编写一个实体类 Person <figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span> <span class="comment">//注册bean到容器中</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> Person &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span> name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">Boolean</span> happy;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">Date</span> birth;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;<span class="built_in">String</span>,<span class="built_in">Object</span>&gt; maps;</span><br><span class="line">    <span class="keyword">private</span> List&lt;<span class="built_in">Object</span>&gt; lists;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//有参无参构造、get、set方法、toString()方法  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>使用yaml配置的方式进行注入<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">fubuking</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">happy:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">birth:</span> <span class="number">2000</span><span class="string">/01/01</span></span><br><span class="line">  <span class="attr">maps:</span> <span class="string">&#123;k1:</span> <span class="string">v1,k2:</span> <span class="string">v2&#125;</span></span><br><span class="line">  <span class="attr">lists:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">code</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">girl</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">music</span></span><br><span class="line">  <span class="attr">dog:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">旺财</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure></li>
<li>注入到我们的类中    <figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">@ConfigurationProperties作用：</span></span><br><span class="line"><span class="comment">将配置文件中配置的每一个属性的值，映射到这个组件中；</span></span><br><span class="line"><span class="comment">告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定</span></span><br><span class="line"><span class="comment">参数 prefix = “person” : 将配置文件中的person下面的所有属性一一对应</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Component</span> <span class="comment">//注册bean</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> Person &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span> name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">Boolean</span> happy;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">Date</span> birth;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;<span class="built_in">String</span>,<span class="built_in">Object</span>&gt; maps;</span><br><span class="line">    <span class="keyword">private</span> List&lt;<span class="built_in">Object</span>&gt; lists;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>IDEA 提示，springboot配置注解处理器没有找到，让我们看文档，我们可以查看文档，找到一个依赖    <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 导入配置文件处理器，配置文件进行绑定就会有提示，需要重启 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h1 id="加载指定的配置文件"><a href="#加载指定的配置文件" class="headerlink" title="加载指定的配置文件"></a>加载指定的配置文件</h1><p>@PropertySource ：加载指定的配置文件；<br>@configurationProperties：默认从全局配置文件中获取值；<br>1、在resources目录下新建一个person.properties文件    </p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">name</span>=fbk</span><br></pre></td></tr></table></figure>
<p>2、指定加载person.properties文件</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@PropertySource</span>(value = <span class="string">"classpath:person.properties"</span>)</span><br><span class="line"><span class="variable">@Component</span> <span class="comment">//注册bean</span></span><br><span class="line">public class Person &#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable">@Value</span>(<span class="string">"$&#123;name&#125;"</span>)</span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line">    ......  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="配置文件占位符"><a href="#配置文件占位符" class="headerlink" title="配置文件占位符"></a>配置文件占位符</h1><p>配置文件还可以编写占位符生成随机数    </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">qinjiang$&#123;random.uuid&#125;</span> <span class="comment"># 随机uuid</span></span><br><span class="line">    <span class="attr">age:</span> <span class="string">$&#123;random.int&#125;</span>  <span class="comment"># 随机int</span></span><br><span class="line">    <span class="attr">happy:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">birth:</span> <span class="number">2000</span><span class="string">/01/01</span></span><br><span class="line">    <span class="attr">maps:</span> <span class="string">&#123;k1:</span> <span class="string">v1,k2:</span> <span class="string">v2&#125;</span></span><br><span class="line">    <span class="attr">lists:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">code</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">girl</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">music</span></span><br><span class="line">    <span class="attr">dog:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">$&#123;person.hello:other&#125;_旺财</span></span><br><span class="line">      <span class="attr">age:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>
<h1 id="对比小结"><a href="#对比小结" class="headerlink" title="对比小结"></a>对比小结</h1><p>1、@ConfigurationProperties只需要写一次即可 ， @Value则需要每个字段都添加。<br>2、松散绑定：这个什么意思呢? 比如我的yml中写的last-name，这个和lastName是一样的， - 后面跟着的字母默认是大写的。这就是松散绑定。<br>3、JSR303数据校验 ， 这个就是我们可以在字段是增加一层过滤器验证 ， 可以保证数据的合法性。<br>4、复杂类型封装，yml中可以封装对象 ， 使用value就不支持。<br><strong>结论：</strong><br>配置yml和配置properties都可以获取到值 ， 强烈推荐 yml；<br>如果我们在某个业务中，只需要获取配置文件中的某个值，可以使用一下 @value；<br>如果说，我们专门编写了一个JavaBean来和配置文件进行一一映射，就直接@configurationProperties，不要犹豫！    </p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot-初识原理</title>
    <url>/2020/08/19/SpringBoot-%E5%88%9D%E8%AF%86%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h1 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h1><h2 id="父依赖"><a href="#父依赖" class="headerlink" title="父依赖"></a>父依赖</h2><p>其中它主要是依赖一个父项目，主要是管理项目的资源过滤及插件。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>点进去，发现还有一个父依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../../spring-boot-dependencies<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这里才是真正管理SpringBoot应用里面所有依赖版本的地方，SpringBoot的版本控制中心；<br><strong>以后我们导入依赖默认是不需要写版本；但是如果导入的包没有在依赖中管理着就需要手动配置版本了；</strong>    </p>
<h2 id="启动器-spring-boot-starter"><a href="#启动器-spring-boot-starter" class="headerlink" title="启动器 spring-boot-starter"></a>启动器 spring-boot-starter</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>springboot-boot-starter-xxx：就是spring-boot的场景启动器<br>spring-boot-starter-web：帮我们导入了web模块正常运行所依赖的组件；        </p>
<p>SpringBoot将所有的功能场景都抽取出来，做成一个个的starter （启动器），只需要在项目中引入这些starter即可，所有相关的依赖都会导入进来 ， 我们要用什么功能就导入什么样的场景启动器即可 ；我们未来也可以自己自定义 starter；</p>
<h1 id="主启动类"><a href="#主启动类" class="headerlink" title="主启动类"></a>主启动类</h1><h2 id="默认的主启动类"><a href="#默认的主启动类" class="headerlink" title="默认的主启动类"></a>默认的主启动类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@SpringBootApplication 来标注一个主程序类</span></span><br><span class="line"><span class="comment">//说明这是一个Spring Boot应用</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//以为是启动了一个方法，没想到启动了一个服务</span></span><br><span class="line">      SpringApplication.run(SpringbootApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="SpringBootApplication"><a href="#SpringBootApplication" class="headerlink" title="@SpringBootApplication"></a>@SpringBootApplication</h2><p>作用：标注在某个类上说明这个类是SpringBoot的主配置类 ， SpringBoot就应该运行这个类的main方法来启动SpringBoot应用；    </p>
<p>进入这个注解：可以看到上面还有很多其他注解！    </p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@SpringBootConfiguration</span></span><br><span class="line"><span class="variable">@EnableAutoConfiguration</span></span><br><span class="line"><span class="variable">@ComponentScan</span>(</span><br><span class="line">    excludeFilters = &#123;<span class="variable">@Filter</span>(</span><br><span class="line">    type = FilterType.CUSTOM,</span><br><span class="line">    classes = &#123;TypeExcludeFilter.class&#125;</span><br><span class="line">), <span class="variable">@Filter</span>(</span><br><span class="line">    type = FilterType.CUSTOM,</span><br><span class="line">    classes = &#123;AutoConfigurationExcludeFilter.class&#125;</span><br><span class="line">)&#125;</span><br><span class="line">)</span><br><span class="line">public <span class="variable">@interface</span> SpringBootApplication &#123;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="ComponentScan"><a href="#ComponentScan" class="headerlink" title="@ComponentScan"></a>@ComponentScan</h2><p>这个注解在Spring中很重要 ,它对应XML配置中的元素。<br>作用：自动扫描并加载符合条件的组件或者bean ， 将这个bean定义加载到IOC容器中    </p>
<h2 id="SpringBootConfiguration"><a href="#SpringBootConfiguration" class="headerlink" title="@SpringBootConfiguration"></a>@SpringBootConfiguration</h2><p>作用：SpringBoot的配置类 ，标注在某个类上 ， 表示这是一个SpringBoot的配置类；<br>我们继续进去这个注解查看</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 点进去得到下面的 @Component</span></span><br><span class="line"><span class="variable">@Configuration</span></span><br><span class="line">public <span class="variable">@interface</span> SpringBootConfiguration &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">@Component</span></span><br><span class="line">public <span class="variable">@interface</span> Configuration &#123;&#125;</span><br></pre></td></tr></table></figure>
<p>这里的 @Configuration，说明这是一个配置类 ，配置类就是对应Spring的xml 配置文件；<br>里面的 @Component 这就说明，启动类本身也是Spring中的一个组件而已，负责启动应用！<br>我们回到 SpringBootApplication 注解中继续看。</p>
<h2 id="EnableAutoConfiguration"><a href="#EnableAutoConfiguration" class="headerlink" title="@EnableAutoConfiguration"></a>@EnableAutoConfiguration</h2><p><strong>@EnableAutoConfiguration : 开启自动配置功能</strong>    </p>
<p>以前我们需要自己配置的东西，而现在SpringBoot可以自动帮我们配置 ；    @EnableAutoConfiguration告诉SpringBoot开启自动配置功能，这样自动配置才能生效；    </p>
<p>点进注解接续查看：</p>
<h3 id="AutoConfigurationPackage-自动配置包"><a href="#AutoConfigurationPackage-自动配置包" class="headerlink" title="@AutoConfigurationPackage : 自动配置包"></a>@AutoConfigurationPackage : 自动配置包</h3><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@Import</span>(&#123;Registrar.class&#125;)</span><br><span class="line">public <span class="variable">@interface</span> AutoConfigurationPackage &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>@import ：Spring底层注解@import ， 给容器中导入一个组件<br>Registrar.class 作用：将主启动类的所在包及包下面所有子包里面的所有组件扫描到Spring容器 ；<br>这个分析完了，退到上一步，继续看    </p>
<h2 id="Import-AutoConfigurationImportSelector-class-给容器导入组件"><a href="#Import-AutoConfigurationImportSelector-class-给容器导入组件" class="headerlink" title="@Import({AutoConfigurationImportSelector.class}) : 给容器导入组件"></a>@Import({AutoConfigurationImportSelector.class}) : 给容器导入组件</h2><p>AutoConfigurationImportSelector ：自动配置导入选择器，那么它会导入哪些组件的选择器呢？我们点击去这个类看源码：<br>1、这个类中有一个这样的方法    </p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获得候选的配置</span></span><br><span class="line">protected List&lt;String&gt; get<span class="constructor">CandidateConfigurations(AnnotationMetadata <span class="params">metadata</span>, AnnotationAttributes <span class="params">attributes</span>)</span> &#123;</span><br><span class="line">    <span class="comment">//这里的getSpringFactoriesLoaderFactoryClass（）方法</span></span><br><span class="line">    <span class="comment">//返回的就是我们最开始看的启动自动导入配置文件的注解类；EnableAutoConfiguration</span></span><br><span class="line">    List&lt;String&gt; configurations = <span class="module-access"><span class="module"><span class="identifier">SpringFactoriesLoader</span>.</span></span>load<span class="constructor">FactoryNames(<span class="params">this</span>.<span class="params">getSpringFactoriesLoaderFactoryClass</span>()</span>, this.get<span class="constructor">BeanClassLoader()</span>);</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">Assert</span>.</span></span>not<span class="constructor">Empty(<span class="params">configurations</span>, <span class="string">"No auto configuration classes found in META-INF/spring.factories. If you are using a custom packaging, make sure that file is correct."</span>)</span>;</span><br><span class="line">    return configurations;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、这个方法又调用了  SpringFactoriesLoader 类的静态方法！我们进入SpringFactoriesLoader类loadFactoryNames() 方法</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">public static List&lt;String&gt; load<span class="constructor">FactoryNames(Class&lt;?&gt; <span class="params">factoryClass</span>, @Nullable ClassLoader <span class="params">classLoader</span>)</span> &#123;</span><br><span class="line">    String factoryClassName = factoryClass.get<span class="constructor">Name()</span>;</span><br><span class="line">    <span class="comment">//这里它又调用了 loadSpringFactories 方法</span></span><br><span class="line">    return (List)load<span class="constructor">SpringFactories(<span class="params">classLoader</span>)</span>.get<span class="constructor">OrDefault(<span class="params">factoryClassName</span>, Collections.<span class="params">emptyList</span>()</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3、我们继续点击查看 loadSpringFactories 方法</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> static Map&lt;String, List&lt;String&gt;&gt; load<span class="constructor">SpringFactories(@Nullable ClassLoader <span class="params">classLoader</span>)</span> &#123;</span><br><span class="line">    <span class="comment">//获得classLoader ， 我们返回可以看到这里得到的就是EnableAutoConfiguration标注的类本身</span></span><br><span class="line">    MultiValueMap&lt;String, String&gt; result = (MultiValueMap)cache.get(classLoader);</span><br><span class="line">    <span class="keyword">if</span> (result != null) &#123;</span><br><span class="line">        return result;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//去获取一个资源 "META-INF/spring.factories"</span></span><br><span class="line">            Enumeration&lt;URL&gt; urls = classLoader != null ? classLoader.get<span class="constructor">Resources(<span class="string">"META-INF/spring.factories"</span>)</span> : <span class="module-access"><span class="module"><span class="identifier">ClassLoader</span>.</span></span>get<span class="constructor">SystemResources(<span class="string">"META-INF/spring.factories"</span>)</span>;</span><br><span class="line">            LinkedMultiValueMap result = <span class="keyword">new</span> <span class="constructor">LinkedMultiValueMap()</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//将读取到的资源遍历，封装成为一个Properties</span></span><br><span class="line">            <span class="keyword">while</span>(urls.has<span class="constructor">MoreElements()</span>) &#123;</span><br><span class="line">                URL url = (URL)urls.next<span class="constructor">Element()</span>;</span><br><span class="line">                UrlResource resource = <span class="keyword">new</span> <span class="constructor">UrlResource(<span class="params">url</span>)</span>;</span><br><span class="line">                Properties properties = <span class="module-access"><span class="module"><span class="identifier">PropertiesLoaderUtils</span>.</span></span>load<span class="constructor">Properties(<span class="params">resource</span>)</span>;</span><br><span class="line">                Iterator var6 = properties.entry<span class="constructor">Set()</span>.iterator<span class="literal">()</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span>(var6.has<span class="constructor">Next()</span>) &#123;</span><br><span class="line">                    Entry&lt;?, ?&gt; entry = (Entry)var6.next<span class="literal">()</span>;</span><br><span class="line">                    String factoryClassName = ((String)entry.get<span class="constructor">Key()</span>).trim<span class="literal">()</span>;</span><br><span class="line">                    String<span class="literal">[]</span> var9 = <span class="module-access"><span class="module"><span class="identifier">StringUtils</span>.</span></span>comma<span class="constructor">DelimitedListToStringArray((String)</span>entry.get<span class="constructor">Value()</span>);</span><br><span class="line">                    <span class="built_in">int</span> var10 = var9.length;</span><br><span class="line"></span><br><span class="line">                    for(<span class="built_in">int</span> var11 = <span class="number">0</span>; var11 &lt; var10; ++var11) &#123;</span><br><span class="line">                        String factoryName = var9<span class="literal">[<span class="identifier">var11</span>]</span>;</span><br><span class="line">                        result.add(factoryClassName, factoryName.trim<span class="literal">()</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            cache.put(classLoader, result);</span><br><span class="line">            return result;</span><br><span class="line">        &#125; catch (IOException var13) &#123;</span><br><span class="line">            throw <span class="keyword">new</span> <span class="constructor">IllegalArgumentException(<span class="string">"Unable to load factories from location [META-INF/spring.factories]"</span>, <span class="params">var13</span>)</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>4、发现一个多次出现的文件：spring.factories，全局搜索它</p>
<h2 id="spring-factories"><a href="#spring-factories" class="headerlink" title="spring.factories"></a>spring.factories</h2><p>我们根据源头打开spring.factories ， 看到了很多自动配置的文件；这就是自动配置根源所在！    </p>
<p>所以，自动配置真正实现是从classpath中搜寻所有的META-INF/spring.factories配置文件 ，并将其中对应的org.springframework.boot.autoconfigure. 包下的配置项，通过反射实例化为对应标注了 @Configuration的JavaConfig形式的IOC容器配置类 ， 然后将这些都汇总成为一个实例并加载到IOC容器中。    </p>
<h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><ol>
<li>SpringBoot在启动的时候从类路径下的META-INF/spring.factories中获取EnableAutoConfiguration指定的值</li>
<li>将这些值作为自动配置类导入容器 ， 自动配置类就生效 ， 帮我们进行自动配置工作；</li>
<li>整个J2EE的整体解决方案和自动配置都在springboot-autoconfigure的jar包中；</li>
<li>它会给容器中导入非常多的自动配置类 （xxxAutoConfiguration）, 就是给容器中导入这个场景需要的所有组件 ， 并配置好这些组件 ；</li>
<li>有了自动配置类 ， 免去了我们手动编写配置注入功能组件等的工作；</li>
</ol>
<h1 id="SpringApplication"><a href="#SpringApplication" class="headerlink" title="SpringApplication"></a>SpringApplication</h1><p><strong>这个类主要做了以下四件事情：</strong><br>1、推断应用的类型是普通的项目还是Web项目<br>2、查找并加载所有可用初始化器 ， 设置到initializers属性中<br>3、找出所有的应用程序监听器，设置到listeners属性中<br>4、推断并设置main方法的定义类，找到运行的主类    </p>
<p>查看构造器：    </p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> SpringApplication(ResourceLoader resourceLoader, Class... primarySources) &#123;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">    <span class="keyword">this</span>.webApplicationType = WebApplicationType.deduceFromClasspath();</span><br><span class="line">    <span class="keyword">this</span>.setInitializers(<span class="keyword">this</span>.getSpringFactoriesInstances();</span><br><span class="line">    <span class="keyword">this</span>.setListeners(<span class="keyword">this</span>.getSpringFactoriesInstances(ApplicationListener<span class="class">.<span class="keyword">class</span>));</span></span><br><span class="line">    <span class="keyword">this</span>.mainApplicationClass = <span class="keyword">this</span>.deduceMainApplicationClass();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot-异步、定时、邮件任务 </title>
    <url>/2020/08/28/SpringBoot-%E5%BC%82%E6%AD%A5%E3%80%81%E5%AE%9A%E6%97%B6%E3%80%81%E9%82%AE%E4%BB%B6%E4%BB%BB%E5%8A%A1/</url>
    <content><![CDATA[<h1 id="异步任务"><a href="#异步任务" class="headerlink" title="异步任务"></a>异步任务</h1><p>1、创建一个service包<br>2、创建一个类AsyncService<br>异步处理还是非常常用的，比如我们在网站上发送邮件，后台会去发送邮件，此时前台会造成响应不动，直到邮件发送完毕，响应才会成功，所以我们一般会采用多线程的方式去处理这些任务。<br>编写方法，假装正在处理数据，使用线程设置一些延时，模拟同步等待的情况；</p>
<a id="more"></a>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">@Service</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">AsyncService</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">void</span> hello()&#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">       System.<span class="keyword">out</span>.println(<span class="string">"业务进行中...."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3、编写controller包<br>4、编写AsyncController类</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   AsyncService asyncService;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@GetMapping(<span class="meta-string">"/hello"</span>)</span></span><br><span class="line">   <span class="keyword">public</span> String hello()&#123;</span><br><span class="line">       asyncService.hello();</span><br><span class="line">       <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>5、访问<a href="http://localhost:8080/hello进行测试，3秒后出现success，这是同步等待的情况。" target="_blank" rel="noopener">http://localhost:8080/hello进行测试，3秒后出现success，这是同步等待的情况。</a><br>我们如果想让用户直接得到消息，就在后台使用多线程的方式进行处理即可，但是每次都需要自己手动去编写多线程的实现的话，太麻烦了，我们只需要用一个简单的办法，在我们的方法上加一个简单的注解即可，如下：<br>6、给hello方法添加@Async注解；</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">//告诉Spring这是一个异步方法</span></span><br><span class="line">@Async</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">       Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">       e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line">   System.out.<span class="built_in">println</span>(<span class="string">"业务进行中...."</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>SpringBoot就会自己开一个线程池，进行调用！但是要让这个注解生效，我们还需要在主程序上添加一个注解@EnableAsync ，开启异步注解功能；</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@EnableAsync</span> <span class="comment">//开启异步注解功能</span></span><br><span class="line"><span class="variable">@SpringBootApplication</span></span><br><span class="line">public class SpringbootTaskApplication &#123;</span><br><span class="line"></span><br><span class="line">   <span class="selector-tag">public</span> <span class="selector-tag">static</span> <span class="selector-tag">void</span> <span class="selector-tag">main</span>(String[] args) &#123;</span><br><span class="line">       <span class="selector-tag">SpringApplication</span><span class="selector-class">.run</span>(SpringbootTaskApplication.class, args);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>7、重启测试，网页瞬间响应，后台代码依旧执行！</p>
<h1 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h1><p>项目开发中经常需要执行一些定时任务，比如需要在每天凌晨的时候，分析一次前一天的日志信息，Spring为我们提供了异步执行任务调度的方式，提供了两个接口。    </p>
<ul>
<li>TaskExecutor接口</li>
<li>TaskScheduler接口    </li>
</ul>
<p>两个注解：    </p>
<ul>
<li>@EnableScheduling</li>
<li>@Scheduled    </li>
</ul>
<p>cron表达式：<a href="https://www.cnblogs.com/yanghj010/p/10875151.html" target="_blank" rel="noopener">https://www.cnblogs.com/yanghj010/p/10875151.html</a>  </p>
<p><strong>测试步骤：</strong><br>1、创建一个ScheduledService</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScheduledService</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">//秒   分   时     日   月   周几</span></span><br><span class="line">   <span class="comment">//0 * * * * MON-FRI</span></span><br><span class="line">   <span class="comment">//注意cron表达式的用法；</span></span><br><span class="line">   <span class="meta">@Scheduled</span>(cron = <span class="string">"0 * * * * 0-7"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">       System.out.println(<span class="string">"hello....."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、这里写完定时任务之后，我们需要在主程序上增加@EnableScheduling 开启定时任务功能</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@EnableAsync</span> <span class="comment">//开启异步注解功能</span></span><br><span class="line"><span class="variable">@EnableScheduling</span> <span class="comment">//开启基于注解的定时任务</span></span><br><span class="line"><span class="variable">@SpringBootApplication</span></span><br><span class="line">public class SpringbootTaskApplication &#123;</span><br><span class="line"></span><br><span class="line">   <span class="selector-tag">public</span> <span class="selector-tag">static</span> <span class="selector-tag">void</span> <span class="selector-tag">main</span>(String[] args) &#123;</span><br><span class="line">       <span class="selector-tag">SpringApplication</span><span class="selector-class">.run</span>(SpringbootTaskApplication.class, args);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3、详细了解下cron表达式；<br><a href="http://www.bejson.com/othertools/cron/" target="_blank" rel="noopener">http://www.bejson.com/othertools/cron/</a><br>4、常用的表达式</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">（<span class="number">1</span>）<span class="number">0</span>/<span class="number">2</span> * * * * ?   表示每<span class="number">2</span>秒 执行任务</span><br><span class="line">（<span class="number">1</span>）<span class="number">0</span> <span class="number">0</span>/<span class="number">2</span> * * * ?   表示每<span class="number">2</span>分钟 执行任务</span><br><span class="line">（<span class="number">1</span>）<span class="number">0</span> <span class="number">0</span> <span class="number">2</span> <span class="number">1</span> * ?   表示在每月的<span class="number">1</span>日的凌晨<span class="number">2</span>点调整任务</span><br><span class="line">（<span class="number">2</span>）<span class="number">0</span> <span class="number">15</span> <span class="number">10</span> ? * MON-FRI   表示周一到周五每天上午<span class="number">10</span>:<span class="number">15</span>执行作业</span><br><span class="line">（<span class="number">3</span>）<span class="number">0</span> <span class="number">15</span> <span class="number">10</span> ? <span class="number">6</span>L <span class="number">2002</span><span class="number">-2006</span>   表示<span class="number">2002</span><span class="number">-2006</span>年的每个月的最后一个星期五上午<span class="number">10</span>:<span class="number">15</span>执行作</span><br><span class="line">（<span class="number">4</span>）<span class="number">0</span> <span class="number">0</span> <span class="number">10</span>,<span class="number">14</span>,<span class="number">16</span> * * ?   每天上午<span class="number">10</span>点，下午<span class="number">2</span>点，<span class="number">4</span>点</span><br><span class="line">（<span class="number">5</span>）<span class="number">0</span> <span class="number">0</span>/<span class="number">30</span> <span class="number">9</span><span class="number">-17</span> * * ?   朝九晚五工作时间内每半小时</span><br><span class="line">（<span class="number">6</span>）<span class="number">0</span> <span class="number">0</span> <span class="number">12</span> ? * WED   表示每个星期三中午<span class="number">12</span>点</span><br><span class="line">（<span class="number">7</span>）<span class="number">0</span> <span class="number">0</span> <span class="number">12</span> * * ?   每天中午<span class="number">12</span>点触发</span><br><span class="line">（<span class="number">8</span>）<span class="number">0</span> <span class="number">15</span> <span class="number">10</span> ? * *   每天上午<span class="number">10</span>:<span class="number">15</span>触发</span><br><span class="line">（<span class="number">9</span>）<span class="number">0</span> <span class="number">15</span> <span class="number">10</span> * * ?     每天上午<span class="number">10</span>:<span class="number">15</span>触发</span><br><span class="line">（<span class="number">10</span>）<span class="number">0</span> <span class="number">15</span> <span class="number">10</span> * * ?   每天上午<span class="number">10</span>:<span class="number">15</span>触发</span><br><span class="line">（<span class="number">11</span>）<span class="number">0</span> <span class="number">15</span> <span class="number">10</span> * * ? <span class="number">2005</span>   <span class="number">2005</span>年的每天上午<span class="number">10</span>:<span class="number">15</span>触发</span><br><span class="line">（<span class="number">12</span>）<span class="number">0</span> * <span class="number">14</span> * * ?     在每天下午<span class="number">2</span>点到下午<span class="number">2</span>:<span class="number">59</span>期间的每<span class="number">1</span>分钟触发</span><br><span class="line">（<span class="number">13</span>）<span class="number">0</span> <span class="number">0</span>/<span class="number">5</span> <span class="number">14</span> * * ?   在每天下午<span class="number">2</span>点到下午<span class="number">2</span>:<span class="number">55</span>期间的每<span class="number">5</span>分钟触发</span><br><span class="line">（<span class="number">14</span>）<span class="number">0</span> <span class="number">0</span>/<span class="number">5</span> <span class="number">14</span>,<span class="number">18</span> * * ?     在每天下午<span class="number">2</span>点到<span class="number">2</span>:<span class="number">55</span>期间和下午<span class="number">6</span>点到<span class="number">6</span>:<span class="number">55</span>期间的每<span class="number">5</span>分钟触发</span><br><span class="line">（<span class="number">15</span>）<span class="number">0</span> <span class="number">0</span><span class="number">-5</span> <span class="number">14</span> * * ?   在每天下午<span class="number">2</span>点到下午<span class="number">2</span>:<span class="number">05</span>期间的每<span class="number">1</span>分钟触发</span><br><span class="line">（<span class="number">16</span>）<span class="number">0</span> <span class="number">10</span>,<span class="number">44</span> <span class="number">14</span> ? <span class="number">3</span> WED   每年三月的星期三的下午<span class="number">2</span>:<span class="number">10</span>和<span class="number">2</span>:<span class="number">44</span>触发</span><br><span class="line">（<span class="number">17</span>）<span class="number">0</span> <span class="number">15</span> <span class="number">10</span> ? * MON-FRI   周一至周五的上午<span class="number">10</span>:<span class="number">15</span>触发</span><br><span class="line">（<span class="number">18</span>）<span class="number">0</span> <span class="number">15</span> <span class="number">10</span> <span class="number">15</span> * ?   每月<span class="number">15</span>日上午<span class="number">10</span>:<span class="number">15</span>触发</span><br><span class="line">（<span class="number">19</span>）<span class="number">0</span> <span class="number">15</span> <span class="number">10</span> L * ?   每月最后一日的上午<span class="number">10</span>:<span class="number">15</span>触发</span><br><span class="line">（<span class="number">20</span>）<span class="number">0</span> <span class="number">15</span> <span class="number">10</span> ? * <span class="number">6</span>L   每月的最后一个星期五上午<span class="number">10</span>:<span class="number">15</span>触发</span><br><span class="line">（<span class="number">21</span>）<span class="number">0</span> <span class="number">15</span> <span class="number">10</span> ? * <span class="number">6</span>L <span class="number">2002</span><span class="number">-2005</span>   <span class="number">2002</span>年至<span class="number">2005</span>年的每月的最后一个星期五上午<span class="number">10</span>:<span class="number">15</span>触发</span><br><span class="line">（<span class="number">22</span>）<span class="number">0</span> <span class="number">15</span> <span class="number">10</span> ? * <span class="number">6</span>#<span class="number">3</span>   每月的第三个星期五上午<span class="number">10</span>:<span class="number">15</span>触发</span><br></pre></td></tr></table></figure>
<h1 id="邮件任务"><a href="#邮件任务" class="headerlink" title="邮件任务"></a>邮件任务</h1><p>邮件发送，在我们的日常开发中，也非常的多，Springboot也帮我们做了支持</p>
<ul>
<li>邮件发送需要引入spring-boot-start-mail    </li>
<li>SpringBoot 自动配置MailSenderAutoConfiguration</li>
<li>定义MailProperties内容，配置在application.yml中</li>
<li>自动装配JavaMailSender</li>
<li>测试邮件发送    </li>
</ul>
<p><strong>测试：</strong><br>1、引入pom依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>看它引入的依赖，可以看到 jakarta.mail</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun.mail<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jakarta.mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>2、查看自动配置类：MailSenderAutoConfiguration<br>这个类中存在bean，JavaMailSenderImpl<br>然后我们去看下配置文件</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">@ConfigurationProperties(</span><br><span class="line">   prefix = <span class="string">"spring.mail"</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MailProperties</span> &#123;</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset DEFAULT_CHARSET;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">String</span> host;</span><br><span class="line">   <span class="keyword">private</span> Integer port;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">String</span> username;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">String</span> password;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">String</span> protocol = <span class="string">"smtp"</span>;</span><br><span class="line">   <span class="keyword">private</span> Charset defaultEncoding;</span><br><span class="line">   <span class="keyword">private</span> Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; properties;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">String</span> jndiName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3、配置文件：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.mail.username</span>=<span class="number">1111</span>@qq.com</span><br><span class="line"><span class="attr">spring.mail.password</span>=你的qq授权码</span><br><span class="line"><span class="attr">spring.mail.host</span>=smtp.qq.com</span><br><span class="line"><span class="comment"># qq需要配置ssl</span></span><br><span class="line"><span class="attr">spring.mail.properties.mail.smtp.ssl.enable</span>=<span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>获取授权码：在QQ邮箱中的设置-&gt;账户-&gt;开启pop3和smtp服务<br>4、Spring单元测试</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">JavaMailSenderImpl mailSender;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">public void context<span class="constructor">Loads()</span> &#123;</span><br><span class="line">   <span class="comment">//邮件设置1：一个简单的邮件</span></span><br><span class="line">   SimpleMailMessage message = <span class="keyword">new</span> <span class="constructor">SimpleMailMessage()</span>;</span><br><span class="line">   message.set<span class="constructor">Subject(<span class="string">"通知"</span>)</span>;</span><br><span class="line">   message.set<span class="constructor">Text(<span class="string">"今晚7:30开会"</span>)</span>;</span><br><span class="line"></span><br><span class="line">   message.set<span class="constructor">To(<span class="string">"1111@qq.com"</span>)</span>;</span><br><span class="line">   message.set<span class="constructor">From(<span class="string">"1111@qq.com"</span>)</span>;</span><br><span class="line">   mailSender.send(message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">public void context<span class="constructor">Loads2()</span> throws MessagingException &#123;</span><br><span class="line">   <span class="comment">//邮件设置2：一个复杂的邮件</span></span><br><span class="line">   MimeMessage mimeMessage = mailSender.create<span class="constructor">MimeMessage()</span>;</span><br><span class="line">   MimeMessageHelper helper = <span class="keyword">new</span> <span class="constructor">MimeMessageHelper(<span class="params">mimeMessage</span>, <span class="params">true</span>)</span>;</span><br><span class="line"></span><br><span class="line">   helper.set<span class="constructor">Subject(<span class="string">"通知"</span>)</span>;</span><br><span class="line">   helper.set<span class="constructor">Text(<span class="string">"&lt;b style='color:red'&gt;今天 7:30来开会&lt;/b&gt;"</span>,<span class="params">true</span>)</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//发送附件</span></span><br><span class="line">   helper.add<span class="constructor">Attachment(<span class="string">"1.jpg"</span>,<span class="params">new</span> File(<span class="string">""</span>)</span>);</span><br><span class="line">   helper.add<span class="constructor">Attachment(<span class="string">"2.jpg"</span>,<span class="params">new</span> File(<span class="string">""</span>)</span>);</span><br><span class="line"></span><br><span class="line">   helper.set<span class="constructor">To(<span class="string">"1111@qq.com"</span>)</span>;</span><br><span class="line">   helper.set<span class="constructor">From(<span class="string">"1111@qq.com"</span>)</span>;</span><br><span class="line"></span><br><span class="line">   mailSender.send(mimeMessage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot-整合JDBC</title>
    <url>/2020/08/25/SpringBoot-%E6%95%B4%E5%90%88JDBC/</url>
    <content><![CDATA[<h1 id="SpringData简介"><a href="#SpringData简介" class="headerlink" title="SpringData简介"></a>SpringData简介</h1><p>对于数据访问层，无论是 SQL(关系型数据库) 还是 NOSQL(非关系型数据库)，Spring Boot 底层都是采用 Spring Data 的方式进行统一处理。    </p>
<p>Spring Boot 底层都是采用 Spring Data 的方式进行统一处理各种数据库，Spring Data 也是 Spring 中与 Spring Boot、Spring Cloud 等齐名的知名项目。    </p>
<a id="more"></a>
<h1 id="整合JDBC"><a href="#整合JDBC" class="headerlink" title="整合JDBC"></a>整合JDBC</h1><p>1、新建一个项目测试，引入相应的模块（Spring Web，JDBC API， MySQL Driver）。<br>2、项目建好之后，发现自动帮我们导入了如下的启动器：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>3、编写yaml配置文件连接数据库；</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="comment">#?serverTimezone=UTC解决时区的报错</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/springboot?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure>
<p>4、配置完这一些东西后，我们就可以直接去使用了，因为SpringBoot已经默认帮我们进行了自动配置    </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpringbootDataJdbcApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//DI注入数据源</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="comment">//看一下默认数据源</span></span><br><span class="line">        System.out.println(dataSource.getClass());</span><br><span class="line">        <span class="comment">//获得连接</span></span><br><span class="line">        Connection connection =   dataSource.getConnection();</span><br><span class="line">        System.out.println(connection);</span><br><span class="line">        <span class="comment">//关闭连接</span></span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果：我们可以看到他默认给我们配置的数据源为 : class com.zaxxer.hikari.HikariDataSource ， 我们并没有手动配置    </p>
<p>我们来全局搜索一下，找到数据源的所有自动配置都在 ：DataSourceAutoConfiguration文件：</p>
<figure class="highlight d"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@Import</span>(</span><br><span class="line">    &#123;Hikari.<span class="keyword">class</span>, Tomcat.<span class="keyword">class</span>, Dbcp2.<span class="keyword">class</span>, Generic.<span class="keyword">class</span>, DataSourceJmxConfiguration.<span class="keyword">class</span>&#125;</span><br><span class="line">)</span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">class</span> PooledDataSourceConfiguration &#123;</span><br><span class="line">    <span class="keyword">protected</span> PooledDataSourceConfiguration() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里导入的类都在 DataSourceConfiguration 配置类下，可以看出 Spring Boot 2.2.5 默认使用HikariDataSource 数据源，而以前版本，如 Spring Boot 1.5 默认使用 org.apache.tomcat.jdbc.pool.DataSource 作为数据源；<br>HikariDataSource 号称 Java WEB 当前速度最快的数据源，相比于传统的 C3P0 、DBCP、Tomcat jdbc 等连接池更加优秀；    </p>
<p>可以使用 spring.datasource.type 指定自定义的数据源类型，值为 要使用的连接池实现的完全限定名。    </p>
<p>关于数据源我们并不做介绍，有了数据库连接，显然就可以 CRUD 操作数据库了。但是我们需要先了解一个对象 JdbcTemplate    </p>
<h1 id="JDBCTemplate"><a href="#JDBCTemplate" class="headerlink" title="JDBCTemplate"></a>JDBCTemplate</h1><ol>
<li>有了数据源(com.zaxxer.hikari.HikariDataSource)，然后可以拿到数据库连接(java.sql.Connection)，有了连接，就可以使用原生的 JDBC 语句来操作数据库；    </li>
<li>即使不使用第三方第数据库操作框架，如 MyBatis等，Spring 本身也对原生的JDBC 做了轻量级的封装，即JdbcTemplate。    </li>
<li>数据库操作的所有 CRUD 方法都在 JdbcTemplate 中。    </li>
<li>Spring Boot 不仅提供了默认的数据源，同时默认已经配置好了JdbcTemplate 放在了容器中，程序员只需自己注入即可使用</li>
<li>JdbcTemplate 的自动配置是依赖org.springframework.boot.autoconfigure.jdbc 包下的JdbcTemplateConfiguration 类        </li>
</ol>
<p>JdbcTemplate主要提供以下几类方法：    </p>
<ol>
<li>execute方法：可以用于执行任何SQL语句，一般用于执行DDL语句；</li>
<li>update方法及batchUpdate方法：update方法用于执行新增、修改、删除等语句；batchUpdate方法用于执行批处理相关语句；</li>
<li>query方法及queryForXXX方法：用于执行查询相关语句；</li>
<li>call方法：用于执行存储过程、函数相关语句。    </li>
</ol>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>编写一个Controller，注入 jdbcTemplate，编写测试方法进行访问测试；</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.<span class="keyword">factory</span>.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.<span class="built_in">List</span>;</span><br><span class="line"><span class="keyword">import</span> java.util.<span class="built_in">Map</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/jdbc"</span>)</span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">JdbcController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>Spring Boot 默认提供了数据源，默认提供了 org.springframework.jdbc.core.JdbcTemplate</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>JdbcTemplate 中会自己注入数据源，用于简化 JDBC操作</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>还能避免一些常见的错误,使用起来也不用再自己来关闭数据库连接</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     */</span></span></span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询employee表中所有数据</span></span><br><span class="line">    <span class="comment">//List 中的1个 Map 对应数据库的 1行数据</span></span><br><span class="line">    <span class="comment">//Map 中的 key 对应数据库的字段名，value 对应数据库的字段值</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/list"</span>)</span><br><span class="line">    public <span class="built_in">List</span>&lt;<span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">Object</span>&gt;&gt; userList()&#123;</span><br><span class="line">        <span class="built_in">String</span> sql = <span class="string">"select * from employee"</span>;</span><br><span class="line">        <span class="built_in">List</span>&lt;<span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">Object</span>&gt;&gt; maps = jdbcTemplate.queryForList(sql);</span><br><span class="line">        <span class="keyword">return</span> maps;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//新增一个用户</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/add"</span>)</span><br><span class="line">    public <span class="built_in">String</span> addUser()&#123;</span><br><span class="line">        <span class="comment">//插入语句，注意时间问题</span></span><br><span class="line">        <span class="built_in">String</span> sql = <span class="string">"insert into employee(last_name, email,gender,department,birth)"</span> +</span><br><span class="line">                <span class="string">" values ('FBK','123@qq.com',1,101,'"</span>+ <span class="keyword">new</span> Date().toLocaleString() +<span class="string">"')"</span>;</span><br><span class="line">        jdbcTemplate.update(sql);</span><br><span class="line">        <span class="comment">//查询</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"addOk"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改用户信息</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/update/&#123;id&#125;"</span>)</span><br><span class="line">    public <span class="built_in">String</span> updateUser(<span class="meta">@PathVariable</span>(<span class="string">"id"</span>) <span class="built_in">int</span> id)&#123;</span><br><span class="line">        <span class="comment">//插入语句</span></span><br><span class="line">        <span class="built_in">String</span> sql = <span class="string">"update employee set last_name=?,email=? where id="</span>+id;</span><br><span class="line">        <span class="comment">//数据</span></span><br><span class="line">        <span class="built_in">Object</span>[] objects = <span class="keyword">new</span> <span class="built_in">Object</span>[<span class="number">2</span>];</span><br><span class="line">        objects[<span class="number">0</span>] = <span class="string">"FBK"</span>;</span><br><span class="line">        objects[<span class="number">1</span>] = <span class="string">"123@sina.com"</span>;</span><br><span class="line">        jdbcTemplate.update(sql,objects);</span><br><span class="line">        <span class="comment">//查询</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"updateOk"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除用户</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/delete/&#123;id&#125;"</span>)</span><br><span class="line">    public <span class="built_in">String</span> delUser(<span class="meta">@PathVariable</span>(<span class="string">"id"</span>) <span class="built_in">int</span> id)&#123;</span><br><span class="line">        <span class="comment">//插入语句</span></span><br><span class="line">        <span class="built_in">String</span> sql = <span class="string">"delete from employee where id=?"</span>;</span><br><span class="line">        jdbcTemplate.update(sql,id);</span><br><span class="line">        <span class="comment">//查询</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"deleteOk"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot-整合Druid</title>
    <url>/2020/08/25/SpringBoot-%E6%95%B4%E5%90%88Druid/</url>
    <content><![CDATA[<h1 id="Druid简介"><a href="#Druid简介" class="headerlink" title="Druid简介"></a>Druid简介</h1><p>Java程序很大一部分要操作数据库，为了提高性能操作数据库的时候，又不得不使用数据库连接池。    </p>
<p>Druid 是阿里巴巴开源平台上一个数据库连接池实现，结合了 C3P0、DBCP 等 DB 池的优点，同时加入了日志监控。    </p>
<p>Druid 可以很好的监控 DB 池连接和 SQL 的执行情况，天生就是针对监控而生的 DB 连接池。    </p>
<p>Druid已经在阿里巴巴部署了超过600个应用，经过一年多生产环境大规模部署的严苛考验。    </p>
<p>Spring Boot 2.0 以上默认使用 Hikari 数据源，可以说 Hikari 与 Driud 都是当前 Java Web 上最优秀的数据源。</p>
<a id="more"></a>
<h1 id="配置数据源"><a href="#配置数据源" class="headerlink" title="配置数据源"></a>配置数据源</h1><p>1、添加上 Druid 数据源依赖。    </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>2、切换数据源；之前已经说过 Spring Boot 2.0 以上默认使用 com.zaxxer.hikari.HikariDataSource 数据源，但可以 通过 spring.datasource.type 指定数据源。    </p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="attribute">spring</span>:</span><br><span class="line">  <span class="attribute">datasource</span>:</span><br><span class="line">    <span class="attribute">username</span>: root</span><br><span class="line">    <span class="attribute">password</span>: <span class="number">123456</span></span><br><span class="line">    <span class="attribute">url</span>: <span class="attribute">jdbc</span>:<span class="attribute">mysql</span>:<span class="comment">//localhost:3306/springboot?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class="line">    <span class="attribute">driver-class-name</span>: com.mysql.cj.jdbc.Driver</span><br><span class="line">    <span class="attribute">type</span>: com.alibaba.druid.pool.DruidDataSource # 自定义数据源</span><br></pre></td></tr></table></figure>
<p>3、数据源切换之后，在测试类中注入 DataSource，然后获取到它，输出一看便知是否成功切换；<br>4、可以设置数据源连接初始化大小、最大连接数、等待时间、最小连接数 等设置项；可以查看源码    </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="comment">#?serverTimezone=UTC解决时区的报错</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/springboot?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#Spring Boot 默认是不注入这些属性值的，需要自己绑定</span></span><br><span class="line">    <span class="comment">#druid 数据源专有配置</span></span><br><span class="line">    <span class="attr">initialSize:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">minIdle:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">maxActive:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">maxWait:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">minEvictableIdleTimeMillis:</span> <span class="number">300000</span></span><br><span class="line">    <span class="attr">validationQuery:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br><span class="line">    <span class="attr">testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">testOnReturn:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">poolPreparedStatements:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#配置监控统计拦截的filters，stat:监控统计、log4j：日志记录、wall：防御sql注入</span></span><br><span class="line">    <span class="comment">#如果允许时报错  java.lang.ClassNotFoundException: org.apache.log4j.Priority</span></span><br><span class="line">    <span class="comment">#则导入 log4j 依赖即可，Maven 地址：https://mvnrepository.com/artifact/log4j/log4j</span></span><br><span class="line">    <span class="attr">filters:</span> <span class="string">stat,wall,log4j</span></span><br><span class="line">    <span class="attr">maxPoolPreparedStatementPerConnectionSize:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">useGlobalDataSourceStat:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">connectionProperties:</span> <span class="string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span></span><br></pre></td></tr></table></figure>
<p>5、导入Log4j 的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/log4j/log4j --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>6、现在需要程序员自己为 DruidDataSource 绑定全局配置文件中的参数，再添加到容器中，而不再使用 Spring Boot 的自动生成了；我们需要 自己添加 DruidDataSource 组件到容器中，并绑定属性；</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">import com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line">import org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line">import org.springframework.context.<span class="keyword">annotation</span>.<span class="title">Bean</span>;</span><br><span class="line">import org.springframework.context.<span class="keyword">annotation</span>.<span class="title">Configuration</span>;</span><br><span class="line"></span><br><span class="line">import javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">DruidConfig</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">       将自定义的 Druid数据源添加到容器中，不再让 Spring Boot 自动创建</span><br><span class="line">       绑定全局配置文件中的 druid 数据源属性到 com.alibaba.druid.pool.DruidDataSource从而让它们生效</span><br><span class="line">       @ConfigurationProperties(prefix = <span class="string">"spring.datasource"</span>)：作用就是将 全局配置文件中</span><br><span class="line">       前缀为 spring.datasource的属性值注入到 com.alibaba.druid.pool.DruidDataSource 的同名参数中</span><br><span class="line">     *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">    @ConfigurationProperties(prefix = "spring.datasource")</span></span><br><span class="line"><span class="regexp">    @Bean</span></span><br><span class="line"><span class="regexp">    public DataSource druidDataSource() &#123;</span></span><br><span class="line"><span class="regexp">        return new DruidDataSource();</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>
<p>7、测试</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">@SpringBootTest</span><br><span class="line"><span class="keyword">class</span> SpringbootDataJdbcApplicationTests &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//DI注入数据源</span></span><br><span class="line">    @Autowired</span><br><span class="line">    DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void context<span class="constructor">Loads()</span> throws SQLException &#123;</span><br><span class="line">        <span class="comment">//看一下默认数据源</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(dataSource.get<span class="constructor">Class()</span>);</span><br><span class="line">        <span class="comment">//获得连接</span></span><br><span class="line">        Connection connection =   dataSource.get<span class="constructor">Connection()</span>;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(connection);</span><br><span class="line"></span><br><span class="line">        DruidDataSource druidDataSource = (DruidDataSource) dataSource;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"druidDataSource 数据源最大连接数："</span> + druidDataSource.get<span class="constructor">MaxActive()</span>);</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"druidDataSource 数据源初始化连接数："</span> + druidDataSource.get<span class="constructor">InitialSize()</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭连接</span></span><br><span class="line">        connection.close<span class="literal">()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="配置Druid数据源监控"><a href="#配置Druid数据源监控" class="headerlink" title="配置Druid数据源监控"></a>配置Druid数据源监控</h1><p>Druid 数据源具有监控的功能，并提供了一个 web 界面方便用户查看，类似安装 路由器 时，人家也提供了一个默认的 web 页面。<br>所以第一步需要设置 Druid 的后台管理页面，比如 登录账号、密码 等；配置后台管理；    </p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">//配置 Druid 监控管理后台的Servlet；</span></span><br><span class="line"><span class="comment">//内置 Servlet 容器时没有web.xml文件，所以使用 Spring Boot 的注册 Servlet 方式</span></span><br><span class="line">@Bean</span><br><span class="line"><span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">statViewServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ServletRegistrationBean bean = <span class="keyword">new</span> ServletRegistrationBean(<span class="keyword">new</span> StatViewServlet(), <span class="string">"/druid/*"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这些参数可以在 com.alibaba.druid.support.http.StatViewServlet </span></span><br><span class="line">    <span class="comment">// 的父类 com.alibaba.druid.support.http.ResourceServlet 中找到</span></span><br><span class="line">    Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; initParams = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    initParams.<span class="built_in">put</span>(<span class="string">"loginUsername"</span>, <span class="string">"admin"</span>); <span class="comment">//后台管理界面的登录账号</span></span><br><span class="line">    initParams.<span class="built_in">put</span>(<span class="string">"loginPassword"</span>, <span class="string">"123456"</span>); <span class="comment">//后台管理界面的登录密码</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//后台允许谁可以访问</span></span><br><span class="line">    <span class="comment">//initParams.put("allow", "localhost")：表示只有本机可以访问</span></span><br><span class="line">    <span class="comment">//initParams.put("allow", "")：为空或者为null时，表示允许所有访问</span></span><br><span class="line">    initParams.<span class="built_in">put</span>(<span class="string">"allow"</span>, <span class="string">""</span>);</span><br><span class="line">    <span class="comment">//deny：Druid 后台拒绝谁访问</span></span><br><span class="line">    <span class="comment">//initParams.put("kuangshen", "192.168.1.20");表示禁止此ip访问</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置初始化参数</span></span><br><span class="line">    bean.setInitParameters(initParams);</span><br><span class="line">    <span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>配置完毕后，我们可以选择访问 ：<a href="http://localhost:8080/druid/login.html" target="_blank" rel="noopener">http://localhost:8080/druid/login.html</a></p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot-整合MyBatis</title>
    <url>/2020/08/26/SpringBoot-%E6%95%B4%E5%90%88MyBatis/</url>
    <content><![CDATA[<h1 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h1><p>1、导入 MyBatis 所需要的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>2、配置数据库连接信息</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="comment">#?serverTimezone=UTC解决时区的报错</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/springboot?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#Spring Boot 默认是不注入这些属性值的，需要自己绑定</span></span><br><span class="line">    <span class="comment">#druid 数据源专有配置</span></span><br><span class="line">    <span class="attr">initialSize:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">minIdle:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">maxActive:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">maxWait:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">minEvictableIdleTimeMillis:</span> <span class="number">300000</span></span><br><span class="line">    <span class="attr">validationQuery:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br><span class="line">    <span class="attr">testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">testOnReturn:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">poolPreparedStatements:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#配置监控统计拦截的filters，stat:监控统计、log4j：日志记录、wall：防御sql注入</span></span><br><span class="line">    <span class="comment">#如果允许时报错  java.lang.ClassNotFoundException: org.apache.log4j.Priority</span></span><br><span class="line">    <span class="comment">#则导入 log4j 依赖即可，Maven 地址：https://mvnrepository.com/artifact/log4j/log4j</span></span><br><span class="line">    <span class="attr">filters:</span> <span class="string">stat,wall,log4j</span></span><br><span class="line">    <span class="attr">maxPoolPreparedStatementPerConnectionSize:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">useGlobalDataSourceStat:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">connectionProperties:</span> <span class="string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span></span><br></pre></td></tr></table></figure>
<p>3、测试<br>4、创建实体类，导入 Lombok</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="meta"><span class="meta-keyword">import</span> lombok.AllArgsConstructor;</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> lombok.Data;</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> lombok.NoArgsConstructor;</span></span><br><span class="line"></span><br><span class="line">@Data</span><br><span class="line">@NoArgsConstructor</span><br><span class="line">@AllArgsConstructor</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Department</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String departmentName;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>5、创建mapper目录以及对应的 Mapper 接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@Mapper : 表示本类是一个 MyBatis 的 Mapper</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DepartmentMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取所有部门信息</span></span><br><span class="line">    <span class="function">List&lt;Department&gt; <span class="title">getDepartments</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过id获得部门</span></span><br><span class="line">    <span class="function">Department <span class="title">getDepartment</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>6、对应的Mapper映射文件</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span></span><br><span class="line"><span class="xml">        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="xml">        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.fbk.mapper.DepartmentMapper"</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getDepartments"</span> <span class="attr">resultType</span>=<span class="string">"Department"</span>&gt;</span></span></span><br><span class="line"><span class="xml">       select * from department;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getDepartment"</span> <span class="attr">resultType</span>=<span class="string">"Department"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span>&gt;</span></span></span><br><span class="line"><span class="xml">       select * from department where id = #</span><span class="template-variable">&#123;id&#125;</span><span class="xml">;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>7、maven配置资源过滤问题</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>8、测试</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@RestController</span></span><br><span class="line">public class DepartmentController &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="variable">@Autowired</span></span><br><span class="line">    DepartmentMapper departmentMapper;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 查询全部部门</span></span><br><span class="line">    <span class="variable">@GetMapping</span>(<span class="string">"/getDepartments"</span>)</span><br><span class="line">    public List&lt;Department&gt; getDepartments()&#123;</span><br><span class="line">        <span class="selector-tag">return</span> <span class="selector-tag">departmentMapper</span><span class="selector-class">.getDepartments</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询全部部门</span></span><br><span class="line">    @<span class="selector-tag">GetMapping</span>(<span class="string">"/getDepartment/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="selector-tag">public</span> <span class="selector-tag">Department</span> <span class="selector-tag">getDepartment</span>(<span class="variable">@PathVariable</span>(<span class="string">"id"</span>) Integer id)&#123;</span><br><span class="line">        <span class="selector-tag">return</span> <span class="selector-tag">departmentMapper</span><span class="selector-class">.getDepartment</span>(id);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot-自动配置原理 </title>
    <url>/2020/08/22/SpringBoot-%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h1 id="分析自动配置原理"><a href="#分析自动配置原理" class="headerlink" title="分析自动配置原理"></a>分析自动配置原理</h1><p>我们以HttpEncodingAutoConfiguration（Http编码自动配置）为例解释自动配置原理；    </p>
<a id="more"></a>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//表示这是一个配置类，和以前编写的配置文件一样，也可以给容器中添加组件；</span></span><br><span class="line"><span class="meta">@Configuration</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">//启动指定类的ConfigurationProperties功能；</span></span><br><span class="line">  <span class="comment">//进入这个HttpProperties查看，将配置文件中对应的值和HttpProperties绑定起来；</span></span><br><span class="line">  <span class="comment">//并把HttpProperties加入到ioc容器中</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(&#123;HttpProperties.class&#125;)</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">//Spring底层@Conditional注解</span></span><br><span class="line">  <span class="comment">//根据不同的条件判断，如果满足指定的条件，整个配置类里面的配置就会生效；</span></span><br><span class="line">  <span class="comment">//这里的意思就是判断当前应用是否是web应用，如果是，当前配置类生效</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication(</span></span><br><span class="line"><span class="meta">    type = Type.SERVLET</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//判断当前项目有没有这个类CharacterEncodingFilter；SpringMVC中进行乱码解决的过滤器；</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123;CharacterEncodingFilter.class&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//判断配置文件中是否存在某个配置：spring.http.encoding.enabled；</span></span><br><span class="line">  <span class="comment">//如果不存在，判断也是成立的</span></span><br><span class="line">  <span class="comment">//即使我们配置文件中不配置pring.http.encoding.enabled=true，也是默认生效的；</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(</span></span><br><span class="line"><span class="meta">    prefix = <span class="meta-string">"spring.http.encoding"</span>,</span></span><br><span class="line"><span class="meta">    value = &#123;<span class="meta-string">"enabled"</span>&#125;,</span></span><br><span class="line"><span class="meta">    matchIfMissing = true</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpEncodingAutoConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="comment">//他已经和SpringBoot的配置文件映射了</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Encoding properties;</span><br><span class="line">    <span class="comment">//只有一个有参构造器的情况下，参数的值就会从容器中拿</span></span><br><span class="line">    <span class="keyword">public</span> HttpEncodingAutoConfiguration(HttpProperties properties) &#123;</span><br><span class="line">        <span class="keyword">this</span>.properties = properties.getEncoding();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//给容器中添加一个组件，这个组件的某些值需要从properties中获取</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span> <span class="comment">//判断容器没有这个组件？</span></span><br><span class="line">    <span class="keyword">public</span> CharacterEncodingFilter characterEncodingFilter() &#123;</span><br><span class="line">        CharacterEncodingFilter filter = new OrderedCharacterEncodingFilter();</span><br><span class="line">        filter.setEncoding(<span class="keyword">this</span>.properties.getCharset().name());</span><br><span class="line">        filter.setForceRequestEncoding(<span class="keyword">this</span>.properties.shouldForce(org.springframework.boot.autoconfigure.http.HttpProperties.Encoding.Type.REQUEST));</span><br><span class="line">        filter.setForceResponseEncoding(<span class="keyword">this</span>.properties.shouldForce(org.springframework.boot.autoconfigure.http.HttpProperties.Encoding.Type.RESPONSE));</span><br><span class="line">        <span class="keyword">return</span> filter;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//。。。。。。。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>一句话总结 ：根据当前不同的条件判断，决定这个配置类是否生效</strong>    </p>
<ol>
<li>一但这个配置类生效；这个配置类就会给容器中添加各种组件；    </li>
<li>这些组件的属性是从对应的properties类中获取的，这些类里面的每一个属性又是和配置文件绑定的；    </li>
<li>所有在配置文件中能配置的属性都是在xxxxProperties类中封装着；    </li>
<li>配置文件能配置什么就可以参照某个功能对应的这个属性类    <figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//从配置文件中获取指定的值和bean的属性进行绑定</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = <span class="meta-string">"spring.http"</span>)</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpProperties</span> </span>&#123;</span><br><span class="line">    <span class="comment">// .....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h1 id="精髓"><a href="#精髓" class="headerlink" title="精髓"></a>精髓</h1><p>1、SpringBoot启动会加载大量的自动配置类<br>2、我们看我们需要的功能有没有在SpringBoot默认写好的自动配置类当中；<br>3、我们再来看这个自动配置类中到底配置了哪些组件；（只要我们要用的组件存在在其中，我们就不需要再手动配置了）<br>4、给容器中自动配置类添加组件的时候，会从properties类中获取某些属性。我们只需要在配置文件中指定这些属性的值即可；<br>xxxxAutoConfigurartion：自动配置类；给容器中添加组件<br>xxxxProperties:封装配置文件中相关属性；    </p>
<h1 id="Conditional"><a href="#Conditional" class="headerlink" title="@Conditional"></a>@Conditional</h1><p>自动配置类必须在一定的条件下才能生效；    </p>
<p>@ConditionalOnXXXXXXX作用：必须是@Conditional指定的条件成立，才给容器中添加组件，配置配里面的所有内容才生效；    </p>
<p>那么多的自动配置类，必须在一定的条件下才能生效；也就是说，我们加载了这么多的配置类，但不是所有的都生效了。    </p>
<p>可以通过启用 debug=true属性；来让控制台打印自动配置报告，这样我们就可以很方便的知道哪些自动配置类生效；    </p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment">#开启springboot的调试类</span></span><br><span class="line"><span class="attr">debug</span>=<span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>Positive matches:（自动配置类启用的：正匹配）<br>Negative matches:（没有启动，没有匹配成功的自动配置类：负匹配）<br>Unconditional classes: （没有条件的类）</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot-概述</title>
    <url>/2020/08/19/SpringBoot-%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<h1 id="回顾-Spring"><a href="#回顾-Spring" class="headerlink" title="回顾 Spring"></a>回顾 Spring</h1><h2 id="什么是Spring"><a href="#什么是Spring" class="headerlink" title="什么是Spring?"></a>什么是Spring?</h2><p>Spring是一个开源框架，2003 年兴起的一个轻量级的Java 开发框架，作者：Rod Johnson 。<br><strong>Spring是为了解决企业级应用开发的复杂性而创建的，简化开发</strong></p>
<h2 id="Spring是如何简化Java开发的"><a href="#Spring是如何简化Java开发的" class="headerlink" title="Spring是如何简化Java开发的"></a>Spring是如何简化Java开发的</h2><p>为了降低Java开发的复杂性，Spring采用了以下4种关键策略：<br>1、基于POJO的轻量级和最小侵入性编程，所有东西都是bean;<br>2、通过IOC，依赖注入（DI）和面向接口实现松耦合;<br>3、基于切面（AOP）和惯例进行声明式编程;<br>4、通过切面和模版减少样式代码，RedisTemplate，xxxTemplate;    </p>
<a id="more"></a>
<h1 id="什么是SpringBoot"><a href="#什么是SpringBoot" class="headerlink" title="什么是SpringBoot"></a>什么是SpringBoot</h1><p>&emsp;&emsp;SpringBoot就是一个javaweb的开发框架，和SpringMVC类似，对比其他javaweb框架的好处，官方说是简化开发，约定大于配置，  you can “just run”，能迅速的开发web应用，几行代码开发一个http接口。<br>&emsp;&emsp;Spring Boot 基于 Spring 开发，Spirng Boot 本身并不提供 Spring 框架的核心特性以及扩展功能，只是用于快速、敏捷地开发新一代基于 Spring 框架的应用程序。也就是说，它并不是用来替代 Spring 的解决方案，而是和 Spring 框架紧密结合用于提升 Spring 开发者体验的工具。Spring Boot 以约定大于配置的核心思想，默认帮我们进行了很多设置，多数 Spring Boot 应用只需要很少的 Spring 配置。同时它集成了大量常用的第三方库配置（例如 Redis、MongoDB、Jpa、RabbitMQ、Quartz 等等），Spring Boot 应用中这些第三方库几乎可以零配置的开箱即用。<br>&emsp;&emsp;简单来说就是SpringBoot其实不是什么新的框架，它默认配置了很多框架的使用方式，就像maven整合了所有的jar包，spring boot整合了所有的框架 。</p>
<h2 id="Spring-Boot的主要优点："><a href="#Spring-Boot的主要优点：" class="headerlink" title="Spring Boot的主要优点："></a>Spring Boot的主要优点：</h2><p>1、为所有Spring开发者更快的入门<br>2、开箱即用，提供各种默认配置来简化项目配置<br>3、内嵌式容器简化Web项目<br>4、没有冗余代码生成和XML配置的要求</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot-集成SpringSecurity </title>
    <url>/2020/08/26/SpringBoot-%E9%9B%86%E6%88%90SpringSecurity/</url>
    <content><![CDATA[<h1 id="SpringSecurity简介"><a href="#SpringSecurity简介" class="headerlink" title="SpringSecurity简介"></a>SpringSecurity简介</h1><p>Spring Security 是针对Spring项目的安全框架，也是Spring Boot底层安全模块默认的技术选型，他可以实现强大的Web安全控制，对于安全控制，我们仅需要引入 spring-boot-starter-security 模块，进行少量的配置，即可实现强大的安全管理！    </p>
<a id="more"></a>
<p>记住几个类：<br>WebSecurityConfigurerAdapter：自定义Security策略<br>AuthenticationManagerBuilder：自定义认证策略<br>@EnableWebSecurity：开启WebSecurity模式    </p>
<p>Spring Security的两个主要目标是 “认证” 和 “授权”（访问控制）。<br><strong>“认证”（Authentication）</strong><br>身份验证是关于验证您的凭据，如用户名/用户ID和密码，以验证您的身份。<br>身份验证通常通过用户名和密码完成，有时与身份验证因素结合使用。<br><strong>“授权” （Authorization）</strong><br>授权发生在系统成功验证您的身份后，最终会授予您访问资源（如信息，文件，数据库，资金，位置，几乎任何内容）的完全权限。<br>这个概念是通用的，而不是只在Spring Security 中存在。</p>
<h1 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h1><p>1、新建一个初始的springboot项目web模块，thymeleaf模块<br>2、导入静态资源<br>3、controller跳转</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.<span class="keyword">annotation</span>.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.<span class="keyword">annotation</span>.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RouterController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping(&#123;<span class="meta-string">"/"</span>,<span class="meta-string">"/index"</span>&#125;)</span></span><br><span class="line">   <span class="keyword">public</span> String index()&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping(<span class="meta-string">"/toLogin"</span>)</span></span><br><span class="line">   <span class="keyword">public</span> String toLogin()&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">"views/login"</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping(<span class="meta-string">"/level1/&#123;id&#125;"</span>)</span></span><br><span class="line">   <span class="keyword">public</span> String level1(<span class="meta">@PathVariable(<span class="meta-string">"id"</span>)</span> int id)&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">"views/level1/"</span>+id;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping(<span class="meta-string">"/level2/&#123;id&#125;"</span>)</span></span><br><span class="line">   <span class="keyword">public</span> String level2(<span class="meta">@PathVariable(<span class="meta-string">"id"</span>)</span> int id)&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">"views/level2/"</span>+id;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping(<span class="meta-string">"/level3/&#123;id&#125;"</span>)</span></span><br><span class="line">   <span class="keyword">public</span> String level3(<span class="meta">@PathVariable(<span class="meta-string">"id"</span>)</span> int id)&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">"views/level3/"</span>+id;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>4、认证和授权，引入 Spring Security 模块</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>5、编写 Spring Security 配置类</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">import org.springframework.security.config.<span class="keyword">annotation</span>.<span class="title">web</span>.<span class="title">builders</span>.<span class="title">HttpSecurity</span>;</span><br><span class="line">import org.springframework.security.config.<span class="keyword">annotation</span>.<span class="title">web</span>.<span class="title">configuration</span>.<span class="title">EnableWebSecurity</span>;</span><br><span class="line">import org.springframework.security.config.<span class="keyword">annotation</span>.<span class="title">web</span>.<span class="title">configuration</span>.<span class="title">WebSecurityConfigurerAdapter</span>;</span><br><span class="line"></span><br><span class="line">@EnableWebSecurity /<span class="regexp">/ 开启WebSecurity模式</span></span><br><span class="line"><span class="regexp">public class SecurityConfig extends WebSecurityConfigurerAdapter &#123;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">   @Override</span></span><br><span class="line"><span class="regexp">   protected void configure(HttpSecurity http) throws Exception &#123;</span></span><br><span class="line"><span class="regexp">       </span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>
<p>6、定制请求的授权规则</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@Override</span></span><br><span class="line">protected void configure(HttpSecurity http) throws Exception &#123;</span><br><span class="line">   <span class="comment">// 定制请求的授权规则</span></span><br><span class="line">   <span class="comment">// 首页所有人可以访问</span></span><br><span class="line">   <span class="selector-tag">http</span><span class="selector-class">.authorizeRequests</span>()<span class="selector-class">.antMatchers</span>(<span class="string">"/"</span>)<span class="selector-class">.permitAll</span>()</span><br><span class="line">  <span class="selector-class">.antMatchers</span>(<span class="string">"/level1/**"</span>)<span class="selector-class">.hasRole</span>(<span class="string">"vip1"</span>)</span><br><span class="line">  <span class="selector-class">.antMatchers</span>(<span class="string">"/level2/**"</span>)<span class="selector-class">.hasRole</span>(<span class="string">"vip2"</span>)</span><br><span class="line">  <span class="selector-class">.antMatchers</span>(<span class="string">"/level3/**"</span>)<span class="selector-class">.hasRole</span>(<span class="string">"vip3"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>7、在configure()方法中加入以下配置，开启自动配置的登录功能</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="string">//</span> 开启自动配置的登录功能</span><br><span class="line"><span class="string">//</span> <span class="string">/login</span> 请求来到登录页</span><br><span class="line"><span class="string">//</span> <span class="string">/login</span>?error 重定向到这里表示登录失败</span><br><span class="line">http.formLogin<span class="params">()</span>;</span><br></pre></td></tr></table></figure>
<p>8、定义认证规则，重写configure(AuthenticationManagerBuilder auth)方法</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义认证规则</span></span><br><span class="line"><span class="variable">@Override</span></span><br><span class="line">protected void configure(AuthenticationManagerBuilder auth) throws Exception &#123;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">//在内存中定义，也可以在jdbc中去拿....</span></span><br><span class="line">   <span class="selector-tag">auth</span><span class="selector-class">.inMemoryAuthentication</span>()</span><br><span class="line">          <span class="selector-class">.withUser</span>(<span class="string">"kuangshen"</span>)<span class="selector-class">.password</span>(<span class="string">"123456"</span>)<span class="selector-class">.roles</span>(<span class="string">"vip2"</span>,<span class="string">"vip3"</span>)</span><br><span class="line">          <span class="selector-class">.and</span>()</span><br><span class="line">          <span class="selector-class">.withUser</span>(<span class="string">"root"</span>)<span class="selector-class">.password</span>(<span class="string">"123456"</span>)<span class="selector-class">.roles</span>(<span class="string">"vip1"</span>,<span class="string">"vip2"</span>,<span class="string">"vip3"</span>)</span><br><span class="line">          <span class="selector-class">.and</span>()</span><br><span class="line">          <span class="selector-class">.withUser</span>(<span class="string">"guest"</span>)<span class="selector-class">.password</span>(<span class="string">"123456"</span>)<span class="selector-class">.roles</span>(<span class="string">"vip1"</span>,<span class="string">"vip2"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>9、测试，我们可以使用这些账号登录进行测试，发现会报错。原因，我们要将前端传过来的密码进行某种方式加密，否则就无法登录，修改代码</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义认证规则</span></span><br><span class="line">@Override</span><br><span class="line">protected void configure(AuthenticationManagerBuilder auth) throws Exception &#123;</span><br><span class="line">   <span class="comment">//在内存中定义，也可以在jdbc中去拿....</span></span><br><span class="line">   <span class="comment">//Spring security 5.0中新增了多种加密方式，也改变了密码的格式。</span></span><br><span class="line">   <span class="comment">//要想我们的项目还能够正常登陆，需要修改一下configure中的代码。我们要将前端传过来的密码进行某种方式加密</span></span><br><span class="line">   <span class="comment">//spring security 官方推荐的是使用bcrypt加密方式。</span></span><br><span class="line">   </span><br><span class="line">   auth.<span class="keyword">in</span><span class="constructor">MemoryAuthentication()</span>.password<span class="constructor">Encoder(<span class="params">new</span> BCryptPasswordEncoder()</span>)</span><br><span class="line">          .<span class="keyword">with</span><span class="constructor">User(<span class="string">"kuangshen"</span>)</span>.password(<span class="keyword">new</span> <span class="constructor">BCryptPasswordEncoder()</span>.encode(<span class="string">"123456"</span>)).roles(<span class="string">"vip2"</span>,<span class="string">"vip3"</span>)</span><br><span class="line">          .<span class="keyword">and</span><span class="literal">()</span></span><br><span class="line">          .<span class="keyword">with</span><span class="constructor">User(<span class="string">"root"</span>)</span>.password(<span class="keyword">new</span> <span class="constructor">BCryptPasswordEncoder()</span>.encode(<span class="string">"123456"</span>)).roles(<span class="string">"vip1"</span>,<span class="string">"vip2"</span>,<span class="string">"vip3"</span>)</span><br><span class="line">          .<span class="keyword">and</span><span class="literal">()</span></span><br><span class="line">          .<span class="keyword">with</span><span class="constructor">User(<span class="string">"guest"</span>)</span>.password(<span class="keyword">new</span> <span class="constructor">BCryptPasswordEncoder()</span>.encode(<span class="string">"123456"</span>)).roles(<span class="string">"vip1"</span>,<span class="string">"vip2"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="权限控制和注销"><a href="#权限控制和注销" class="headerlink" title="权限控制和注销"></a>权限控制和注销</h1><p>1、开启自动配置的注销的功能</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定制请求的授权规则</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">   <span class="comment">//....</span></span><br><span class="line">   <span class="comment">//开启自动配置的注销的功能</span></span><br><span class="line">      <span class="comment">// /logout 注销请求</span></span><br><span class="line">   http.logout();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、我们在前端，增加一个注销的按钮，index.html 导航栏中</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">th:href</span>=<span class="string">"@</span></span></span><span class="template-tag">&#123;/<span class="name">logout</span>&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"address card icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 注销</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>3、我们可以去测试一下，登录成功后点击注销，发现注销完毕会跳转到登录页面,我们想让他注销成功后，依旧可以跳转到首页</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">// .logoutSuccessUrl(<span class="string">"/"</span>)<span class="comment">; 注销成功来到首页</span></span><br><span class="line">http.logout().logoutSuccessUrl(<span class="string">"/"</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>4、我们现在又来一个需求：用户没有登录的时候，导航栏上只显示登录按钮，用户登录之后，导航栏可以显示登录的用户信息及注销按钮！还有就是，比如kuangshen这个用户，它只有 vip2，vip3功能，那么登录则只显示这两个功能，而vip1的功能菜单不显示，这个就是真实的网站情况了。<br>我们需要结合thymeleaf中的一些功能<br>sec：authorize=”isAuthenticated()”:是否认证登录！来显示不同的页面<br>5、修改我们的 前端页面</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!--登录注销--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right menu"</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">   <span class="comment">&lt;!--如果未登录--&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">sec:authorize</span>=<span class="string">"!isAuthenticated()"</span>&gt;</span></span></span><br><span class="line"><span class="xml">       <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">th:href</span>=<span class="string">"@</span></span></span><span class="template-tag">&#123;/<span class="name">login</span>&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml">           <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"address card icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 登录</span></span><br><span class="line"><span class="xml">       <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">   <span class="comment">&lt;!--如果已登录--&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">sec:authorize</span>=<span class="string">"isAuthenticated()"</span>&gt;</span></span></span><br><span class="line"><span class="xml">       <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span></span><br><span class="line"><span class="xml">           <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"address card icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="xml">          用户名：<span class="tag">&lt;<span class="name">span</span> <span class="attr">sec:authentication</span>=<span class="string">"principal.username"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">          角色：<span class="tag">&lt;<span class="name">span</span> <span class="attr">sec:authentication</span>=<span class="string">"principal.authorities"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">       <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">sec:authorize</span>=<span class="string">"isAuthenticated()"</span>&gt;</span></span></span><br><span class="line"><span class="xml">       <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">th:href</span>=<span class="string">"@</span></span></span><span class="template-tag">&#123;/<span class="name">logout</span>&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml">           <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"address card icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 注销</span></span><br><span class="line"><span class="xml">       <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>6、如果注销404了，就是因为它默认防止csrf跨站请求伪造，因为会产生安全问题，我们可以将请求改为post表单提交，或者在spring security中关闭csrf功能；我们试试：在 配置中增加 http.csrf().disable();</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">http</span><span class="selector-class">.csrf</span>()<span class="selector-class">.disable</span>();<span class="comment">//关闭csrf功能:跨站请求伪造,默认只能通过post方式提交logout请求</span></span><br><span class="line"><span class="selector-tag">http</span><span class="selector-class">.logout</span>()<span class="selector-class">.logoutSuccessUrl</span>(<span class="string">"/"</span>);</span><br></pre></td></tr></table></figure>
<p>7、继续将下面的角色功能块认证完成</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- sec:authorize="hasRole('vip1')" --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span> <span class="attr">sec:authorize</span>=<span class="string">"hasRole('vip1')"</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui raised segment"</span>&gt;</span></span></span><br><span class="line"><span class="xml">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui"</span>&gt;</span></span></span><br><span class="line"><span class="xml">           <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span></span><br><span class="line"><span class="xml">               <span class="tag">&lt;<span class="name">h5</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span>Level 1<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span></span><br><span class="line"><span class="xml">               <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span></span><br><span class="line"><span class="xml">               <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@</span></span></span><span class="template-tag">&#123;/<span class="name">level</span>1/1&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"bullhorn icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-1-1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">               <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@</span></span></span><span class="template-tag">&#123;/<span class="name">level</span>1/2&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"bullhorn icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-1-2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">               <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@</span></span></span><span class="template-tag">&#123;/<span class="name">level</span>1/3&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"bullhorn icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-1-3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">           <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span> <span class="attr">sec:authorize</span>=<span class="string">"hasRole('vip2')"</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui raised segment"</span>&gt;</span></span></span><br><span class="line"><span class="xml">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui"</span>&gt;</span></span></span><br><span class="line"><span class="xml">           <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span></span><br><span class="line"><span class="xml">               <span class="tag">&lt;<span class="name">h5</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span>Level 2<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span></span><br><span class="line"><span class="xml">               <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span></span><br><span class="line"><span class="xml">               <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@</span></span></span><span class="template-tag">&#123;/<span class="name">level</span>2/1&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"bullhorn icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-2-1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">               <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@</span></span></span><span class="template-tag">&#123;/<span class="name">level</span>2/2&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"bullhorn icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-2-2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">               <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@</span></span></span><span class="template-tag">&#123;/<span class="name">level</span>2/3&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"bullhorn icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-2-3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">           <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span> <span class="attr">sec:authorize</span>=<span class="string">"hasRole('vip3')"</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui raised segment"</span>&gt;</span></span></span><br><span class="line"><span class="xml">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui"</span>&gt;</span></span></span><br><span class="line"><span class="xml">           <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span></span><br><span class="line"><span class="xml">               <span class="tag">&lt;<span class="name">h5</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span>Level 3<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span></span><br><span class="line"><span class="xml">               <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span></span><br><span class="line"><span class="xml">               <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@</span></span></span><span class="template-tag">&#123;/<span class="name">level</span>3/1&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"bullhorn icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-3-1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">               <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@</span></span></span><span class="template-tag">&#123;/<span class="name">level</span>3/2&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"bullhorn icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-3-2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">               <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@</span></span></span><span class="template-tag">&#123;/<span class="name">level</span>3/3&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"bullhorn icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-3-3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">           <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h1 id="记住我功能"><a href="#记住我功能" class="headerlink" title="记住我功能"></a>记住我功能</h1><p>1、开启记住我功能</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定制请求的授权规则</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//。。。。。。。。。。。</span></span><br><span class="line">   <span class="comment">//记住我</span></span><br><span class="line">   http.rememberMe();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、原理·：登录成功后，将cookie发送给浏览器保存，以后登录带上这个cookie，只要通过检查就可以免登录了。如果点击注销，则会删除这个cookie    </p>
<h1 id="定制登录页"><a href="#定制登录页" class="headerlink" title="定制登录页"></a>定制登录页</h1><p>1、在刚才的登录页配置后面指定 loginpage</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">http</span><span class="selector-class">.formLogin</span>()<span class="selector-class">.loginPage</span>(<span class="string">"/toLogin"</span>);</span><br></pre></td></tr></table></figure>
<p>2、然后前端也需要指向我们自己定义的 login请求</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">th:href</span>=<span class="string">"@</span></span></span><span class="template-tag">&#123;/<span class="name">toLogin</span>&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"address card icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 登录</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>3、我们登录，需要将这些信息发送到哪里，我们也需要配置，login.html 配置提交请求及方式，方式必须为post:    </p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">&lt;form th:action=<span class="string">"@&#123;/login&#125;"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">   &lt;div <span class="keyword">class</span>="<span class="symbol">field</span>"&gt;</span><br><span class="line">       &lt;<span class="symbol">label</span>&gt;<span class="symbol">Username</span>&lt;/<span class="symbol">label</span>&gt;</span><br><span class="line">       &lt;<span class="symbol">div</span> <span class="symbol">class</span>="<span class="symbol">ui</span> <span class="symbol">left</span> <span class="symbol">icon</span> <span class="symbol">input</span>"&gt;</span><br><span class="line">           &lt;<span class="symbol">input</span> <span class="symbol">type</span>="<span class="symbol">text</span>" <span class="symbol">placeholder</span>="<span class="symbol">Username</span>" <span class="symbol">name</span>="<span class="symbol">username</span>"&gt;</span><br><span class="line">           &lt;<span class="symbol">i</span> <span class="symbol">class</span>="<span class="symbol">user</span> <span class="symbol">icon</span>"&gt;&lt;/<span class="symbol">i</span>&gt;</span><br><span class="line">       &lt;/<span class="symbol">div</span>&gt;</span><br><span class="line">   &lt;/<span class="symbol">div</span>&gt;</span><br><span class="line">   &lt;<span class="symbol">div</span> <span class="symbol">class</span>="<span class="symbol">field</span>"&gt;</span><br><span class="line">       &lt;<span class="symbol">label</span>&gt;<span class="symbol">Password</span>&lt;/<span class="symbol">label</span>&gt;</span><br><span class="line">       &lt;<span class="symbol">div</span> <span class="symbol">class</span>="<span class="symbol">ui</span> <span class="symbol">left</span> <span class="symbol">icon</span> <span class="symbol">input</span>"&gt;</span><br><span class="line">           &lt;<span class="symbol">input</span> <span class="symbol">type</span>="<span class="symbol">password</span>" <span class="symbol">name</span>="<span class="symbol">password</span>"&gt;</span><br><span class="line">           &lt;<span class="symbol">i</span> <span class="symbol">class</span>="<span class="symbol">lock</span> <span class="symbol">icon</span>"&gt;&lt;/<span class="symbol">i</span>&gt;</span><br><span class="line">       &lt;/<span class="symbol">div</span>&gt;</span><br><span class="line">   &lt;/<span class="symbol">div</span>&gt;</span><br><span class="line">   &lt;<span class="symbol">input</span> <span class="symbol">type</span>="<span class="symbol">submit</span>" <span class="symbol">class</span>="<span class="symbol">ui</span> <span class="symbol">blue</span> <span class="symbol">submit</span> <span class="symbol">button</span>"/&gt;</span><br><span class="line">&lt;/<span class="symbol">form</span>&gt;</span><br></pre></td></tr></table></figure>
<p>4、这个请求提交上来，我们还需要验证处理，怎么做呢？我们可以查看formLogin()方法的源码，我们配置接收登录的用户名和密码的参数</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">http</span><span class="selector-class">.formLogin</span>()</span><br><span class="line">  <span class="selector-class">.usernameParameter</span>(<span class="string">"username"</span>)</span><br><span class="line">  <span class="selector-class">.passwordParameter</span>(<span class="string">"password"</span>)</span><br><span class="line">  <span class="selector-class">.loginPage</span>(<span class="string">"/toLogin"</span>)</span><br><span class="line">  <span class="selector-class">.loginProcessingUrl</span>(<span class="string">"/login"</span>); <span class="comment">// 登陆表单提交请求</span></span><br></pre></td></tr></table></figure>
<p>5、在登录页增加记住我的多选框</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">input</span> <span class="keyword">type</span>="checkbox" <span class="type">name</span>="remember"&gt; 记住我</span><br></pre></td></tr></table></figure>
<p>6、后端验证处理</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定制记住我的参数！</span></span><br><span class="line"><span class="selector-tag">http</span><span class="selector-class">.rememberMe</span>()<span class="selector-class">.rememberMeParameter</span>(<span class="string">"remember"</span>);</span><br></pre></td></tr></table></figure>
<h1 id="完整配置代码"><a href="#完整配置代码" class="headerlink" title="完整配置代码"></a>完整配置代码</h1><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.security</span><span class="selector-class">.config</span><span class="selector-class">.annotation</span><span class="selector-class">.authentication</span><span class="selector-class">.builders</span><span class="selector-class">.AuthenticationManagerBuilder</span>;</span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.security</span><span class="selector-class">.config</span><span class="selector-class">.annotation</span><span class="selector-class">.web</span><span class="selector-class">.builders</span><span class="selector-class">.HttpSecurity</span>;</span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.security</span><span class="selector-class">.config</span><span class="selector-class">.annotation</span><span class="selector-class">.web</span><span class="selector-class">.configuration</span><span class="selector-class">.EnableWebSecurity</span>;</span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.security</span><span class="selector-class">.config</span><span class="selector-class">.annotation</span><span class="selector-class">.web</span><span class="selector-class">.configuration</span><span class="selector-class">.WebSecurityConfigurerAdapter</span>;</span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.security</span><span class="selector-class">.crypto</span><span class="selector-class">.bcrypt</span><span class="selector-class">.BCryptPasswordEncoder</span>;</span><br><span class="line"></span><br><span class="line">@<span class="selector-tag">EnableWebSecurity</span></span><br><span class="line"><span class="selector-tag">public</span> <span class="selector-tag">class</span> <span class="selector-tag">SecurityConfig</span> <span class="selector-tag">extends</span> <span class="selector-tag">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//定制请求的授权规则</span></span><br><span class="line">   <span class="variable">@Override</span></span><br><span class="line">   protected void configure(HttpSecurity http) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">       <span class="selector-tag">http</span><span class="selector-class">.authorizeRequests</span>()<span class="selector-class">.antMatchers</span>(<span class="string">"/"</span>)<span class="selector-class">.permitAll</span>()</span><br><span class="line">      <span class="selector-class">.antMatchers</span>(<span class="string">"/level1/**"</span>)<span class="selector-class">.hasRole</span>(<span class="string">"vip1"</span>)</span><br><span class="line">      <span class="selector-class">.antMatchers</span>(<span class="string">"/level2/**"</span>)<span class="selector-class">.hasRole</span>(<span class="string">"vip2"</span>)</span><br><span class="line">      <span class="selector-class">.antMatchers</span>(<span class="string">"/level3/**"</span>)<span class="selector-class">.hasRole</span>(<span class="string">"vip3"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="comment">//开启自动配置的登录功能：如果没有权限，就会跳转到登录页面！</span></span><br><span class="line">           <span class="comment">// /login 请求来到登录页</span></span><br><span class="line">           <span class="comment">// /login?error 重定向到这里表示登录失败</span></span><br><span class="line">       <span class="selector-tag">http</span><span class="selector-class">.formLogin</span>()</span><br><span class="line">          <span class="selector-class">.usernameParameter</span>(<span class="string">"username"</span>)</span><br><span class="line">          <span class="selector-class">.passwordParameter</span>(<span class="string">"password"</span>)</span><br><span class="line">          <span class="selector-class">.loginPage</span>(<span class="string">"/toLogin"</span>)</span><br><span class="line">          <span class="selector-class">.loginProcessingUrl</span>(<span class="string">"/login"</span>); <span class="comment">// 登陆表单提交请求</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//开启自动配置的注销的功能</span></span><br><span class="line">           <span class="comment">// /logout 注销请求</span></span><br><span class="line">           <span class="comment">// .logoutSuccessUrl("/"); 注销成功来到首页</span></span><br><span class="line"></span><br><span class="line">       <span class="selector-tag">http</span><span class="selector-class">.csrf</span>()<span class="selector-class">.disable</span>();<span class="comment">//关闭csrf功能:跨站请求伪造,默认只能通过post方式提交logout请求</span></span><br><span class="line">       <span class="selector-tag">http</span><span class="selector-class">.logout</span>()<span class="selector-class">.logoutSuccessUrl</span>(<span class="string">"/"</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//记住我</span></span><br><span class="line">       <span class="selector-tag">http</span><span class="selector-class">.rememberMe</span>()<span class="selector-class">.rememberMeParameter</span>(<span class="string">"remember"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//定义认证规则</span></span><br><span class="line">   @<span class="selector-tag">Override</span></span><br><span class="line">   <span class="selector-tag">protected</span> <span class="selector-tag">void</span> <span class="selector-tag">configure</span>(AuthenticationManagerBuilder auth) <span class="selector-tag">throws</span> <span class="selector-tag">Exception</span> &#123;</span><br><span class="line">       <span class="comment">//在内存中定义，也可以在jdbc中去拿....</span></span><br><span class="line">       <span class="comment">//Spring security 5.0中新增了多种加密方式，也改变了密码的格式。</span></span><br><span class="line">       <span class="comment">//要想我们的项目还能够正常登陆，需要修改一下configure中的代码。我们要将前端传过来的密码进行某种方式加密</span></span><br><span class="line">       <span class="comment">//spring security 官方推荐的是使用bcrypt加密方式。</span></span><br><span class="line"></span><br><span class="line">       <span class="selector-tag">auth</span><span class="selector-class">.inMemoryAuthentication</span>()<span class="selector-class">.passwordEncoder</span>(new BCryptPasswordEncoder())</span><br><span class="line">              <span class="selector-class">.withUser</span>(<span class="string">"kuangshen"</span>)<span class="selector-class">.password</span>(new BCryptPasswordEncoder().encode(<span class="string">"123456"</span>))<span class="selector-class">.roles</span>(<span class="string">"vip2"</span>,<span class="string">"vip3"</span>)</span><br><span class="line">              <span class="selector-class">.and</span>()</span><br><span class="line">              <span class="selector-class">.withUser</span>(<span class="string">"root"</span>)<span class="selector-class">.password</span>(new BCryptPasswordEncoder().encode(<span class="string">"123456"</span>))<span class="selector-class">.roles</span>(<span class="string">"vip1"</span>,<span class="string">"vip2"</span>,<span class="string">"vip3"</span>)</span><br><span class="line">              <span class="selector-class">.and</span>()</span><br><span class="line">              <span class="selector-class">.withUser</span>(<span class="string">"guest"</span>)<span class="selector-class">.password</span>(new BCryptPasswordEncoder().encode(<span class="string">"123456"</span>))<span class="selector-class">.roles</span>(<span class="string">"vip1"</span>,<span class="string">"vip2"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot-集成Swagger</title>
    <url>/2020/08/27/SpringBoot-%E9%9B%86%E6%88%90Swagger/</url>
    <content><![CDATA[<h1 id="Swagger简介"><a href="#Swagger简介" class="headerlink" title="Swagger简介"></a>Swagger简介</h1><p><strong>前后端分离</strong></p>
<ul>
<li>前端 -&gt; 前端控制层、视图层</li>
<li>后端 -&gt; 后端控制层、服务层、数据访问层</li>
<li>前后端通过API进行交互</li>
<li>前后端相对独立且松耦合    <a id="more"></a></li>
</ul>
<p><strong>产生的问题</strong></p>
<ul>
<li>前后端集成，前端或者后端无法做到“及时协商，尽早解决”，最终导致问题集中爆发    </li>
</ul>
<p><strong>解决方案</strong></p>
<ul>
<li>首先定义schema [ 计划的提纲 ]，并实时跟踪最新的API，降低集成风险  </li>
</ul>
<p><strong>Swagger**</strong></p>
<ul>
<li>号称世界上最流行的API框架</li>
<li>Restful Api 文档在线自动生成器 =&gt; API 文档 与API 定义同步更新</li>
<li>直接运行，在线测试API</li>
<li>支持多种语言 （如：Java，PHP等）</li>
<li>官网：<a href="https://swagger.io/" target="_blank" rel="noopener">https://swagger.io/</a></li>
</ul>
<h1 id="SpringBoot集成Swagger"><a href="#SpringBoot集成Swagger" class="headerlink" title="SpringBoot集成Swagger"></a>SpringBoot集成Swagger</h1><p><strong>SpringBoot集成Swagger =&gt; springfox，两个jar包</strong>    </p>
<ul>
<li>Springfox-swagger2</li>
<li>swagger-springmvc    </li>
</ul>
<p><strong>使用Swagger</strong><br>要求：jdk 1.8 + 否则swagger2无法运行    </p>
<p><strong>步骤：</strong><br>1、新建一个SpringBoot-web项目<br>2、添加Maven依赖    </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>3、编写HelloController，测试确保运行成功<br>4、要使用Swagger，我们需要编写一个配置类-SwaggerConfig来配置 Swagger    </p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@Configuration</span> <span class="comment">//配置类</span></span><br><span class="line"><span class="variable">@EnableSwagger2</span><span class="comment">// 开启Swagger2的自动配置</span></span><br><span class="line">public class SwaggerConfig &#123;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>5、访问测试 ：<a href="http://localhost:8080/swagger-ui.html" target="_blank" rel="noopener">http://localhost:8080/swagger-ui.html</a> ，可以看到swagger的界面；</p>
<h1 id="配置Swagger"><a href="#配置Swagger" class="headerlink" title="配置Swagger"></a>配置Swagger</h1><p>1、Swagger实例Bean是Docket，所以通过配置Docket实例来配置Swaggger。    </p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span> <span class="comment">//配置docket以配置Swagger具体参数</span></span><br><span class="line"><span class="keyword">public</span> <span class="function">Docket <span class="title">docket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、可以通过apiInfo()属性配置文档信息</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="comment">//配置文档信息</span></span><br><span class="line"><span class="keyword">private</span> ApiInfo apiInfo() &#123;</span><br><span class="line">   Contact contact = <span class="keyword">new</span> <span class="type">Contact</span>(<span class="string">"联系人名字"</span>, <span class="string">"http://xxx.xxx.com/联系人访问链接"</span>, <span class="string">"联系人邮箱"</span>);</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">ApiInfo</span>(</span><br><span class="line">           <span class="string">"Swagger学习"</span>, <span class="comment">// 标题</span></span><br><span class="line">           <span class="string">"学习演示如何配置Swagger"</span>, <span class="comment">// 描述</span></span><br><span class="line">           <span class="string">"v1.0"</span>, <span class="comment">// 版本</span></span><br><span class="line">           <span class="string">"http://terms.service.url/组织链接"</span>, <span class="comment">// 组织链接</span></span><br><span class="line">           contact, <span class="comment">// 联系人信息</span></span><br><span class="line">           <span class="string">"Apach 2.0 许可"</span>, <span class="comment">// 许可</span></span><br><span class="line">           <span class="string">"许可链接"</span>, <span class="comment">// 许可连接</span></span><br><span class="line">           <span class="keyword">new</span> <span class="type">ArrayList</span>&lt;&gt;()<span class="comment">// 扩展</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3、Docket 实例关联上 apiInfo()</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> <span class="function">Docket <span class="title">docket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2).apiInfo(apiInfo());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>4、重启项目，访问测试 <a href="http://localhost:8080/swagger-ui.html" target="_blank" rel="noopener">http://localhost:8080/swagger-ui.html</a></p>
<h1 id="配置扫描接口"><a href="#配置扫描接口" class="headerlink" title="配置扫描接口"></a>配置扫描接口</h1><p>1、构建Docket时通过select()方法配置怎么扫描接口。    </p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">@Bean</span><br><span class="line">public Docket docket<span class="literal">()</span> &#123;</span><br><span class="line">   return <span class="keyword">new</span> <span class="constructor">Docket(DocumentationType.SWAGGER_2)</span></span><br><span class="line">      .api<span class="constructor">Info(<span class="params">apiInfo</span>()</span>)</span><br><span class="line">      .select<span class="literal">()</span><span class="comment">// 通过.select()方法，去配置扫描接口,RequestHandlerSelectors配置如何扫描接口</span></span><br><span class="line">      .apis(<span class="module-access"><span class="module"><span class="identifier">RequestHandlerSelectors</span>.</span></span>base<span class="constructor">Package(<span class="string">"com.fbk.swagger.controller"</span>)</span>)</span><br><span class="line">      .build<span class="literal">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、重启项目测试，由于我们配置根据包的路径扫描接口，所以我们只能看到一个类<br>3、除了通过包路径配置扫描接口外，还可以通过配置其他方式扫描接口，这里注释一下所有的配置方式：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">any</span><span class="params">()</span></span> <span class="comment">// 扫描所有，项目中的所有接口都会被扫描到</span></span><br><span class="line"><span class="function"><span class="title">none</span><span class="params">()</span></span> <span class="comment">// 不扫描接口</span></span><br><span class="line"><span class="comment">// 通过方法上的注解扫描，如withMethodAnnotation(GetMapping.class)只扫描get请求</span></span><br><span class="line"><span class="function"><span class="title">withMethodAnnotation</span><span class="params">(final Class&lt;? extends Annotation&gt; annotation)</span></span></span><br><span class="line"><span class="comment">// 通过类上的注解扫描，如.withClassAnnotation(Controller.class)只扫描有controller注解的类中的接口</span></span><br><span class="line"><span class="function"><span class="title">withClassAnnotation</span><span class="params">(final Class&lt;? extends Annotation&gt; annotation)</span></span></span><br><span class="line"><span class="function"><span class="title">basePackage</span><span class="params">(final String basePackage)</span></span> <span class="comment">// 根据包路径扫描接口</span></span><br></pre></td></tr></table></figure>
<p>4、除此之外，我们还可以配置接口扫描过滤：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">@Bean</span><br><span class="line">public Docket docket<span class="literal">()</span> &#123;</span><br><span class="line">   return <span class="keyword">new</span> <span class="constructor">Docket(DocumentationType.SWAGGER_2)</span></span><br><span class="line">      .api<span class="constructor">Info(<span class="params">apiInfo</span>()</span>)</span><br><span class="line">      .select<span class="literal">()</span><span class="comment">// 通过.select()方法，去配置扫描接口,RequestHandlerSelectors配置如何扫描接口</span></span><br><span class="line">      .apis(<span class="module-access"><span class="module"><span class="identifier">RequestHandlerSelectors</span>.</span></span>base<span class="constructor">Package(<span class="string">"com.fbk.swagger.controller"</span>)</span>)</span><br><span class="line">       <span class="comment">// 配置如何通过path过滤,即这里只扫描请求以/fbk开头的接口</span></span><br><span class="line">      .paths(<span class="module-access"><span class="module"><span class="identifier">PathSelectors</span>.</span></span>ant(<span class="string">"/fbk/**"</span>))</span><br><span class="line">      .build<span class="literal">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>5、这里的可选值还有</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">any</span><span class="params">()</span></span> <span class="comment">// 任何请求都扫描</span></span><br><span class="line"><span class="function"><span class="title">none</span><span class="params">()</span></span> <span class="comment">// 任何请求都不扫描</span></span><br><span class="line"><span class="function"><span class="title">regex</span><span class="params">(final String pathRegex)</span></span> <span class="comment">// 通过正则表达式控制</span></span><br><span class="line"><span class="function"><span class="title">ant</span><span class="params">(final String antPattern)</span></span> <span class="comment">// 通过ant()控制</span></span><br></pre></td></tr></table></figure>
<h1 id="配置Swagger开关"><a href="#配置Swagger开关" class="headerlink" title="配置Swagger开关"></a>配置Swagger开关</h1><p>1、通过enable()方法配置是否启用swagger，如果是false，swagger将不能在浏览器中访问了</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">@Bean</span><br><span class="line">public Docket docket<span class="literal">()</span> &#123;</span><br><span class="line">   return <span class="keyword">new</span> <span class="constructor">Docket(DocumentationType.SWAGGER_2)</span></span><br><span class="line">      .api<span class="constructor">Info(<span class="params">apiInfo</span>()</span>)</span><br><span class="line">      .enable(<span class="literal">false</span>) <span class="comment">//配置是否启用Swagger，如果是false，在浏览器将无法访问</span></span><br><span class="line">      .select<span class="literal">()</span><span class="comment">// 通过.select()方法，去配置扫描接口,RequestHandlerSelectors配置如何扫描接口</span></span><br><span class="line">      .apis(<span class="module-access"><span class="module"><span class="identifier">RequestHandlerSelectors</span>.</span></span>base<span class="constructor">Package(<span class="string">"com.fbk.swagger.controller"</span>)</span>)</span><br><span class="line">       <span class="comment">// 配置如何通过path过滤,即这里只扫描请求以/kuang开头的接口</span></span><br><span class="line">      .paths(<span class="module-access"><span class="module"><span class="identifier">PathSelectors</span>.</span></span>ant(<span class="string">"/fbk/**"</span>))</span><br><span class="line">      .build<span class="literal">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、如何动态配置当项目处于test、dev环境时显示swagger，处于prod时不显示</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">@Bean</span><br><span class="line">public Docket docket(Environment environment) &#123;</span><br><span class="line">   <span class="comment">// 设置要显示swagger的环境</span></span><br><span class="line">   Profiles <span class="keyword">of</span> = <span class="module-access"><span class="module"><span class="identifier">Profiles</span>.</span></span><span class="keyword">of</span>(<span class="string">"dev"</span>, <span class="string">"test"</span>);</span><br><span class="line">   <span class="comment">// 判断当前是否处于该环境</span></span><br><span class="line">   <span class="comment">// 通过 enable() 接收此参数判断是否要显示</span></span><br><span class="line">   boolean b = environment.accepts<span class="constructor">Profiles(<span class="params">of</span>)</span>;</span><br><span class="line">   </span><br><span class="line">   return <span class="keyword">new</span> <span class="constructor">Docket(DocumentationType.SWAGGER_2)</span></span><br><span class="line">      .api<span class="constructor">Info(<span class="params">apiInfo</span>()</span>)</span><br><span class="line">      .enable(b) <span class="comment">//配置是否启用Swagger，如果是false，在浏览器将无法访问</span></span><br><span class="line">      .select<span class="literal">()</span><span class="comment">// 通过.select()方法，去配置扫描接口,RequestHandlerSelectors配置如何扫描接口</span></span><br><span class="line">      .apis(<span class="module-access"><span class="module"><span class="identifier">RequestHandlerSelectors</span>.</span></span>base<span class="constructor">Package(<span class="string">"com.fbk.swagger.controller"</span>)</span>)</span><br><span class="line">       <span class="comment">// 配置如何通过path过滤,即这里只扫描请求以/fbk开头的接口</span></span><br><span class="line">      .paths(<span class="module-access"><span class="module"><span class="identifier">PathSelectors</span>.</span></span>ant(<span class="string">"/fbk/**"</span>))</span><br><span class="line">      .build<span class="literal">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="配置API分组"><a href="#配置API分组" class="headerlink" title="配置API分组"></a>配置API分组</h1><p>1、如果没有配置分组，默认是default。通过groupName()方法即可配置分组：</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> <span class="function">Docket <span class="title">docket</span><span class="params">(Environment environment)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2).apiInfo(apiInfo())</span><br><span class="line">      .groupName(<span class="string">"hello"</span>) <span class="comment">// 配置分组</span></span><br><span class="line">       <span class="comment">// 省略配置....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、如何配置多个分组？配置多个分组只需要配置多个docket即可：</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> <span class="function">Docket <span class="title">docket1</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2).groupName(<span class="string">"group1"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> <span class="function">Docket <span class="title">docket2</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2).groupName(<span class="string">"group2"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> <span class="function">Docket <span class="title">docket3</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2).groupName(<span class="string">"group3"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="实体配置"><a href="#实体配置" class="headerlink" title="实体配置"></a>实体配置</h1><p>1、新建一个实体类</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiModel(<span class="meta-string">"用户实体"</span>)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">   <span class="meta">@ApiModelProperty(<span class="meta-string">"用户名"</span>)</span></span><br><span class="line">   <span class="keyword">public</span> String username;</span><br><span class="line">   <span class="meta">@ApiModelProperty(<span class="meta-string">"密码"</span>)</span></span><br><span class="line">   <span class="keyword">public</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、只要这个实体在请求接口的返回值上（即使是泛型），都能映射到实体项中：</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/getUser"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="function">User <span class="title">getUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注：并不是因为@ApiModel这个注解让实体显示在这里了，而是只要出现在接口方法的返回值上的实体都会显示在这里，而@ApiModel和@ApiModelProperty这两个注解只是为实体添加注释的。<br>@ApiModel为类添加注释<br>@ApiModelProperty为类属性添加注释    </p>
<h1 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h1><p>Swagger的所有注解定义在io.swagger.annotations包下<br>下面列一些经常用到的，未列举出来的可以另行查阅说明：    </p>
<p>Swagger注解 | 简单说明 |<br>-|-|-<br>@Api(tags = “xxx模块说明”) | 作用在模块类上 |<br>@ApiOperation(“xxx接口说明”) | 作用在接口方法上 |<br>@ApiModel(“xxxPOJO说明”) | 作用在模型类上：如VO、BO |<br>@ApiModelProperty(value = “xxx属性说明”,hidden = true)|作用在类方法和属性上，hidden设置为true可以隐藏该属性|<br>@ApiParam(“xxx参数说明”) | 作用在参数、方法和字段上，类似@ApiModelProperty|<br>我们也可以给请求的接口配置一些注释</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@ApiOperation</span>(<span class="string">"FBK的接口"</span>)</span><br><span class="line"><span class="variable">@PostMapping</span>(<span class="string">"/FBK"</span>)</span><br><span class="line"><span class="variable">@ResponseBody</span></span><br><span class="line">public String kuang(<span class="variable">@ApiParam</span>(<span class="string">"这个名字会被返回"</span>)String username)&#123;</span><br><span class="line">   <span class="selector-tag">return</span> <span class="selector-tag">username</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样的话，可以给一些比较难理解的属性或者接口，增加一些配置信息，让人更容易阅读！    </p>
<p>相较于传统的Postman或Curl方式测试接口，使用swagger简直就是傻瓜式操作，不需要额外说明文档(写得好本身就是文档)而且更不容易出错，只需要录入数据然后点击Execute，如果再配合自动化框架，可以说基本就不需要人为操作了。    </p>
<p>Swagger是个优秀的工具，现在国内已经有很多的中小型互联网公司都在使用它，相较于传统的要先出Word接口文档再测试的方式，显然这样也更符合现在的快速迭代开发行情。当然了，提醒下大家在正式环境要记得关闭Swagger，一来出于安全考虑二来也可以节省运行时内存。    </p>
<h1 id="其他皮肤"><a href="#其他皮肤" class="headerlink" title="其他皮肤"></a>其他皮肤</h1><p>我们可以导入不同的包实现不同的皮肤定义：<br>1、默认的   访问 <a href="http://localhost:8080/swagger-ui.html" target="_blank" rel="noopener">http://localhost:8080/swagger-ui.html</a></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>2、bootstrap-ui  访问 <a href="http://localhost:8080/doc.html" target="_blank" rel="noopener">http://localhost:8080/doc.html</a></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入swagger-bootstrap-ui包 /doc.html--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-bootstrap-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>3、Layui-ui   访问 <a href="http://localhost:8080/docs.html" target="_blank" rel="noopener">http://localhost:8080/docs.html</a></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入swagger-ui-layer包 /docs.html--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.caspar-chen<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-ui-layer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>4、mg-ui   访问 <a href="http://localhost:8080/document.html" target="_blank" rel="noopener">http://localhost:8080/document.html</a></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入swagger-ui-layer包 /document.html--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zyplayer<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-mg-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC-处理静态资源</title>
    <url>/2020/07/17/SpringMVC-%E5%A4%84%E7%90%86%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90/</url>
    <content><![CDATA[<h1 id="中央调度器的url-pattern设置为-“-“"><a href="#中央调度器的url-pattern设置为-“-“" class="headerlink" title="中央调度器的url-pattern设置为 “/“"></a>中央调度器的url-pattern设置为 “/“</h1><p>中央调度器的url-pattern设置为 “/“时，会导致静态资源访问失败(404)，动态代理正常访问(不用配置*.do 使用方便)    </p>
<ol>
<li>第一种处理静态资源的方式：<br>需要在springmvc配置文件加入 <a href="mvc:default-servlet-handler">mvc:default-servlet-handler</a>    <a id="more"></a><br>原理：加入这个标签后，框架会创健控制器对象DefaultServletHttpRequestHandler（类似我们自己创建的MyController）DefaultServletHttpRequestHandler这个对象可以把接收的请求转发给 tomcat的default这个servlet。    <figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">&lt;!-- default-servlet-handler 和 @RequestMapping注解 有冲突， 需要加入<span class="keyword">annotation</span>-<span class="title">driven</span> 解决问题--&gt;</span><br><span class="line">&lt;<span class="symbol">mvc:</span><span class="keyword">annotation</span>-<span class="title">driven</span> /&gt;	</span><br><span class="line"></span><br><span class="line">&lt;<span class="symbol">mvc:</span>default-servlet-handler /&gt;</span><br></pre></td></tr></table></figure>
tomcat本身能处理静态资源的访问，像html，图片，js文件都是静态资源。<br>tomcat的web.xml文件有一个servlet名称是default，在服务器启动时创建的。<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.apache.catalina.servlets.DefaultServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>debug<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>0<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>listings<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span>表示静态资源和未映射的请求都这个default处理</span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
default这个servlet作用：<br>1)处理静态资源<br>2)处理未映射到其它servlet的请求    </li>
<li>第二种处理静态资源的方式<br>mvc:resources 加入后框架会创建 ResourceHttpRequestHandler这个处理器对象。让这个对象处理静态资源的访问，不依赖tomcat服务器。<br>mapping:访问静态资源的uri地址，使用通配符**<br>location：静态资源在你的项目中的目录位置。    <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--images/**:表示 images/p1.jpg  , images/user/logo.gif , images/order/history/list.png--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">"/images/**"</span> <span class="attr">location</span>=<span class="string">"/images/"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">"/html/**"</span> <span class="attr">location</span>=<span class="string">"/html/"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">"/js/**"</span> <span class="attr">location</span>=<span class="string">"/js/"</span> /&gt;</span>	</span><br><span class="line"><span class="comment">&lt;!--mvc:resources和@RequestMapping有一定的冲突--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--使用一个配置语句，指定多种静态资源的访问，将images，html，js文件夹放入static文件夹内--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;mvc:resources mapping="/static/**" location="/static/" /&gt;--&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>SpringMVC</category>
      </categories>
      <tags>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC-接收参数</title>
    <url>/2020/07/15/SpringMVC-%E6%8E%A5%E6%94%B6%E5%8F%82%E6%95%B0/</url>
    <content><![CDATA[<h1 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="@RequestMapping"></a>@RequestMapping</h1><p>@RequestMapping:<br>value: 所有请求地址的公共部分，叫做模块名称<br>位置：放在类的上面</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@Controller</span></span><br><span class="line"><span class="variable">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line">public class MyController &#123;&#125;</span><br></pre></td></tr></table></figure>
<p>@RequestMapping : 请求映射<br>属性：method，表示请求的方式，它的值RequestMethod类枚举值<br>例如表示get请求方式，RequestMethod.GET<br>post方式，RequestMethod.POST        </p>
<a id="more"></a>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">//指定some.do使用get请求方式</span></span><br><span class="line">    <span class="variable">@RequestMapping</span>(value = <span class="string">"/some.do"</span>,method = RequestMethod.GET)</span><br><span class="line">    public ModelAndView doSome()&#123;  <span class="comment">// doGet()--service请求处</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//指定other.do是post请求方式</span></span><br><span class="line">    <span class="variable">@RequestMapping</span>(value = <span class="string">"/other.do"</span>,method = RequestMethod.POST)&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//不指定请求方式，没有限制</span></span><br></pre></td></tr></table></figure>
<h1 id="接收请求参数"><a href="#接收请求参数" class="headerlink" title="接收请求参数"></a>接收请求参数</h1><ol>
<li>接收请求参数，使用的处理器方法的形参<br>1)HttpServletRequest<br>2)HttpServletResponse<br>3)HttpSession<br>4)用户提交的数据    </li>
<li>接收用户提交的参数<br>1)逐个接收    <figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 逐个接收请求参数：</span></span><br><span class="line"><span class="comment">    * 要求：处理器（控制器）方法的形参名和请求中参数名必须一致。</span></span><br><span class="line"><span class="comment">    *           同名的请求参数赋值给同名的形参</span></span><br><span class="line"><span class="comment">    * 框架接收请求参数</span></span><br><span class="line"><span class="comment">    *   1. 使用request对象接收请求参数</span></span><br><span class="line"><span class="comment">    *       String strName = request.getParameter("name");</span></span><br><span class="line"><span class="comment">    *       String strAge = request.getParameter("age");</span></span><br><span class="line"><span class="comment">    *   2. springmvc框架通过 DispatcherServlet 调用 MyController的doSome()方法</span></span><br><span class="line"><span class="comment">    *       调用方法时，按名称对应，把接收的参数赋值给形参</span></span><br><span class="line"><span class="comment">    *       doSome（strName，Integer.valueOf(strAge)）</span></span><br><span class="line"><span class="comment">    *       框架会提供类型转换的功能，能把String转为 int ，long ， float， double等类型。</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    *  400状态码是客户端错误， 表示提交请求参数过程中，发生了问题。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   @<span class="constructor">RequestMapping(<span class="params">value</span> = <span class="string">"/receiveproperty.do"</span>)</span></span><br><span class="line">   public ModelAndView <span class="keyword">do</span><span class="constructor">Some(String <span class="params">name</span>, Integer <span class="params">age</span>)</span>&#123;</span><br><span class="line">       <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"doSome, name="</span>+name+<span class="string">"   age="</span>+age);</span><br><span class="line">       <span class="comment">//可以在方法中直接使用 name ，age</span></span><br><span class="line">       ModelAndView mv  = <span class="keyword">new</span> <span class="constructor">ModelAndView()</span>;</span><br><span class="line">       mv.add<span class="constructor">Object(<span class="string">"myname"</span>,<span class="params">name</span>)</span>;</span><br><span class="line">       mv.add<span class="constructor">Object(<span class="string">"myage"</span>,Integer.<span class="params">valueOf</span>(<span class="params">age</span>)</span>);</span><br><span class="line">       <span class="comment">//show是视图文件的逻辑名称（文件名称）</span></span><br><span class="line">       mv.set<span class="constructor">ViewName(<span class="string">"show"</span>)</span>;</span><br><span class="line">       return mv;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 请求中参数名和处理器方法的形参名不一样</span></span><br><span class="line"><span class="comment">    * @RequestParam: 逐个接收请求参数中， 解决请求中参数名形参名不一样的问题</span></span><br><span class="line"><span class="comment">    *      属性：1. value 请求中的参数名称</span></span><br><span class="line"><span class="comment">    *                 2. required 是一个boolean，默认是true</span></span><br><span class="line"><span class="comment">    *                 true：表示请求中必须包含此参数。</span></span><br><span class="line"><span class="comment">    *      位置： 在处理器方法的形参定义的前面</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   @<span class="constructor">RequestMapping(<span class="params">value</span> = <span class="string">"/receiveparam.do"</span>)</span></span><br><span class="line">   public ModelAndView receive<span class="constructor">Param(@RequestParam(<span class="params">value</span> = <span class="string">"rname"</span>,<span class="params">required</span> = <span class="params">false</span>)</span> String name,</span><br><span class="line">                                    @<span class="constructor">RequestParam(<span class="params">value</span> = <span class="string">"rage"</span>,<span class="params">required</span> = <span class="params">false</span>)</span> Integer age)&#123;</span><br><span class="line">       <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"doSome, name="</span>+name+<span class="string">"   age="</span>+age);</span><br><span class="line">       ModelAndView mv  = <span class="keyword">new</span> <span class="constructor">ModelAndView()</span>;</span><br><span class="line">       mv.add<span class="constructor">Object(<span class="string">"myname"</span>,<span class="params">name</span>)</span>;</span><br><span class="line">       mv.add<span class="constructor">Object(<span class="string">"myage"</span>,<span class="params">age</span>)</span>;</span><br><span class="line">       <span class="comment">//show是视图文件的逻辑名称（文件名称）</span></span><br><span class="line">       mv.set<span class="constructor">ViewName(<span class="string">"show"</span>)</span>;</span><br><span class="line">       return mv;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
2)对象接收    <figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理器方法形参是java对象， 这个对象的属性名和请求中参数名一样的</span></span><br><span class="line"><span class="comment">     * 框架会创建形参的java对象， 给属性赋值。 请求中的参数是name，框架会调用setName()</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @<span class="constructor">RequestMapping(<span class="params">value</span> = <span class="string">"/receiveobject.do"</span>)</span></span><br><span class="line">    public ModelAndView receive<span class="constructor">Param( Student <span class="params">myStudent</span>)</span>&#123;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"receiveParam, name="</span>+myStudent.get<span class="constructor">Name()</span>+<span class="string">"   age="</span>+myStudent.get<span class="constructor">Age()</span>);</span><br><span class="line">        ModelAndView mv  = <span class="keyword">new</span> <span class="constructor">ModelAndView()</span>;</span><br><span class="line">        mv.add<span class="constructor">Object(<span class="string">"myname"</span>,<span class="params">myStudent</span>.<span class="params">getName</span>()</span>);</span><br><span class="line">        mv.add<span class="constructor">Object(<span class="string">"myage"</span>,<span class="params">myStudent</span>.<span class="params">getAge</span>()</span>);</span><br><span class="line">        mv.add<span class="constructor">Object(<span class="string">"mystudent"</span>,<span class="params">myStudent</span>)</span>;</span><br><span class="line">        <span class="comment">//show是视图文件的逻辑名称（文件名称）</span></span><br><span class="line">        mv.set<span class="constructor">ViewName(<span class="string">"show"</span>)</span>;</span><br><span class="line">        return mv;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p><strong>注意：</strong><br>在提交请求参数时，get请求方式中文没有乱码。<br>使用post方式提交请求，中文有乱码，需要使用过滤器处理乱码的问题。过滤器可以自定义，也可使用框架中提供的过滤器CharacterEncodingFilter        </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--注册声明过滤器，解决post请求乱码的问题--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--设置项目中使用的字符编码--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--强制请求对象（HttpServletRequest）使用encoding编码的值--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceRequestEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--强制应答对象（HttpServletResponse）使用encoding编码的值--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceResponseEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">           /*:表示强制所有的请求先通过过滤器处理。</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>SpringMVC</category>
      </categories>
      <tags>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC-转发和重定向</title>
    <url>/2020/07/19/SpringMVC-%E8%BD%AC%E5%8F%91%E5%92%8C%E9%87%8D%E5%AE%9A%E5%90%91/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>forward：表示转发<br>redirect：表示重定向<br>forward和redirect都是关键字，有一个共同的特点是<strong>不和视图解析器一同工作</strong><br>forward和redirect他们都可以访问视图文件，比如某个jsp ，html<br>forward:/hello.jsp  forward:/main.html<br>forward和redirect他们都可以访问其它的controller<br>forward:/some.do , redirect:/other.do<br>处理器方法可以返回ModelAndView, String , void 都可以使用forward，redirect</p>
<a id="more"></a>
<h1 id="forward"><a href="#forward" class="headerlink" title="forward"></a>forward</h1><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 处理器方法返回ModelAndView,实现转发forward</span></span><br><span class="line"><span class="comment">    * 语法： setViewName("forward:视图文件完整路径")</span></span><br><span class="line"><span class="comment">    * forward特点：不和视图解析器一同使用，就当项目中没有视图解析器</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   @<span class="constructor">RequestMapping(<span class="params">value</span> = <span class="string">"/doForward.do"</span>)</span></span><br><span class="line">   public ModelAndView <span class="keyword">do</span><span class="constructor">Some()</span>&#123;</span><br><span class="line">       ModelAndView mv  = <span class="keyword">new</span> <span class="constructor">ModelAndView()</span>;</span><br><span class="line">       mv.add<span class="constructor">Object(<span class="string">"msg"</span>,<span class="string">"欢迎使用springmvc做web开发"</span>)</span>;</span><br><span class="line">       mv.add<span class="constructor">Object(<span class="string">"fun"</span>,<span class="string">"执行的是doSome方法"</span>)</span>;</span><br><span class="line">       <span class="comment">//显示转发</span></span><br><span class="line">       <span class="comment">//mv.setViewName("forward:/WEB-INF/view/show.jsp");</span></span><br><span class="line">       mv.set<span class="constructor">ViewName(<span class="string">"forward:/hello.jsp"</span>)</span>;</span><br><span class="line">       return mv;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h1 id="redirect"><a href="#redirect" class="headerlink" title="redirect"></a>redirect</h1><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理器方法返回ModelAndView,实现重定向redirect</span></span><br><span class="line"><span class="comment">     * 语法：setViewName("redirect:视图完整路径")</span></span><br><span class="line"><span class="comment">     * redirect特点： 不和视图解析器一同使用，就当项目中没有视图解析器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 框架对重定向的操作：</span></span><br><span class="line"><span class="comment">     * 1.框架会把Model中的简单类型的数据，转为string使用，作为hello.jsp的get请求参数使用。</span></span><br><span class="line"><span class="comment">     *    目的是在 doRedirect.do 和 hello.jsp 两次请求之间传递数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 2.在目标hello.jsp页面可以使用参数集合对象 $&#123;param&#125;获取请求参数值</span></span><br><span class="line"><span class="comment">     *    $&#123;param.myname&#125;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 3.重定向不能访问/WEB-INF资源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @<span class="constructor">RequestMapping(<span class="params">value</span> = <span class="string">"/doRedirect.do"</span>)</span></span><br><span class="line">    public ModelAndView <span class="keyword">do</span><span class="constructor">WithRedirect(String <span class="params">name</span>,Integer <span class="params">age</span>)</span>&#123;</span><br><span class="line">        ModelAndView mv  = <span class="keyword">new</span> <span class="constructor">ModelAndView()</span>;</span><br><span class="line">        <span class="comment">//数据放入到 request作用域</span></span><br><span class="line">        mv.add<span class="constructor">Object(<span class="string">"myname"</span>,<span class="params">name</span>)</span>;</span><br><span class="line">        mv.add<span class="constructor">Object(<span class="string">"myage"</span>,<span class="params">age</span>)</span>;</span><br><span class="line">        <span class="comment">//重定向</span></span><br><span class="line">        <span class="comment">//mv.setViewName("redirect:/hello.jsp");</span></span><br><span class="line">        <span class="comment">//http://localhost:8080/ch08_forard_redirect/hello.jsp?myname=lisi&amp;myage=22</span></span><br><span class="line">        <span class="comment">//重定向不能访问/WEB-INF资源</span></span><br><span class="line">        mv.set<span class="constructor">ViewName(<span class="string">"redirect:/WEB-INF/view/show.jsp"</span>)</span>;</span><br><span class="line">        return mv;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>SpringMVC</category>
      </categories>
      <tags>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC-异常</title>
    <url>/2020/07/19/SpringMVC-%E5%BC%82%E5%B8%B8%E5%92%8C%E6%8B%A6%E6%88%AA%E5%99%A8/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>springmvc框架采用的是统一，全局的异常处理。把controller中的所有异常处理都集中到一个地方。 采用的是aop的思想。把业务逻辑和异常处理代码分开。解耦合。<br>使用两个注解1.@ExceptionHandler 2.@ControllerAdvice</p>
<a id="more"></a>
<h1 id="异常处理步骤"><a href="#异常处理步骤" class="headerlink" title="异常处理步骤"></a>异常处理步骤</h1><ol>
<li><p>新建一个自定义异常类 MyUserException , 再定义它的子类NameException ,AgeException    </p>
</li>
<li><p>在controller抛出NameException , AgeException    </p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public <span class="keyword">class</span> MyController &#123;</span><br><span class="line">@<span class="constructor">RequestMapping(<span class="params">value</span> = <span class="string">"/some.do"</span>)</span></span><br><span class="line">public ModelAndView <span class="keyword">do</span><span class="constructor">Some(String <span class="params">name</span>,Integer <span class="params">age</span>)</span> throws MyUserException &#123;</span><br><span class="line">        ModelAndView mv  = <span class="keyword">new</span> <span class="constructor">ModelAndView()</span>;</span><br><span class="line">        <span class="comment">//try &#123;</span></span><br><span class="line">            <span class="comment">//根据请求参数抛出异常</span></span><br><span class="line">            <span class="keyword">if</span> (!<span class="string">"zs"</span>.equals(name)) &#123;</span><br><span class="line">                throw <span class="keyword">new</span> <span class="constructor">NameException(<span class="string">"姓名不正确！！！"</span>)</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (age<span class="operator"> == </span>null<span class="operator"> || </span>age &gt; <span class="number">80</span>) &#123;</span><br><span class="line">                throw <span class="keyword">new</span> <span class="constructor">AgeException(<span class="string">"年龄比较大！！！"</span>)</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="comment">//&#125;catch(Exception e)&#123;</span></span><br><span class="line">        <span class="comment">//   e.printStackTrace();</span></span><br><span class="line">        <span class="comment">//&#125;</span></span><br><span class="line">        mv.add<span class="constructor">Object(<span class="string">"myname"</span>,<span class="params">name</span>)</span>;</span><br><span class="line">        mv.add<span class="constructor">Object(<span class="string">"myage"</span>,<span class="params">age</span>)</span>;</span><br><span class="line">        mv.set<span class="constructor">ViewName(<span class="string">"show"</span>)</span>;</span><br><span class="line">        return mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>创建一个普通类，作用全局异常处理类    </p>
<ol>
<li>在类的上面加入@ControllerAdvice</li>
<li>在类中定义方法，方法的上面加入@ExceptionHandler</li>
</ol>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//当年龄有问题时，抛出的异常</span></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">AgeException</span> <span class="keyword">extends</span> <span class="title">MyUserException</span> </span>&#123;</span><br><span class="line">    public <span class="type">AgeException</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="type">AgeException</span>(<span class="type">String</span> message) &#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"> public <span class="class"><span class="keyword">class</span> <span class="title">MyUserException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line">    public <span class="type">MyUserException</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="type">MyUserException</span>(<span class="type">String</span> message) &#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//表示当用户的姓名有异常，抛出NameException</span></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">NameException</span> <span class="keyword">extends</span> <span class="title">MyUserException</span> </span>&#123;</span><br><span class="line">    public <span class="type">NameException</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="type">NameException</span>(<span class="type">String</span> message) &#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ControllerAdvice : 控制器增强（也就是说给控制器类增加功能--异常处理功能）</span></span><br><span class="line"><span class="comment"> *  位置：在类的上面。</span></span><br><span class="line"><span class="comment"> *  特点：必须让框架知道这个注解所在的包名，需要在springmvc配置文件声明组件扫描器。</span></span><br><span class="line"><span class="comment"> *  指定@ControllerAdvice所在的包名</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">@ControllerAdvice</span><br><span class="line">public <span class="keyword">class</span> GlobalExceptionHandler &#123;</span><br><span class="line">    <span class="comment">//定义方法，处理发生的异常</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        处理异常的方法和控制器方法的定义一样， 可以有多个参数，可以有ModelAndView,</span></span><br><span class="line"><span class="comment">        String, void,对象类型的返回值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        形参：Exception，表示Controller中抛出的异常对象。</span></span><br><span class="line"><span class="comment">        通过形参可以获取发生的异常信息。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        @ExceptionHandler(异常的class)：表示异常的类型，当发生此类型异常时，</span></span><br><span class="line"><span class="comment">         由当前方法处理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    @<span class="constructor">ExceptionHandler(<span class="params">value</span> = NameException.<span class="params">class</span>)</span></span><br><span class="line">    public ModelAndView <span class="keyword">do</span><span class="constructor">NameException(Exception <span class="params">exception</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//处理NameException的异常。</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">           异常发生处理逻辑：</span></span><br><span class="line"><span class="comment">           1.需要把异常记录下来，记录到数据库，日志文件。</span></span><br><span class="line"><span class="comment">             记录日志发生的时间，哪个方法发生的，异常错误内容。</span></span><br><span class="line"><span class="comment">           2.发送通知，把异常的信息通过邮件，短信，微信发送给相关人员。</span></span><br><span class="line"><span class="comment">           3.给用户友好的提示。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> <span class="constructor">ModelAndView()</span>;</span><br><span class="line">        mv.add<span class="constructor">Object(<span class="string">"msg"</span>,<span class="string">"姓名必须是zs，其它用户不能访问"</span>)</span>;</span><br><span class="line">        mv.add<span class="constructor">Object(<span class="string">"ex"</span>,<span class="params">exception</span>)</span>;</span><br><span class="line">        mv.set<span class="constructor">ViewName(<span class="string">"nameError"</span>)</span>;</span><br><span class="line">        return mv;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理AgeException</span></span><br><span class="line">    @<span class="constructor">ExceptionHandler(<span class="params">value</span> = AgeException.<span class="params">class</span>)</span></span><br><span class="line">    public ModelAndView <span class="keyword">do</span><span class="constructor">AgeException(Exception <span class="params">exception</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//处理AgeException的异常。</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">           异常发生处理逻辑：</span></span><br><span class="line"><span class="comment">           1.需要把异常记录下来， 记录到数据库，日志文件。</span></span><br><span class="line"><span class="comment">             记录日志发生的时间，哪个方法发生的，异常错误内容。</span></span><br><span class="line"><span class="comment">           2.发送通知，把异常的信息通过邮件，短信，微信发送给相关人员。</span></span><br><span class="line"><span class="comment">           3.给用户友好的提示。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> <span class="constructor">ModelAndView()</span>;</span><br><span class="line">        mv.add<span class="constructor">Object(<span class="string">"msg"</span>,<span class="string">"你的年龄不能大于80"</span>)</span>;</span><br><span class="line">        mv.add<span class="constructor">Object(<span class="string">"ex"</span>,<span class="params">exception</span>)</span>;</span><br><span class="line">        mv.set<span class="constructor">ViewName(<span class="string">"ageError"</span>)</span>;</span><br><span class="line">        return mv;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理其它异常， NameException, AgeException以外，不知类型的异常</span></span><br><span class="line">    @ExceptionHandler</span><br><span class="line">    public ModelAndView <span class="keyword">do</span><span class="constructor">OtherException(Exception <span class="params">exception</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//处理其它异常</span></span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> <span class="constructor">ModelAndView()</span>;</span><br><span class="line">        mv.add<span class="constructor">Object(<span class="string">"msg"</span>,<span class="string">"你的年龄不能大于80"</span>)</span>;</span><br><span class="line">        mv.add<span class="constructor">Object(<span class="string">"ex"</span>,<span class="params">exception</span>)</span>;</span><br><span class="line">        mv.set<span class="constructor">ViewName(<span class="string">"defaultError"</span>)</span>;</span><br><span class="line">        return mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>创建处理异常的视图页面    </p>
</li>
<li><p>创建springmvc的配置文件    </p>
<ol>
<li>组件扫描器，扫描@Controller注解</li>
<li>组件扫描器，扫描@ControllerAdvice所在的包名</li>
<li>声明注解驱动</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--声明组件扫描器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.bjpowernode.controller"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--声明 springmvc框架中的视图解析器， 帮助开发人员设置视图文件的路径--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span>  <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--前缀：视图文件的路径--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/view/"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--后缀：视图文件的扩展名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--处理需要的两步--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.bjpowernode.handler"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>SpringMVC</category>
      </categories>
      <tags>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>Start</title>
    <url>/2020/06/22/Start/</url>
    <content><![CDATA[<p>hello world …..</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">hello</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"Hello World !"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>SpringMVC-概述</title>
    <url>/2020/07/14/SpringMVC-%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>SpringMVC是基于spring的一个框架，实际上就是spring的一个模块，专门是做web开发的。可以理解是servlet的一个升级。web开发底层是servlet，框架是在servlet基础上面加入一些功能，让你做web开发方便。       </p>
<p>SpringMVC就是一个Spring。Spring是容器，ioc能够管理对象，使用bean，@Component, @Repository, @Service, @Controller。<br>SpringMVC能够创建对象，放入到容器中（SpringMVC容器），springmvc容器中放的是控制器对象。        </p>
<a id="more"></a>
<p>我们要做的是使用@Contorller创建控制器对象，把对象放入到springmvc容器中，把创建的对象作为控制器使用这个控制器对象能接收用户的请求， 显示处理结果，就当做是一个servlet使用。        </p>
<p>使用@Controller注解创建的是一个普通类的对象，不是Servlet。springmvc赋予了控制器对象一些额外的功能。   </p>
<p>web开发底层是servlet，springmvc中有一个对象是Servlet： DispatherServlet(中央调度器)。    </p>
<p>DispatherServlet: 负责接收用户的所有请求，用户把请求给了DispatherServlet，之后DispatherServlet把请求转发给我们的Controller对象， 最后是Controller对象处理请求。   </p>
<p>index.jsp—–DispatherServlet(Servlet)—-转发，分配给—Controller对象（@Controller注解创建的对象）   </p>
<h1 id="SpringMVC请求的处理流程"><a href="#SpringMVC请求的处理流程" class="headerlink" title="SpringMVC请求的处理流程"></a>SpringMVC请求的处理流程</h1><ol>
<li>发起some.do   </li>
<li>tomcat(web.xml–url-pattern知道 *.do的请求给DispatcherServlet)      </li>
<li>DispatcherServlet（根据springmvc.xml配置知道 some.do—doSome()）    </li>
<li>DispatcherServlet把some.do转发个MyController.doSome()方法       </li>
<li>框架执行doSome（）把得到ModelAndView进行处理， 转发到show.jsp       </li>
</ol>
<p>上面的过程简化的方式<br>some.do—DispatcherServlet—MyController             </p>
<h1 id="创建一个简单的SpringMVC项目"><a href="#创建一个简单的SpringMVC项目" class="headerlink" title="创建一个简单的SpringMVC项目"></a>创建一个简单的SpringMVC项目</h1><p>需求：用户在页面发起一个请求，请求交给springmvc的控制器对象，并显示请求的处理结果（在结果页面显示一个欢迎语句）。  </p>
<p>实现步骤：        </p>
<ol>
<li><p>新建web maven工程       </p>
</li>
<li><p>加入依赖     </p>
</li>
<li><p>在web.xml中注册springmvc框架的核心对象DispatcherServlet</p>
<ol>
<li>DispatcherServlet叫做中央调度器， 是一个servlet， 它的父类是继承HttpServlet            </li>
<li>DispatcherServlet也叫做前端控制器（front controller）            </li>
<li>DispatcherServlet负责接收用户提交的请求， 调用其它的控制器对象，并把请求的处理结果显示给用户        </li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!--声明，注册springmvc的核心对象DispatcherServlet</span></span><br><span class="line"><span class="comment">        需要在tomcat服务器启动后，创建DispatcherServlet对象的实例。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        为什么要创建DispatcherServlet对象的实例呢？</span></span><br><span class="line"><span class="comment">        因为DispatcherServlet在他的创建过程中， 会同时创建springmvc容器对象，</span></span><br><span class="line"><span class="comment">        读取springmvc的配置文件，把这个配置文件中的对象都创建好， 当用户发起</span></span><br><span class="line"><span class="comment">        请求时就可以直接使用对象了。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        servlet的初始化会执行init（）方法。 DispatcherServlet在init（）中&#123;</span></span><br><span class="line"><span class="comment">           //创建容器，读取配置文件</span></span><br><span class="line"><span class="comment">           WebApplicationContext ctx = new ClassPathXmlApplicationContext("springmvc.xml");</span></span><br><span class="line"><span class="comment">           //把容器对象放入到ServletContext中</span></span><br><span class="line"><span class="comment">           getServletContext().setAttribute(key, ctx);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">		springmvc创建容器对象时，读取的配置文件默认是</span></span><br><span class="line"><span class="comment">		/WEB-INF/&lt;servlet-name&gt;-servlet.xml .--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>myweb<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--自定义springmvc读取的配置文件的位置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--springmvc的配置文件的位置的属性--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--指定自定义文件的位置--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--在tomcat启动后，创建Servlet对象</span></span><br><span class="line"><span class="comment">            load-on-startup:表示tomcat启动后创建对象的顺序。它的值是整数，数值越小，</span></span><br><span class="line"><span class="comment">                            tomcat创建对象的时间越早。 大于等于0的整数。</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>myweb<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            使用框架的时候， url-pattern可以使用两种值</span></span><br><span class="line"><span class="comment">            1. 使用扩展名方式， 语法 *.xxxx , xxxx是自定义的扩展名。 常用的方式 *.do, *.action, *.mvc等等</span></span><br><span class="line"><span class="comment">               不能使用 *.jsp</span></span><br><span class="line"><span class="comment">               http://localhost:8080/myweb/some.do</span></span><br><span class="line"><span class="comment">               http://localhost:8080/myweb/other.do</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            2.使用斜杠 "/"</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建一个发起请求的页面 index.jsp</p>
</li>
<li><p>创建控制器(处理器)类</p>
<ol>
<li>在类的上面加入@Controller注解，创建对象，并放入到springmvc容器中</li>
<li>在类中的方法上面加入@RequestMapping注解    </li>
</ol>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"> <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> *  </span>@Controller:创建处理器对象，对象放在springmvc容器中。</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> *  </span>位置：在类的上面</span></span></span><br><span class="line"><span class="comment"><span class="markdown"> */</span></span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MyController</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">       处理用户提交的请求，springmvc中是使用方法来处理的。</span></span><br><span class="line"><span class="comment">       方法是自定义的， 可以有多种返回值， 多种参数，方法名称自定义。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>准备使用doSome方法处理some.do请求。</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@RequestMapping: 请求映射，作用是把一个请求地址和一个方法绑定在一起。</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     *  </span>一个请求指定一个方法处理。</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     *  </span>属性：1. value 是一个String，表示请求的uri地址的（some.do）。</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     *             </span>2. value的值必须是唯一的， 不能重复。 在使用时，推荐地址以“/”。</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>位置：1.在方法的上面，常用。</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     *            </span>2.在类的上面。</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     *  </span>说明：使用RequestMapping修饰的方法叫做处理器方法或者控制器方法。</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     *  </span>使用@RequestMapping修饰的方法可以处理请求的，类似Servlet中的doGet, doPost。</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     *</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     *  </span>返回值：ModelAndView 表示本次请求的处理结果。</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     *   </span>Model: 数据，请求处理完成后，要显示给用户的数据。</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     *   </span>View: 视图，比如jsp等等。</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     */</span></span></span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = &#123;<span class="string">"/some.do"</span>,<span class="string">"/first.do"</span>&#125;)</span><br><span class="line">    public ModelAndView doSome()&#123;</span><br><span class="line">    ModelAndView mv  = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">    <span class="comment">//添加数据， 框架在请求的最后把数据放入到request作用域。</span></span><br><span class="line">    <span class="comment">//request.setAttribute("msg","欢迎使用springmvc做web开发");</span></span><br><span class="line">    mv.addObject(<span class="string">"msg"</span>,<span class="string">"欢迎使用springmvc做web开发"</span>);</span><br><span class="line">    mv.addObject(<span class="string">"fun"</span>,<span class="string">"执行的是doSome方法"</span>);</span><br><span class="line">    <span class="comment">//指定视图, 指定视图的完整路径</span></span><br><span class="line">    <span class="comment">//框架对视图执行的forward操作，request.getRequestDispather("/show.jsp).forward(...)</span></span><br><span class="line">    <span class="comment">//mv.setViewName("/show.jsp");</span></span><br><span class="line">    <span class="comment">//mv.setViewName("/WEB-INF/view/show.jsp");</span></span><br><span class="line">    <span class="comment">//mv.setViewName("/WEB-INF/view/other.jsp");</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//当配置了视图解析器后，可以使用逻辑名称（文件名），指定视图</span></span><br><span class="line">    <span class="comment">//框架会使用视图解析器的前缀 + 逻辑名称 + 后缀 组成完成路径， 这里就是字符连接操作</span></span><br><span class="line">    <span class="comment">///<span class="markdown">WEB-INF/view/ + show + .jsp</span></span></span><br><span class="line">    mv.setViewName(<span class="string">"show"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//返回mv</span></span><br><span class="line">    <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>创建一个作为结果的jsp，显示请求的处理结果。    </p>
</li>
<li><p>创建springmvc的配置文件（spring的配置文件一样）            </p>
<ol>
<li>声明组件扫描器，指定@Contorller注解所在的包名</li>
<li>声明视图解析器，帮助处理视图的     </li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!--声明组件扫描器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.fubuking.controller"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--声明 springmvc框架中的视图解析器， 帮助开发人员设置视图文件的路径--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span>  <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--前缀：视图文件的路径--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/view/"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--后缀：视图文件的扩展名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>SpringMVC</category>
      </categories>
      <tags>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-原型模式</title>
    <url>/2020/10/13/%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="克隆羊问题"><a href="#克隆羊问题" class="headerlink" title="克隆羊问题"></a>克隆羊问题</h1><p>现在有一只羊 tom，姓名为: tom, 年龄为：1，颜色为：白色，请编写程序创建和 tom 羊 属性完全相同的 10只羊。</p>
<a id="more"></a>
<h1 id="传统方式解决克隆羊问题"><a href="#传统方式解决克隆羊问题" class="headerlink" title="传统方式解决克隆羊问题"></a>传统方式解决克隆羊问题</h1><p>1) 思路分析(图解)<br><img src="/2020/10/13/%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/1.jpg" alt="01"><br>2) 代码演示</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">package com.atguigu.prototype;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">class</span> Client &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String<span class="literal">[]</span> args) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">//传统的方法</span></span><br><span class="line">Sheep sheep = <span class="keyword">new</span> <span class="constructor">Sheep(<span class="string">"tom"</span>, 1, <span class="string">"白色"</span>)</span>;</span><br><span class="line"></span><br><span class="line">Sheep sheep2 = <span class="keyword">new</span> <span class="constructor">Sheep(<span class="params">sheep</span>.<span class="params">getName</span>()</span>, sheep.get<span class="constructor">Age()</span>, sheep.get<span class="constructor">Color()</span>); Sheep sheep3 = <span class="keyword">new</span> <span class="constructor">Sheep(<span class="params">sheep</span>.<span class="params">getName</span>()</span>, sheep.get<span class="constructor">Age()</span>, sheep.get<span class="constructor">Color()</span>); Sheep sheep4 = <span class="keyword">new</span> <span class="constructor">Sheep(<span class="params">sheep</span>.<span class="params">getName</span>()</span>, sheep.get<span class="constructor">Age()</span>, sheep.get<span class="constructor">Color()</span>);</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Sheep sheep5 = <span class="keyword">new</span> <span class="constructor">Sheep(<span class="params">sheep</span>.<span class="params">getName</span>()</span>, sheep.get<span class="constructor">Age()</span>, sheep.get<span class="constructor">Color()</span>);</span><br><span class="line"><span class="comment">//....</span></span><br><span class="line"></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(sheep); <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(sheep2); <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(sheep3); <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(sheep4); <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(sheep5);</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="传统的方式的优缺点"><a href="#传统的方式的优缺点" class="headerlink" title="传统的方式的优缺点"></a>传统的方式的优缺点</h1><p>1)    优点是比较好理解，简单易操作。<br>2)    在创建新的对象时，总是需要重新获取原始对象的属性，如果创建的对象比较复杂时，效率较低<br>3)    总是需要重新初始化对象，而不是动态地获得对象运行时的状态, 不够灵活<br>4)    改进的思路分析</p>
<p>思路：Java 中 Object 类是所有类的根类，Object 类提供了一个 clone()方法，该方法可以将一个 Java 对象复制一份，但是需要实现 clone 的 Java 类必须要实现一个接口 Cloneable，该接口表示该类能够复制且具有复制的能力  =&gt;原型模式。</p>
<h1 id="原型模式-基本介绍"><a href="#原型模式-基本介绍" class="headerlink" title="原型模式-基本介绍"></a>原型模式-基本介绍</h1><p>1)    原型模式(Prototype 模式)是指：用原型实例指定创建对象的种类，并且通过拷贝这些原型，创建新的对象</p>
<p>2)    原型模式是一种创建型设计模式，允许一个对象再创建另外一个可定制的对象，无需知道如何创建的细节</p>
<p>3)    工作原理是:通过将一个原型对象传给那个要发动创建的对象，这个要发动创建的对象通过请求原型对象拷贝它们自己来实施创建，即 对象.clone()</p>
<h1 id="原型模式原理结构图-uml-类图"><a href="#原型模式原理结构图-uml-类图" class="headerlink" title="原型模式原理结构图-uml 类图"></a>原型模式原理结构图-uml 类图</h1><p><img src="/2020/10/13/%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/2.jpg" alt="02"><br>原理结构图说明:    </p>
<p>1)    Prototype : 原型类，声明一个克隆自己的接口<br>2)    ConcretePrototype: 具体的原型类,  实现一个克隆自己的操作<br>3)    Client: 让一个原型对象克隆自己，从而创建一个新的对象(属性一样）</p>
<h1 id="原型模式解决克隆羊问题的应用实例"><a href="#原型模式解决克隆羊问题的应用实例" class="headerlink" title="原型模式解决克隆羊问题的应用实例"></a>原型模式解决克隆羊问题的应用实例</h1><p>使用原型模式改进传统方式，让程序具有更高的效率和扩展性。</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sheep</span> <span class="title">implements</span> <span class="title">Cloneable</span> &#123;</span> <span class="keyword">private</span> <span class="keyword">String</span> name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age; <span class="keyword">private</span> <span class="keyword">String</span> color;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">String</span> address = <span class="string">"蒙古羊"</span>;</span><br><span class="line"><span class="keyword">public</span> Sheep <span class="keyword">friend</span>; <span class="comment">//是对象,  克隆是会如何处理,  默认是浅拷贝</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Sheep</span><span class="params">(<span class="keyword">String</span> name, <span class="keyword">int</span> age, <span class="keyword">String</span> color)</span> </span>&#123; super();</span><br><span class="line"><span class="keyword">this</span>.name = name; <span class="keyword">this</span>.age = age; <span class="keyword">this</span>.color = color;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getName</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="keyword">String</span> name)</span> </span>&#123; <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getColor</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> color;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setColor</span><span class="params">(<span class="keyword">String</span> color)</span> </span>&#123; <span class="keyword">this</span>.color = color;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Sheep [name="</span> + name + <span class="string">", age="</span> + age + <span class="string">", color="</span> + color + <span class="string">", address="</span> + address + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//克隆该实例，使用默认的 clone 方法来完成</span></span><br><span class="line">@Override</span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span>	</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Sheep sheep = null; <span class="keyword">try</span> &#123;</span><br><span class="line">sheep = (Sheep)super.clone();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> handle exception System.out.println(e.getMessage());</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">// TODO Auto-generated method stub return sheep;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">package com.atguigu.prototype.improve;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> &#123;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">System.out.<span class="built_in">println</span>(<span class="string">"原型模式完成对象的创建"</span>);</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">Sheep sheep = <span class="keyword">new</span> Sheep(<span class="string">"tom"</span>, <span class="number">1</span>, <span class="string">"白色"</span>);</span><br><span class="line"></span><br><span class="line">sheep.<span class="keyword">friend</span> = <span class="keyword">new</span> Sheep(<span class="string">"jack"</span>, <span class="number">2</span>, <span class="string">"黑色"</span>);</span><br><span class="line"></span><br><span class="line">Sheep sheep2 = (Sheep)sheep.clone(); <span class="comment">//克隆Sheep sheep3 = (Sheep)sheep.clone(); //克隆Sheep sheep4 = (Sheep)sheep.clone(); //克隆Sheep sheep5 = (Sheep)sheep.clone(); //克隆</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">System.out.<span class="built_in">println</span>(<span class="string">"sheep2 ="</span> + sheep2 + <span class="string">"sheep2.friend="</span> + sheep2.<span class="keyword">friend</span>.hashCode());</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">System.out.<span class="built_in">println</span>(<span class="string">"sheep3 ="</span> + sheep3 + <span class="string">"sheep3.friend="</span> + sheep3.<span class="keyword">friend</span>.hashCode()); System.out.<span class="built_in">println</span>(<span class="string">"sheep4 ="</span> + sheep4 + <span class="string">"sheep4.friend="</span> + sheep4.<span class="keyword">friend</span>.hashCode()); System.out.<span class="built_in">println</span>(<span class="string">"sheep5 ="</span> + sheep5 + <span class="string">"sheep5.friend="</span> + sheep5.<span class="keyword">friend</span>.hashCode());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="原型模式在-Spring-框架中源码分析"><a href="#原型模式在-Spring-框架中源码分析" class="headerlink" title="原型模式在 Spring 框架中源码分析"></a>原型模式在 Spring 框架中源码分析</h1><p>1)    Spring 中原型 bean 的创建，就是原型模式的应用<br>2)    代码分析+Debug 源码<br><img src="/2020/10/13/%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/3.jpg" alt="03"></p>
<h1 id="深入讨论-浅拷贝和深拷贝"><a href="#深入讨论-浅拷贝和深拷贝" class="headerlink" title="深入讨论-浅拷贝和深拷贝"></a>深入讨论-浅拷贝和深拷贝</h1><h2 id="浅拷贝的介绍"><a href="#浅拷贝的介绍" class="headerlink" title="浅拷贝的介绍"></a>浅拷贝的介绍</h2><p>1)    对于数据类型是基本数据类型的成员变量，浅拷贝会直接进行值传递，也就是将该属性值复制一份给新的对象。</p>
<p>2)    对于数据类型是引用数据类型的成员变量，比如说成员变量是某个数组、某个类的对象等，那么浅拷贝会进行引用传递，也就是只是将该成员变量的引用值（内存地址）复制一份给新的对象。因为实际上两个对象的该成员变量都指向同一个实例。在这种情况下，在一个对象中修改该成员变量会影响到另一个对象的该成员变量值</p>
<p>3)    前面我们克隆羊就是浅拷贝</p>
<p>4)    浅拷贝是使用默认的 clone()方法来实现<br>sheep = (Sheep) super.clone();</p>
<h2 id="深拷贝基本介绍"><a href="#深拷贝基本介绍" class="headerlink" title="深拷贝基本介绍"></a>深拷贝基本介绍</h2><p>1)    复制对象的所有基本数据类型的成员变量值</p>
<p>2)    为所有引用数据类型的成员变量申请存储空间，并复制每个引用数据类型成员变量所引用的对象，直到该对象可达的所有对象。也就是说，对象进行深拷贝要对整个对象(包括对象的引用类型)进行拷贝</p>
<p>3)    深拷贝实现方式 1：重写 clone 方法来实现深拷贝</p>
<p>4)    深拷贝实现方式 2：通过对象序列化实现深拷贝(推荐)</p>
<h1 id="深拷贝应用实例"><a href="#深拷贝应用实例" class="headerlink" title="深拷贝应用实例"></a>深拷贝应用实例</h1><p>1)    使用 重写 clone 方法实现深拷贝<br>2)    使用序列化来实现深拷贝<br>3)    代码演示</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.prototype.deepclone;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeepCloneableTarget</span> <span class="keyword">implements</span> <span class="title">Serializable</span>, <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String cloneName;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String cloneClass;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DeepCloneableTarget</span><span class="params">(String cloneName, String cloneClass)</span> </span>&#123; <span class="keyword">this</span>.cloneName = cloneName;</span><br><span class="line"><span class="keyword">this</span>.cloneClass = cloneClass;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//因为该类的属性，都是 String ,  因此我们这里使用默认的 clone 完成即可</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123; <span class="keyword">return</span> <span class="keyword">super</span>.clone();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="keyword">package</span> com.atguigu.prototype.deepclone;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream; <span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream; <span class="keyword">import</span> java.io.ObjectOutputStream; <span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeepProtoType</span> <span class="keyword">implements</span> <span class="title">Serializable</span>, <span class="title">Cloneable</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String name; <span class="comment">//String 属 性</span></span><br><span class="line"><span class="keyword">public</span> DeepCloneableTarget deepCloneableTarget;<span class="comment">// 引用类型</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DeepProtoType</span><span class="params">()</span> </span>&#123; <span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//深拷贝 - 方式 1  使用 clone 方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Object deep = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">//这里完成对基本数据类型(属性)和 String 的克隆</span></span><br><span class="line">deep = <span class="keyword">super</span>.clone();</span><br><span class="line"><span class="comment">//对引用类型的属性，进行单独处理</span></span><br><span class="line">DeepProtoType deepProtoType = (DeepProtoType)deep;</span><br><span class="line">deepProtoType.deepCloneableTarget	= (DeepCloneableTarget)deepCloneableTarget.clone();</span><br><span class="line"></span><br><span class="line"><span class="comment">// TODO Auto-generated method stub return deepProtoType;</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//深拷贝 - 方式 2 通过对象的序列化实现 (推荐) public Object deepClone() &#123;</span></span><br><span class="line"><span class="comment">//创建流对象ByteArrayOutputStream bos = null; ObjectOutputStream oos = null; ByteArrayInputStream bis = null; ObjectInputStream ois = null;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//序列化</span></span><br><span class="line">bos = <span class="keyword">new</span> ByteArrayOutputStream(); oos = <span class="keyword">new</span> ObjectOutputStream(bos);</span><br><span class="line">oos.writeObject(<span class="keyword">this</span>); <span class="comment">//当前这个对象以对象流的方式输出</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//反序列化</span></span><br><span class="line">bis = <span class="keyword">new</span> ByteArrayInputStream(bos.toByteArray()); ois = <span class="keyword">new</span> ObjectInputStream(bis);</span><br><span class="line">DeepProtoType copyObj = (DeepProtoType)ois.readObject();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> copyObj;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> handle exception e.printStackTrace();</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">//关闭流 try &#123;</span></span><br><span class="line">bos.close();</span><br><span class="line">oos.close();</span><br><span class="line">bis.close();</span><br><span class="line">ois.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e2) &#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> handle exception System.out.println(e2.getMessage());</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Client.java</span></span><br><span class="line"><span class="keyword">package</span> com.atguigu.prototype.deepclone;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub DeepProtoType p = new DeepProtoType(); p.name = "宋江";</span></span><br><span class="line">p.deepCloneableTarget = <span class="keyword">new</span> DeepCloneableTarget(<span class="string">"大牛"</span>, <span class="string">"小牛"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式 1  完成深拷贝</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//	DeepProtoType p2 = (DeepProtoType) p.clone();</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//	System.out.println("p.name=" + p.name + "p.deepCloneableTarget=" + p.deepCloneableTarget.hashCode());</span></span><br><span class="line"><span class="comment">//	System.out.println("p2.name=" + p.name + "p2.deepCloneableTarget=" + p2.deepCloneableTarget.hashCode());</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方式 2  完成深拷贝</span></span><br><span class="line">DeepProtoType p2 = (DeepProtoType) p.deepClone();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"p.name="</span> + p.name + <span class="string">"p.deepCloneableTarget="</span> + p.deepCloneableTarget.hashCode()); System.out.println(<span class="string">"p2.name="</span> + p.name + <span class="string">"p2.deepCloneableTarget="</span> + p2.deepCloneableTarget.hashCode());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="原型模式的注意事项和细节"><a href="#原型模式的注意事项和细节" class="headerlink" title="原型模式的注意事项和细节"></a>原型模式的注意事项和细节</h1><p>1)    创建新的对象比较复杂时，可以利用原型模式简化对象的创建过程，同时也能够提高效率</p>
<p>2)    不用重新初始化对象，而是动态地获得对象运行时的状态</p>
<p>3)    如果原始对象发生变化(增加或者减少属性)，其它克隆对象的也会发生相应的变化，无需修改代码</p>
<p>4)    在实现深克隆的时候可能需要比较复杂的代码</p>
<p>5)    缺点：需要为每一个类配备一个克隆方法，这对全新的类来说不是很难，但对已有的类进行改造时，需要修改其源代码，违背了 ocp 原则</p>
]]></content>
  </entry>
  <entry>
    <title>SpringMVC-返回值</title>
    <url>/2020/07/17/SpringMVC-%E8%BF%94%E5%9B%9E%E5%80%BC/</url>
    <content><![CDATA[<h1 id="处理器方法的返回值表示请求的处理结果"><a href="#处理器方法的返回值表示请求的处理结果" class="headerlink" title="处理器方法的返回值表示请求的处理结果"></a>处理器方法的返回值表示请求的处理结果</h1><ol>
<li>ModelAndView: 有数据和视图，对视图执行forward        </li>
<li>String:表示视图，可以逻辑名称，也可以是完整视图路径    </li>
<li>void: 不能表示数据，也不能表示视图<br>在处理ajax的时候，可以使用void返回值。通过HttpServletResponse输出数据。响应ajax请求。<br>ajax请求服务器端返回的就是数据，和视图无关。        </li>
<li>Object：例如String，Integer，Map，List，Student等等都是对象<br>对象有属性，属性就是数据。所以返回Object表示数据，和视图无关。<br>可以使用对象表示的数据，响应ajax请求。    <a id="more"></a>    

</li>
</ol>
<h1 id="处理器方法返回ModelAndView"><a href="#处理器方法返回ModelAndView" class="headerlink" title="处理器方法返回ModelAndView"></a>处理器方法返回ModelAndView</h1><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">@<span class="constructor">RequestMapping(<span class="params">value</span> = <span class="string">"/receiveparam.do"</span>)</span></span><br><span class="line">public ModelAndView receive<span class="constructor">Param(@RequestParam(<span class="params">value</span> = <span class="string">"rname"</span>,<span class="params">required</span> = <span class="params">false</span>)</span> String name,</span><br><span class="line">                                     @<span class="constructor">RequestParam(<span class="params">value</span> = <span class="string">"rage"</span>,<span class="params">required</span> = <span class="params">false</span>)</span> Integer age)&#123;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"doSome, name="</span>+name+<span class="string">"   age="</span>+age);</span><br><span class="line">        ModelAndView mv  = <span class="keyword">new</span> <span class="constructor">ModelAndView()</span>;</span><br><span class="line">        mv.add<span class="constructor">Object(<span class="string">"myname"</span>,<span class="params">name</span>)</span>;</span><br><span class="line">        mv.add<span class="constructor">Object(<span class="string">"myage"</span>,<span class="params">age</span>)</span>;</span><br><span class="line">        <span class="comment">//show是视图文件的逻辑名称（文件名称）</span></span><br><span class="line">        mv.set<span class="constructor">ViewName(<span class="string">"show"</span>)</span>;</span><br><span class="line">        return mv;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h1 id="处理器方法返回String"><a href="#处理器方法返回String" class="headerlink" title="处理器方法返回String"></a>处理器方法返回String</h1><ol>
<li><p>表示逻辑视图名称，需要配置视图解析器    </p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">@<span class="constructor">RequestMapping(<span class="params">value</span> = <span class="string">"/returnString-view.do"</span>)</span></span><br><span class="line">public String <span class="keyword">do</span><span class="constructor">ReturnView(HttpServletRequest <span class="params">request</span>,String <span class="params">name</span>, Integer <span class="params">age</span>)</span>&#123;</span><br><span class="line">       <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"doReturnView, name="</span>+name+<span class="string">"   age="</span>+age);</span><br><span class="line">       <span class="comment">//可以自己手工添加数据到request作用域</span></span><br><span class="line">       request.set<span class="constructor">Attribute(<span class="string">"myname"</span>,<span class="params">name</span>)</span>;</span><br><span class="line">       request.set<span class="constructor">Attribute(<span class="string">"myage"</span>,<span class="params">age</span>)</span>;</span><br><span class="line">       <span class="comment">// show : 逻辑视图名称，项目中配置了视图解析器</span></span><br><span class="line">       </span><br><span class="line">       <span class="comment">//表示完整视图路径，此时不能配置视图解析器</span></span><br><span class="line">       <span class="comment">//return "/WEB-INF/view/show.jsp";</span></span><br><span class="line">      </span><br><span class="line">       <span class="comment">// 框架对视图执行forward转发操作</span></span><br><span class="line">       return <span class="string">"show"</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>表示数据，不是视图<br>区分返回值String是数据，还是视图，看有没有@ResponseBody注解<br>如果有@ResponseBody注解，返回String就是数据，反之就是视图<br>默认使用“text/plain;charset=ISO-8859-1”作为contentType,导致中文有乱码<br>解决方案：给RequestMapping增加一个属性 produces，使用这个属性指定新的contentType    </p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">@<span class="constructor">RequestMapping(<span class="params">value</span> = <span class="string">"/returnStringData.do"</span>,<span class="params">produces</span> = <span class="string">"text/plain;charset=utf-8"</span>)</span></span><br><span class="line">   @ResponseBody</span><br><span class="line">   public String <span class="keyword">do</span><span class="constructor">StringData(String <span class="params">name</span>,Integer <span class="params">age</span>)</span>&#123;</span><br><span class="line">       return <span class="string">"Hello SpringMVC 返回对象，表示数据"</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h1 id="处理器方法返回void，响应ajax请求"><a href="#处理器方法返回void，响应ajax请求" class="headerlink" title="处理器方法返回void，响应ajax请求"></a>处理器方法返回void，响应ajax请求</h1><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">//手工实现ajax，json数据：代码有重复的 1. java对象转为json； 2. 通过HttpServletResponse输出json数据</span></span><br><span class="line">    @<span class="constructor">RequestMapping(<span class="params">value</span> = <span class="string">"/returnVoid-ajax.do"</span>)</span></span><br><span class="line">    public void <span class="keyword">do</span><span class="constructor">ReturnVoidAjax(HttpServletResponse <span class="params">response</span>, String <span class="params">name</span>, Integer <span class="params">age</span>)</span> throws IOException &#123;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"===doReturnVoidAjax====, name="</span>+name+<span class="string">"   age="</span>+age);</span><br><span class="line">       <span class="comment">//处理ajax， 使用json做数据的格式</span></span><br><span class="line">       <span class="comment">//service调用完成了， 使用Student表示处理结果</span></span><br><span class="line">        Student student  = <span class="keyword">new</span> <span class="constructor">Student()</span>;</span><br><span class="line">        student.set<span class="constructor">Name(<span class="string">"张飞同学"</span>)</span>;</span><br><span class="line">        student.set<span class="constructor">Age(28)</span>;</span><br><span class="line"></span><br><span class="line">        String json = <span class="string">""</span>;</span><br><span class="line">        <span class="comment">//把结果的对象转为json格式的数据</span></span><br><span class="line">        <span class="keyword">if</span>( student != null)&#123;</span><br><span class="line">            ObjectMapper om  = <span class="keyword">new</span> <span class="constructor">ObjectMapper()</span>;</span><br><span class="line">            json  = om.write<span class="constructor">ValueAsString(<span class="params">student</span>)</span>;</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"student转换的json===="</span>+json);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出数据，响应ajax的请求</span></span><br><span class="line">        response.set<span class="constructor">ContentType(<span class="string">"application/json;charset=utf-8"</span>)</span>;</span><br><span class="line">        PrintWriter pw  = response.get<span class="constructor">Writer()</span>;</span><br><span class="line">        pw.println(json);</span><br><span class="line">        pw.flush<span class="literal">()</span>;</span><br><span class="line">        pw.close<span class="literal">()</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h1 id="处理器方法返回Object"><a href="#处理器方法返回Object" class="headerlink" title="处理器方法返回Object"></a>处理器方法返回Object</h1><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>处理器方法返回一个Student，通过框架转为json，响应ajax请求</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>@ResponseBody:</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     *    </span>作用：把处理器方法返回对象转为json后，通过HttpServletResponse输出给浏览器。</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     *    </span>位置：方法的定义上面。 和其它注解没有顺序的关系。</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     * </span>返回对象框架的处理流程：</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     *  </span>1. 框架会把返回Student类型，调用框架的中ArrayList<span class="xml"><span class="tag">&lt;<span class="name">HttpMessageConverter</span>&gt;</span></span>中每个类的canWrite()方法</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     *      </span>检查那个HttpMessageConverter接口的实现类能处理Student类型的数据--MappingJackson2HttpMessageConverter</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     *</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     *  </span>2.框架会调用实现类的write()， MappingJackson2HttpMessageConverter的write()方法</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     *     </span>把李四同学的student对象转为json， 调用Jackson的ObjectMapper实现转为json</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     *     </span>contentType: application/json;charset=utf-8</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     *</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">     *  </span>3.框架会调用@ResponseBody把2的结果数据输出到浏览器，ajax请求处理完成</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">     */</span></span></span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/returnStudentJson.do"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    public Student doStudentJsonObject(<span class="built_in">String</span> name, Integer age) &#123;</span><br><span class="line">        <span class="comment">//调用service，获取请求结果数据 ， Student对象表示结果数据</span></span><br><span class="line">        Student student = <span class="keyword">new</span> Student();</span><br><span class="line">        student.setName(<span class="string">"李四同学"</span>);</span><br><span class="line">        student.setAge(<span class="number">20</span>);</span><br><span class="line">        <span class="keyword">return</span> student; <span class="comment">// 会被框架转为json</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>springmvc处理器方法返回Object，可以转为json输出到浏览器。响应ajax的内部原理:    </p>
<ol>
<li><a href="mvc:annotation-driven">mvc:annotation-driven</a> 注解驱动。<br>注解驱动实现的功能是：完成java对象到json，xml，text，二进制等数据格式的转换。<br><a href="mvc:annotation-driven">mvc:annotation-driven</a>在加入到springmvc配置文件后， 会自动创建HttpMessageConverter接口的7个实现类对象，包括MappingJackson2HttpMessageConverter（使用jackson工具库中的ObjectMapper实现java对象转为json字符串）<br>HttpMessageConverter接口：消息转换器。<br>功能：定义了java转为json，xml等数据格式的方法。这个接口有很多的实现类。这些实现类完成java对象到json，java对象到xml，java对象到二进制数据的转换。</li>
<li>@ResponseBody注解<br>放在处理器方法的上面，通过HttpServletResponse输出数据，响应ajax请求的。</li>
</ol>
]]></content>
      <categories>
        <category>SpringMVC</category>
      </categories>
      <tags>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-七大设计原则</title>
    <url>/2020/10/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%B8%83%E5%A4%A7%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/</url>
    <content><![CDATA[<h1 id="设计模式的目的"><a href="#设计模式的目的" class="headerlink" title="设计模式的目的"></a>设计模式的目的</h1><p>编写软件过程中，程序员面临着来自耦合性，内聚性以及可维护性，可扩展性，重用性，灵活性等多方面的挑战，设计模式是为了让程序(软件)，具有更好的:    </p>
<p>1)  代码重用性 (即：相同功能的代码，不用多次编写)<br>2)  可读性 (即：编程规范性,  便于其他程序员的阅读和理解)<br>3)  可扩展性 (即：当需要增加新的功能时，非常的方便，称为可维护)<br>4)    可靠性 (即：当我们增加新的功能后，对原来的功能没有影响)<br>5)    使程序呈现高内聚，低耦合的特性</p>
<a id="more"></a>
<h1 id="设计模式七大原则"><a href="#设计模式七大原则" class="headerlink" title="设计模式七大原则"></a>设计模式七大原则</h1><p>设计模式原则，其实就是程序员在编程时，应当遵守的原则，也是各种设计模式的基础(即：设计模式为什么这样设计的依据)    </p>
<p><strong>设计模式常用的七大原则有:</strong>    </p>
<p>1)    单一职责原则<br>2)    接口隔离原则<br>3)    依赖倒转(倒置)原则<br>4)    里氏替换原则<br>5)    开闭原则<br>6)    迪米特法则<br>7)    合成复用原则    </p>
<h1 id="设计模式类型"><a href="#设计模式类型" class="headerlink" title="设计模式类型"></a>设计模式类型</h1><p>设计模式分为三种类型，共 23 种</p>
<p>1)    创建型模式：单例模式、抽象工厂模式、原型模式、建造者模式、工厂模式。</p>
<p>2)    结构型模式：适配器模式、桥接模式、装饰模式、组合模式、外观模式、享元模式、代理模式。    </p>
<p>3)    行为型模式：模版方法模式、命令模式、访问者模式、迭代器模式、观察者模式、中介者模式、备忘录模式、解释器模式（Interpreter 模式）、状态模式、策略模式、职责链模式(责任链模式)。    </p>
<h1 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h1><h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><p>对类来说的，即一个类应该只负责一项职责。如类 A 负责两个不同职责：职责 1，职责 2。当职责 1 需求变更而改变 A 时，可能造成职责 2 执行错误，所以需要将类 A 的粒度分解为 A1，A2。</p>
<h2 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h2><p>1)    方案 1：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleResponsibility1</span> &#123;</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">Vehicle vehicle = <span class="keyword">new</span> Vehicle();</span><br><span class="line">vehicle.<span class="built_in">run</span>(<span class="string">"摩托车"</span>);</span><br><span class="line">vehicle.<span class="built_in">run</span>(<span class="string">"汽车"</span>);</span><br><span class="line">vehicle.<span class="built_in">run</span>(<span class="string">"飞机"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 交通工具类</span></span><br><span class="line"><span class="comment">// 方式 1</span></span><br><span class="line"><span class="comment">// 1. 在方式 1 的 run 方法中，违反了单一职责原则</span></span><br><span class="line"><span class="comment">// 2. 解决的方案非常的简单，根据交通工具运行方法不同，分解成不同类即可</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span> &#123;</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(<span class="keyword">String</span> vehicle)</span> </span>&#123; System.out.<span class="built_in">println</span>(vehicle + <span class="string">" 在公路上运行...."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2)    方案 2：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleResponsibility2</span> &#123;</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		RoadVehicle roadVehicle = <span class="keyword">new</span> RoadVehicle();</span><br><span class="line">		roadVehicle.<span class="built_in">run</span>(<span class="string">"摩托车"</span>);</span><br><span class="line">		roadVehicle.<span class="built_in">run</span>(<span class="string">"汽车"</span>);</span><br><span class="line">		AirVehicle airVehicle = <span class="keyword">new</span> AirVehicle();</span><br><span class="line">		airVehicle.<span class="built_in">run</span>(<span class="string">"飞机"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">RoadVehicle roadVehicle = <span class="keyword">new</span> RoadVehicle();</span><br><span class="line">roadVehicle.<span class="built_in">run</span>(<span class="string">"摩托车"</span>);</span><br><span class="line">roadVehicle.<span class="built_in">run</span>(<span class="string">"汽车"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">AirVehicle airVehicle = <span class="keyword">new</span> AirVehicle();</span><br><span class="line"></span><br><span class="line">airVehicle.<span class="built_in">run</span>(<span class="string">"飞机"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方案 2 的分析</span></span><br><span class="line"><span class="comment">//1. 遵守单一职责原则</span></span><br><span class="line"><span class="comment">//2. 但是这样做的改动很大，即将类分解，同时修改客户端</span></span><br><span class="line"><span class="comment">//3. 改进：直接修改 Vehicle 类，改动的代码会比较少=&gt;方案 3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RoadVehicle</span> &#123;</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(<span class="keyword">String</span> vehicle)</span> </span>&#123; System.out.<span class="built_in">println</span>(vehicle + <span class="string">"公路运行"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AirVehicle</span> &#123;</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(<span class="keyword">String</span> vehicle)</span> </span>&#123; System.out.<span class="built_in">println</span>(vehicle + <span class="string">"天空运行"</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WaterVehicle</span> &#123;</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(<span class="keyword">String</span> vehicle)</span> </span>&#123; System.out.<span class="built_in">println</span>(vehicle + <span class="string">"水中运行"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3)    方案 3：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleResponsibility3</span> &#123;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub Vehicle2 vehicle2	= new Vehicle2();</span></span><br><span class="line">vehicle2.<span class="built_in">run</span>(<span class="string">"汽车"</span>);</span><br><span class="line">vehicle2.runWater(<span class="string">"轮船"</span>);</span><br><span class="line">vehicle2.runAir(<span class="string">"飞机"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//方式 3 的分析</span></span><br><span class="line"><span class="comment">//1. 这种修改方法没有对原来的类做大的修改，只是增加方法</span></span><br><span class="line"><span class="comment">//2. 这里虽然没有在类这个级别上遵守单一职责原则，但是在方法级别上，仍然是遵守单一职责</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle2</span> &#123;</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(<span class="keyword">String</span> vehicle)</span> </span>&#123;</span><br><span class="line"><span class="comment">//处理</span></span><br><span class="line">System.out.<span class="built_in">println</span>(vehicle + <span class="string">" 在公路上运行...."</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">runAir</span><span class="params">(<span class="keyword">String</span> vehicle)</span> </span>&#123; System.out.<span class="built_in">println</span>(vehicle + <span class="string">" 在天空上运行...."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">runWater</span><span class="params">(<span class="keyword">String</span> vehicle)</span> </span>&#123; System.out.<span class="built_in">println</span>(vehicle + <span class="string">" 在水中行...."</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="单一职责原则注意事项和细节"><a href="#单一职责原则注意事项和细节" class="headerlink" title="单一职责原则注意事项和细节"></a>单一职责原则注意事项和细节</h2><p>1)    降低类的复杂度，一个类只负责一项职责。<br>2)    提高类的可读性，可维护性<br>3)    降低变更引起的风险<br>4)    通常情况下，我们应当遵守单一职责原则，只有逻辑足够简单，才可以在代码级违反单一职责原则；只有类中方法数量足够少，可以在方法级别保持单一职责原则</p>
<h1 id="接口隔离原则-Interface-Segregation-Principle"><a href="#接口隔离原则-Interface-Segregation-Principle" class="headerlink" title="接口隔离原则(Interface Segregation Principle)"></a>接口隔离原则(Interface Segregation Principle)</h1><h2 id="基本介绍-1"><a href="#基本介绍-1" class="headerlink" title="基本介绍"></a>基本介绍</h2><p><img src="/2020/10/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%B8%83%E5%A4%A7%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/1.jpg" alt="Interface Segregation 01"></p>
<p>1)    客户端不应该依赖它不需要的接口，即一个类对另一个类的依赖应该建立在最小的接口上<br>2)    类 A 通过接口 Interface1 依赖类 B，类 C 通过接口 Interface1 依赖类 D，如果接口 Interface1 对于类 A 和类 C<br>来说不是最小接口，那么类 B 和类 D 必须去实现他们不需要的方法。<br>3)    按隔离原则应当这样处理：<br>将接口 Interface1 拆分为独立的几个接口(这里我们拆分成 3 个接口)，类 A 和类 C 分别与他们需要的接口建立依赖关系。也就是采用接口隔离原则</p>
<h2 id="应用实例-1"><a href="#应用实例-1" class="headerlink" title="应用实例"></a>应用实例</h2><p>1)    类 A 通过接口 Interface1 依赖类 B，类 C 通过接口 Interface1 依赖类 D。<br>2)    没有使用接口隔离原则代码</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line">package com.atguigu.principle.segregation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Segregation1</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title">Interface1</span> &#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">operation1</span>(<span class="params"></span>)</span>; <span class="function"><span class="keyword">void</span> <span class="title">operation2</span>(<span class="params"></span>)</span>;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">operation3</span>(<span class="params"></span>)</span>; <span class="function"><span class="keyword">void</span> <span class="title">operation4</span>(<span class="params"></span>)</span>; <span class="function"><span class="keyword">void</span> <span class="title">operation5</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">B</span> <span class="title">implements</span> <span class="title">Interface1</span> &#123; <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation1</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">"B 实现了 operation1"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation2</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">"B 实现了 operation2"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation3</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">"B 实现了 operation3"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation4</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">"B 实现了 operation4"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation5</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">"B 实现了 operation5"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">D</span> <span class="title">implements</span> <span class="title">Interface1</span> &#123; <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation1</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">"D 实现了 operation1"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation2</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">"D 实现了 operation2"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation3</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">"D 实现了 operation3"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation4</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">"D 实现了  operation4"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">operation5</span>(<span class="params"></span>)</span>  &#123; System.<span class="keyword">out</span>.println(<span class="string">"D 实现了  operation5"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">A</span> &#123; <span class="comment">//A 类通过接口 Interface1 依赖(使用) B 类，但是只会用到 1,2,3 方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depend1</span>(<span class="params">Interface1 i</span>)</span> &#123; i.operation1();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depend2</span>(<span class="params">Interface1 i</span>)</span> &#123; i.operation2();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depend3</span>(<span class="params">Interface1 i</span>)</span> &#123; i.operation3();</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">C</span> &#123; <span class="comment">//C 类通过接口 Interface1  依赖(使用) D 类，但是只会用到 1,4,5 方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depend1</span>(<span class="params">Interface1 i</span>)</span> &#123; i.operation1();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depend4</span>(<span class="params">Interface1 i</span>)</span> &#123; i.operation4();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depend5</span>(<span class="params">Interface1 i</span>)</span> &#123; i.operation5();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="传统方法的问题和使用接口隔离原则改进"><a href="#传统方法的问题和使用接口隔离原则改进" class="headerlink" title="传统方法的问题和使用接口隔离原则改进"></a>传统方法的问题和使用接口隔离原则改进</h2><p>1)    类 A 通过接口 Interface1 依赖类 B，类 C 通过接口 Interface1 依赖类 D，如果接口 Interface1 对于类 A 和类 C<br>来说不是最小接口，那么类 B 和类 D 必须去实现他们不需要的方法<br>2)    将接口 Interface1 拆分为独立的几个接口，类 A 和类 C 分别与他们需要的接口建立依赖关系。也就是采用接口隔离原则<br>3)    接口 Interface1 中出现的方法，根据实际情况拆分为三个接口<br>4)    代码实现<br><img src="/2020/10/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%B8%83%E5%A4%A7%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/2.jpg" alt="Interface Segregation 02"></p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line">package com.atguigu.principle.segregation.improve;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Segregation1</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">// 使用一把</span></span><br><span class="line">A a = <span class="keyword">new</span> A();</span><br><span class="line">a.depend1(<span class="keyword">new</span> B()); <span class="comment">// A 类通过接口去依赖 B 类</span></span><br><span class="line">a.depend2(<span class="keyword">new</span> B());</span><br><span class="line">a.depend3(<span class="keyword">new</span> B());</span><br><span class="line"></span><br><span class="line">C c = <span class="keyword">new</span> C();</span><br><span class="line"></span><br><span class="line">c.depend1(<span class="keyword">new</span> D()); <span class="comment">// C 类通过接口去依赖(使用)D 类</span></span><br><span class="line">c.depend4(<span class="keyword">new</span> D());</span><br><span class="line">c.depend5(<span class="keyword">new</span> D());</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接 口 1</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title">Interface1</span> &#123; <span class="function"><span class="keyword">void</span> <span class="title">operation1</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接 口 2</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title">Interface2</span> &#123; <span class="function"><span class="keyword">void</span> <span class="title">operation2</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">operation3</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接 口 3</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title">Interface3</span> &#123; <span class="function"><span class="keyword">void</span> <span class="title">operation4</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">operation5</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">B</span> <span class="title">implements</span> <span class="title">Interface1</span>, <span class="title">Interface2</span> &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation1</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">"B 实现了 operation1"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation2</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">"B 实现了 operation2"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation3</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">"B 实现了 operation3"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">D</span> <span class="title">implements</span> <span class="title">Interface1</span>, <span class="title">Interface3</span> &#123; <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation1</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">"D 实现了  operation1"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">operation4</span>(<span class="params"></span>)</span>  &#123; System.<span class="keyword">out</span>.println(<span class="string">"D 实现了  operation4"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation5</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">"D 实现了 operation5"</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">A</span> &#123; <span class="comment">// A 类通过接口 Interface1,Interface2 依赖(使用) B 类，但是只会用到 1,2,3 方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depend1</span>(<span class="params">Interface1 i</span>)</span> &#123; i.operation1();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depend2</span>(<span class="params">Interface2 i</span>)</span> &#123; i.operation2();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depend3</span>(<span class="params">Interface2 i</span>)</span> &#123; i.operation3();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">C</span> &#123; <span class="comment">// C  类通过接口 Interface1,Interface3  依赖(使用) D 类，但是只会用到 1,4,5 方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depend1</span>(<span class="params">Interface1 i</span>)</span> &#123; i.operation1();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depend4</span>(<span class="params">Interface3 i</span>)</span> &#123; i.operation4();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depend5</span>(<span class="params">Interface3 i</span>)</span> &#123;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">i.operation5();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="依赖倒转原则"><a href="#依赖倒转原则" class="headerlink" title="依赖倒转原则"></a>依赖倒转原则</h1><h2 id="基本介绍-2"><a href="#基本介绍-2" class="headerlink" title="基本介绍"></a>基本介绍</h2><p>依赖倒转原则(Dependence Inversion Principle)是指：    </p>
<p>1)    高层模块不应该依赖低层模块，二者都应该依赖其抽象<br>2)    抽象不应该依赖细节，细节应该依赖抽象<br>3)    依赖倒转(倒置)的中心思想是面向接口编程<br>4)    依赖倒转原则是基于这样的设计理念：相对于细节的多变性，抽象的东西要稳定的多。以抽象为基础搭建的架构比以细节为基础的架构要稳定的多。在 java 中，抽象指的是接口或抽象类，细节就是具体的实现类<br>5)    使用接口或抽象类的目的是制定好规范，而不涉及任何具体的操作，把展现细节的任务交给他们的实现类去完成    </p>
<h2 id="应用实例-2"><a href="#应用实例-2" class="headerlink" title="应用实例"></a>应用实例</h2><p>Person 接收消息功能:</p>
<p>1)    实现方案 1 + 分析说明</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">package com.atguigu.principle.inversion;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DependecyInversion</span> &#123;</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123; Person person = <span class="keyword">new</span> Person(); person.receive(<span class="keyword">new</span> Email());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Email</span> &#123;</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"电子邮件信息: hello,world"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//完成 Person 接收消息的功能</span></span><br><span class="line"><span class="comment">//方式 1 分析</span></span><br><span class="line"><span class="comment">//1. 简单，比较容易想到</span></span><br><span class="line"><span class="comment">//2. 如果我们获取的对象是 微信，短信等等，则新增类，同时 Perons 也要增加相应的接收方法</span></span><br><span class="line"><span class="comment">//3. 解决思路：引入一个抽象的接口 IReceiver, 表示接收者, 这样 Person 类与接口 IReceiver 发生依赖</span></span><br><span class="line"><span class="comment">//	因为 Email, WeiXin 等等属于接收的范围，他们各自实现 IReceiver 接口就 ok,  这样我们就符号依赖倒转原则</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">(Email email )</span> </span>&#123; System.out.<span class="built_in">println</span>(email.getInfo());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2)    实现方案 2(依赖倒转) + 分析说明</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.principle.inversion.improve;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DependecyInversion</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line"><span class="comment">//客户端无需改变</span></span><br><span class="line">Person person = <span class="keyword">new</span> <span class="type">Person</span>(); person.receive(<span class="keyword">new</span> <span class="type">Email</span>());</span><br><span class="line"></span><br><span class="line">person.receive(<span class="keyword">new</span> <span class="type">WeiXin</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IReceiver</span> </span>&#123; <span class="keyword">public</span> <span class="keyword">String</span> getInfo();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Email</span> <span class="keyword"><span class="keyword">implements</span> <span class="type">IReceiver</span></span> </span>&#123; <span class="keyword">public</span> <span class="keyword">String</span> getInfo() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"电子邮件信息: hello,world"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//增加微信</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeiXin</span> <span class="keyword"><span class="keyword">implements</span> <span class="type">IReceiver</span></span> </span>&#123; <span class="keyword">public</span> <span class="keyword">String</span> getInfo() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"微信信息: hello,ok"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式 2</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="comment">//这里我们是对接口的依赖</span></span><br><span class="line"><span class="keyword">public</span> void receive(IReceiver receiver ) &#123; System.out.println(receiver.getInfo());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="依赖关系传递的三种方式和应用案例"><a href="#依赖关系传递的三种方式和应用案例" class="headerlink" title="依赖关系传递的三种方式和应用案例"></a>依赖关系传递的三种方式和应用案例</h2><p>1)    接口传递<br>2)    构造方法传递应用案例代码<br>3)    setter 方式传递<br>4)    代码演示</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.principle.inversion.improve;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DependencyPass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub ChangHong changHong = new ChangHong();</span></span><br><span class="line"><span class="comment">//	OpenAndClose openAndClose = new OpenAndClose();</span></span><br><span class="line"><span class="comment">//	openAndClose.open(changHong);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过构造器进行依赖传递</span></span><br><span class="line"><span class="comment">//	OpenAndClose openAndClose = new OpenAndClose(changHong);</span></span><br><span class="line"><span class="comment">//	openAndClose.open();</span></span><br><span class="line"><span class="comment">//通过 setter 方法进行依赖传递</span></span><br><span class="line">OpenAndClose openAndClose = <span class="keyword">new</span> OpenAndClose(); openAndClose.setTv(changHong); openAndClose.open();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式 1： 通过接口传递实现依赖</span></span><br><span class="line"><span class="comment">// 开关的接口</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">// interface IOpenAndClose &#123;</span></span><br><span class="line"><span class="comment">// public void open(ITV tv); //抽象方法,接收接口</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// interface ITV &#123; //ITV 接口</span></span><br><span class="line"><span class="comment">// public void play();</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// class ChangHong implements ITV &#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//	@Override</span></span><br><span class="line"><span class="comment">//	public void play() &#123;</span></span><br><span class="line"><span class="comment">//	// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">//	System.out.println("长虹电视机，打开");</span></span><br><span class="line"><span class="comment">//	&#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//// 实现接口</span></span><br><span class="line"><span class="comment">// class OpenAndClose implements IOpenAndClose&#123;</span></span><br><span class="line"><span class="comment">// public void open(ITV tv)&#123;</span></span><br><span class="line"><span class="comment">// tv.play();</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式 2: 通过构造方法依赖传递</span></span><br><span class="line"><span class="comment">// interface IOpenAndClose &#123;</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">// public void open(); //抽象方法</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// interface ITV &#123; //ITV 接口</span></span><br><span class="line"><span class="comment">// public void play();</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// class OpenAndClose implements IOpenAndClose&#123;</span></span><br><span class="line"><span class="comment">// public ITV tv; //成员</span></span><br><span class="line"><span class="comment">// public OpenAndClose(ITV tv)&#123; //构造器</span></span><br><span class="line"><span class="comment">// this.tv = tv;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// public void open()&#123;</span></span><br><span class="line"><span class="comment">// this.tv.play();</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式 3 ,  通过 setter 方法传递</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IOpenAndClose</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>; <span class="comment">// 抽象方法</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTv</span><span class="params">(ITV tv)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ITV</span> </span>&#123; <span class="comment">// ITV 接口</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OpenAndClose</span> <span class="keyword">implements</span> <span class="title">IOpenAndClose</span> </span>&#123; <span class="keyword">private</span> ITV tv;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTv</span><span class="params">(ITV tv)</span> </span>&#123; <span class="keyword">this</span>.tv = tv;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> </span>&#123; <span class="keyword">this</span>.tv.play();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChangHong</span> <span class="keyword">implements</span> <span class="title">ITV</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">"长虹电视机，打开"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="依赖倒转原则的注意事项和细节"><a href="#依赖倒转原则的注意事项和细节" class="headerlink" title="依赖倒转原则的注意事项和细节"></a>依赖倒转原则的注意事项和细节</h2><p>1)    低层模块尽量都要有抽象类或接口，或者两者都有，程序稳定性更好.<br>2)    变量的声明类型尽量是抽象类或接口, 这样我们的变量引用和实际对象间，就存在一个缓冲层，利于程序扩展和优化<br>3)    继承时遵循里氏替换原则    </p>
<h1 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h1><h2 id="OO-中的继承性的思考和说明"><a href="#OO-中的继承性的思考和说明" class="headerlink" title="OO 中的继承性的思考和说明"></a>OO 中的继承性的思考和说明</h2><p>1)    继承包含这样一层含义：父类中凡是已经实现好的方法，实际上是在设定规范和契约，虽然它不强制要求所有的子类必须遵循这些契约，但是如果子类对这些已经实现的方法任意修改，就会对整个继承体系造成破坏。    </p>
<p>2)    继承在给程序设计带来便利的同时，也带来了弊端。比如使用继承会给程序带来侵入性，程序的可移植性降低， 增加对象间的耦合性，如果一个类被其他的类所继承，则当这个类需要修改时，必须考虑到所有的子类，并且父类修改后，所有涉及到子类的功能都有可能产生故障    </p>
<p>3)    问题提出：在编程中，如何正确的使用继承? =&gt; 里氏替换原则    </p>
<h2 id="基本介绍-3"><a href="#基本介绍-3" class="headerlink" title="基本介绍"></a>基本介绍</h2><p>1)    里氏替换原则(Liskov Substitution Principle)在 1988 年，由麻省理工学院的以为姓里的女士提出的。    、</p>
<p>2)    如果对每个类型为 T1 的对象 o1，都有类型为 T2 的对象 o2，使得以 T1 定义的所有程序 P 在所有的对象 o1 都代换成 o2 时，程序 P 的行为没有发生变化，那么类型 T2 是类型 T1 的子类型。换句话说，所有引用基类的地方必须能透明地使用其子类的对象。    </p>
<p>3)    在使用继承时，遵循里氏替换原则，在子类中尽量不要重写父类的方法    </p>
<p>4)    里氏替换原则告诉我们，继承实际上让两个类耦合性增强了，在适当的情况下，可以通过聚合，组合，依赖 来解决问题。    </p>
<h2 id="一个程序引出的问题和思考"><a href="#一个程序引出的问题和思考" class="headerlink" title="一个程序引出的问题和思考"></a>一个程序引出的问题和思考</h2><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">package com.atguigu.principle.liskov;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Liskov</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> static <span class="built_in">void</span> main(String[] args) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub A a = new A();</span></span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">"11-3="</span> + a.func1(<span class="number">11</span>, <span class="number">3</span>)); System.<span class="keyword">out</span>.println(<span class="string">"1-8="</span> + a.func1(<span class="number">1</span>, <span class="number">8</span>));</span><br><span class="line"></span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">"-----------------------"</span>); B b = new B();</span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">"11-3="</span> + b.func1(<span class="number">11</span>, <span class="number">3</span>));<span class="comment">//这里本意是求出 11-3</span></span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">"1-8="</span> + b.func1(<span class="number">1</span>, <span class="number">8</span>));<span class="comment">// 1-8 System.out.println("11+3+9=" + b.func2(11, 3));</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">// A 类</span></span><br><span class="line"><span class="keyword">class</span> <span class="symbol">A</span> &#123;</span><br><span class="line"><span class="comment">// 返回两个数的差</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> func1(<span class="built_in">int</span> num1, <span class="built_in">int</span> num2) &#123; <span class="keyword">return</span> num1 - num2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// B 类继承了 A</span></span><br><span class="line"><span class="comment">// 增加了一个新功能：完成两个数相加,然后和 9 求和</span></span><br><span class="line"><span class="keyword">class</span> <span class="symbol">B</span> <span class="symbol">extends</span> <span class="symbol">A</span> &#123;</span><br><span class="line"><span class="comment">//这里，重写了 A 类的方法,  可能是无意识</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> func1(<span class="built_in">int</span> a, <span class="built_in">int</span> b) &#123; <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> func2(<span class="built_in">int</span> a, <span class="built_in">int</span> b) &#123; <span class="keyword">return</span> func1(a, b) + <span class="number">9</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>1)    我们发现原来运行正常的相减功能发生了错误。原因就是类 B 无意中重写了父类的方法，造成原有功能出现错误。在实际编程中，我们常常会通过重写父类的方法完成新的功能，这样写起来虽然简单，但整个继承体系的<br>复用性会比较差。特别是运行多态比较频繁的时候    </p>
<p>2)    通用的做法是：原来的父类和子类都继承一个更通俗的基类，原有的继承关系去掉，采用依赖，聚合，组合等关系代替.    </p>
<p>3)    改进方案<br><img src="/2020/10/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%B8%83%E5%A4%A7%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/3.jpg" alt="03"></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">package com.atguigu.principle.liskov.improve;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Liskov</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> static <span class="built_in">void</span> main(String[] args) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub A a = new A();</span></span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">"11-3="</span> + a.func1(<span class="number">11</span>, <span class="number">3</span>)); System.<span class="keyword">out</span>.println(<span class="string">"1-8="</span> + a.func1(<span class="number">1</span>, <span class="number">8</span>));</span><br><span class="line"></span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">"-----------------------"</span>); B b = new B();</span><br><span class="line"><span class="comment">//因为 B 类不再继承 A 类，因此调用者，不会再 func1 是求减法</span></span><br><span class="line"><span class="comment">//调用完成的功能就会很明确</span></span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">"11+3="</span> + b.func1(<span class="number">11</span>, <span class="number">3</span>));<span class="comment">//这里本意是求出 11+3</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">"1+8="</span> + b.func1(<span class="number">1</span>, <span class="number">8</span>));<span class="comment">// 1+8 System.out.println("11+3+9=" + b.func2(11, 3));</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用组合仍然可以使用到 A 类相关方法</span></span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">"11-3="</span> + b.func3(<span class="number">11</span>, <span class="number">3</span>));<span class="comment">// 这里本意是求出 11-3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个更加基础的基类 class Base &#123;</span></span><br><span class="line"><span class="comment">//把更加基础的方法和成员写到 Base 类</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// A 类</span></span><br><span class="line"><span class="keyword">class</span> <span class="symbol">A</span> <span class="symbol">extends</span> <span class="symbol">Base</span> &#123;</span><br><span class="line"><span class="comment">// 返回两个数的差</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> func1(<span class="built_in">int</span> num1, <span class="built_in">int</span> num2) &#123; <span class="keyword">return</span> num1 - num2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// B 类继承了 A</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">// 增加了一个新功能：完成两个数相加,然后和 9 求和</span></span><br><span class="line"><span class="keyword">class</span> <span class="symbol">B</span> <span class="symbol">extends</span> <span class="symbol">Base</span> &#123;</span><br><span class="line"><span class="comment">//如果 B 需要使用 A 类的方法,使用组合关系</span></span><br><span class="line"><span class="keyword">private</span> A a = new A();</span><br><span class="line"></span><br><span class="line"><span class="comment">//这里，重写了 A 类的方法,  可能是无意识</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> func1(<span class="built_in">int</span> a, <span class="built_in">int</span> b) &#123; <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> func2(<span class="built_in">int</span> a, <span class="built_in">int</span> b) &#123; <span class="keyword">return</span> func1(a, b) + <span class="number">9</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//我们仍然想使用 A 的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> func3(<span class="built_in">int</span> a, <span class="built_in">int</span> b) &#123; <span class="keyword">return</span> <span class="keyword">this</span>.a.func1(a, b);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h1><h2 id="基本介绍-4"><a href="#基本介绍-4" class="headerlink" title="基本介绍"></a>基本介绍</h2><p>1)    开闭原则（Open Closed Principle）是编程中最基础、最重要的设计原则    </p>
<p>2)    一个软件实体如类，模块和函数应该对扩展开放(对提供方)，对修改关闭(对使用方)。用抽象构建框架，用实现扩展细节。    </p>
<p>3)    当软件需要变化时，尽量通过扩展软件实体的行为来实现变化，而不是通过修改已有的代码来实现变化。    </p>
<p>4)    编程中遵循其它原则，以及使用设计模式的目的就是遵循开闭原则。    </p>
<h2 id="画图形功能"><a href="#画图形功能" class="headerlink" title="画图形功能"></a>画图形功能</h2><p><img src="/2020/10/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%B8%83%E5%A4%A7%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/4.jpg" alt="04"></p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.principle.ocp;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Ocp</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">public static void main(<span class="type">String</span>[] args) &#123;</span><br><span class="line"><span class="comment">//使用看看存在的问题</span></span><br><span class="line"><span class="type">GraphicEditor</span> graphicEditor = <span class="keyword">new</span> <span class="type">GraphicEditor</span>();</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">graphicEditor.drawShape(<span class="keyword">new</span> <span class="type">Rectangle</span>()); graphicEditor.drawShape(<span class="keyword">new</span> <span class="type">Circle</span>()); graphicEditor.drawShape(<span class="keyword">new</span> <span class="type">Triangle</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这是一个用于绘图的类 [使用方] class GraphicEditor &#123;</span></span><br><span class="line"><span class="comment">//接收 Shape 对象，然后根据 type，来绘制不同的图形public void drawShape(Shape s) &#123;</span></span><br><span class="line"><span class="keyword">if</span> (s.m_type == <span class="number">1</span>) drawRectangle(s);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (s.m_type == <span class="number">2</span>) drawCircle(s);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (s.m_type == <span class="number">3</span>) drawTriangle(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制矩形</span></span><br><span class="line">public void drawRectangle(<span class="type">Shape</span> r) &#123; <span class="type">System</span>.out.println(<span class="string">" 绘制矩形 "</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制圆形</span></span><br><span class="line">public void drawCircle(<span class="type">Shape</span> r) &#123;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="type">System</span>.out.println(<span class="string">" 绘制圆形 "</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制三角形</span></span><br><span class="line">public void drawTriangle(<span class="type">Shape</span> r) &#123; <span class="type">System</span>.out.println(<span class="string">" 绘制三角形 "</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Shape 类，基类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">int m_type;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123; <span class="type">Rectangle</span>() &#123;</span><br><span class="line"><span class="keyword">super</span>.m_type = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123; <span class="type">Circle</span>() &#123;</span><br><span class="line"><span class="keyword">super</span>.m_type = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">//新增画三角形</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Triangle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123; <span class="type">Triangle</span>() &#123;</span><br><span class="line"><span class="keyword">super</span>.m_type = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="方式-1-的优缺点"><a href="#方式-1-的优缺点" class="headerlink" title="方式 1 的优缺点"></a>方式 1 的优缺点</h2><p>1)    优点是比较好理解，简单易操作。<br>2)    缺点是违反了设计模式的 ocp 原则，即对扩展开放(提供方)，对修改关闭(使用方)。即当我们给类增加新功能的时候，尽量不修改代码，或者尽可能少修改代码.<br>3)    比如我们这时要新增加一个图形种类 三角形，我们需要做如下修改，修改的地方较多    </p>
<h2 id="改进的思路分析"><a href="#改进的思路分析" class="headerlink" title="改进的思路分析"></a>改进的思路分析</h2><p>思路：把创建 Shape 类做成抽象类，并提供一个抽象的 draw 方法，让子类去实现即可，这样我们有新的图形种类时，只需要让新的图形类继承 Shape，并实现 draw 方法即可，使用方的代码就不需要修改</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.principle.ocp.improve;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Ocp</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">public static void main(<span class="type">String</span>[] args) &#123;</span><br><span class="line"><span class="comment">//使用看看存在的问题</span></span><br><span class="line"><span class="type">GraphicEditor</span> graphicEditor = <span class="keyword">new</span> <span class="type">GraphicEditor</span>(); graphicEditor.drawShape(<span class="keyword">new</span> <span class="type">Rectangle</span>()); graphicEditor.drawShape(<span class="keyword">new</span> <span class="type">Circle</span>()); graphicEditor.drawShape(<span class="keyword">new</span> <span class="type">Triangle</span>()); graphicEditor.drawShape(<span class="keyword">new</span> <span class="type">OtherGraphic</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这是一个用于绘图的类 [使用方] class GraphicEditor &#123;</span></span><br><span class="line"><span class="comment">//接收 Shape 对象，调用 draw 方法</span></span><br><span class="line">public void drawShape(<span class="type">Shape</span> s) &#123; s.draw();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Shape 类，基类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span>&#123; int m_type;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">public <span class="keyword">abstract</span> void draw();<span class="comment">//抽象方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123; <span class="type">Rectangle</span>() &#123;</span><br><span class="line"><span class="keyword">super</span>.m_type = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">public void draw() &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub System.out.println(" 绘制矩形 ");</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123; <span class="type">Circle</span>() &#123;</span><br><span class="line"><span class="keyword">super</span>.m_type = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">public void draw() &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="type">System</span>.out.println(<span class="string">" 绘制圆形 "</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">//新增画三角形</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Triangle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123; <span class="type">Triangle</span>() &#123;</span><br><span class="line"><span class="keyword">super</span>.m_type = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">public void draw() &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="type">System</span>.out.println(<span class="string">" 绘制三角形  "</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//新增一个图形</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OtherGraphic</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123; <span class="type">OtherGraphic</span>() &#123;</span><br><span class="line"><span class="keyword">super</span>.m_type = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">public void draw() &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="type">System</span>.out.println(<span class="string">" 绘制其它图形 "</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;  -&gt;	满足了开闭原则</span><br><span class="line"><span class="keyword">package</span> com.atguigu.principle.ocp.improve;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Ocp</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">public static void main(<span class="type">String</span>[] args) &#123;</span><br><span class="line"><span class="comment">//使用看看存在的问题</span></span><br><span class="line"><span class="type">GraphicEditor</span> graphicEditor = <span class="keyword">new</span> <span class="type">GraphicEditor</span>(); graphicEditor.drawShape(<span class="keyword">new</span> <span class="type">Rectangle</span>()); graphicEditor.drawShape(<span class="keyword">new</span> <span class="type">Circle</span>()); graphicEditor.drawShape(<span class="keyword">new</span> <span class="type">Triangle</span>()); graphicEditor.drawShape(<span class="keyword">new</span> <span class="type">OtherGraphic</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这是一个用于绘图的类 [使用方] class GraphicEditor &#123;</span></span><br><span class="line"><span class="comment">//接收 Shape 对象，调用 draw 方法</span></span><br><span class="line">public void drawShape(<span class="type">Shape</span> s) &#123; s.draw();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Shape 类，基类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span>&#123; int m_type;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">public <span class="keyword">abstract</span> void draw();<span class="comment">//抽象方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123; <span class="type">Rectangle</span>() &#123;</span><br><span class="line"><span class="keyword">super</span>.m_type = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">public void draw() &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub System.out.println(" 绘制矩形 ");</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123; <span class="type">Circle</span>() &#123;</span><br><span class="line"><span class="keyword">super</span>.m_type = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">public void draw() &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="type">System</span>.out.println(<span class="string">" 绘制圆形 "</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">//新增画三角形</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Triangle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123; <span class="type">Triangle</span>() &#123;</span><br><span class="line"><span class="keyword">super</span>.m_type = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">public void draw() &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="type">System</span>.out.println(<span class="string">" 绘制三角形  "</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//新增一个图形</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OtherGraphic</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123; <span class="type">OtherGraphic</span>() &#123;</span><br><span class="line"><span class="keyword">super</span>.m_type = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">public void draw() &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="type">System</span>.out.println(<span class="string">" 绘制其它图形 "</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="迪米特法则"><a href="#迪米特法则" class="headerlink" title="迪米特法则"></a>迪米特法则</h1><h2 id="基本介绍-5"><a href="#基本介绍-5" class="headerlink" title="基本介绍"></a>基本介绍</h2><p>1)    一个对象应该对其他对象保持最少的了解    </p>
<p>2)    类与类关系越密切，耦合度越大    </p>
<p>3)    迪米特法则(Demeter Principle)又叫最少知道原则，即一个类对自己依赖的类知道的越少越好。也就是说，对于被依赖的类不管多么复杂，都尽量将逻辑封装在类的内部。对外除了提供的 public 方法，不对外泄露任何信息    </p>
<p>4)    迪米特法则还有个更简单的定义：只与直接的朋友通信    </p>
<p>5)    直接的朋友：每个对象都会与其他对象有耦合关系，只要两个对象之间有耦合关系，我们就说这两个对象之间是朋友关系。耦合的方式很多，依赖，关联，组合，聚合等。其中，我们称出现成员变量，方法参数，方法返回值中的类为直接的朋友，而出现在局部变量中的类不是直接的朋友。也就是说，陌生的类最好不要以局部变量的形式出现在类的内部。</p>
<h2 id="应用实例-3"><a href="#应用实例-3" class="headerlink" title="应用实例"></a>应用实例</h2><p>1)    有一个学校，下属有各个学院和总部，现要求打印出学校总部员工 ID 和学院员工的 id<br>2)    编程实现上面的功能, 看代码演示<br>3)    代码演示</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">package com.atguigu.principle.demeter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList; <span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">//客户端</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demeter1</span> &#123;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建了一个 SchoolManager 对象</span></span><br><span class="line">SchoolManager schoolManager = <span class="keyword">new</span> SchoolManager();</span><br><span class="line"><span class="comment">//输出学院的员工 id  和	学校总部的员工信息</span></span><br><span class="line">schoolManager.printAllEmployee(<span class="keyword">new</span> CollegeManager());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//学校总部员工类 class Employee &#123;</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">String</span> id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">String</span> id)</span> </span>&#123; <span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getId</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//学院的员工类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CollegeEmployee</span> &#123;</span> <span class="keyword">private</span> <span class="keyword">String</span> id;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">String</span> id)</span> </span>&#123; <span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getId</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//管理学院员工的管理类 class CollegeManager &#123;</span></span><br><span class="line"><span class="comment">//返回学院的所有员工</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;CollegeEmployee&gt; <span class="title">getAllEmployee</span><span class="params">()</span> </span>&#123; List&lt;CollegeEmployee&gt; <span class="built_in">list</span> = <span class="keyword">new</span> ArrayList&lt;CollegeEmployee&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123; <span class="comment">//这里我们增加了 10 个员工到 list</span></span><br><span class="line">CollegeEmployee emp = <span class="keyword">new</span> CollegeEmployee(); emp.setId(<span class="string">"学院员工 id= "</span> + i);</span><br><span class="line"><span class="built_in">list</span>.add(emp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">list</span>;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//学校管理类</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//分析 SchoolManager 类的直接朋友类有哪些 Employee、CollegeManager</span></span><br><span class="line"><span class="comment">//CollegeEmployee 不是 直接朋友 而是一个陌生类，这样违背了 迪米特法则</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SchoolManager</span> &#123;</span></span><br><span class="line"><span class="comment">//返回学校总部的员工</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Employee&gt; <span class="title">getAllEmployee</span><span class="params">()</span> </span>&#123; List&lt;Employee&gt; <span class="built_in">list</span> = <span class="keyword">new</span> ArrayList&lt;Employee&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123; <span class="comment">//这里我们增加了 5 个员工到 list Employee     emp     =     new      Employee(); emp.setId("学校总部员工 id= " + i);</span></span><br><span class="line"><span class="built_in">list</span>.add(emp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">list</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//该方法完成输出学校总部和学院员工信息(id) void printAllEmployee(CollegeManager sub) &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//分析问题</span></span><br><span class="line"><span class="comment">//1. 这 里 的  CollegeEmployee 不是	SchoolManager 的直接朋友</span></span><br><span class="line"><span class="comment">//2. CollegeEmployee 是以局部变量方式出现在 SchoolManager</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 违反了 迪米特法则</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取到学院员工</span></span><br><span class="line">List&lt;CollegeEmployee&gt; list1 = sub.getAllEmployee(); System.out.<span class="built_in">println</span>(<span class="string">"------------学院员工------------"</span>); <span class="keyword">for</span> (CollegeEmployee e : list1) &#123;</span><br><span class="line">System.out.<span class="built_in">println</span>(e.getId());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取到学校总部员工</span></span><br><span class="line">List&lt;Employee&gt; list2 = <span class="keyword">this</span>.getAllEmployee(); System.out.<span class="built_in">println</span>(<span class="string">"------------学校总部员工------------"</span>); <span class="keyword">for</span> (Employee e : list2) &#123;</span><br><span class="line">System.out.<span class="built_in">println</span>(e.getId());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>1)    前面设计的问题在于 SchoolManager 中，CollegeEmployee 类并不是 SchoolManager 类的直接朋友 (分析)<br>2)    按照迪米特法则，应该避免类中出现这样非直接朋友关系的耦合<br>3)    对代码按照迪米特法则 进行改进.    </p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">import java.util.ArrayList; import java.util.List;</span><br><span class="line"></span><br><span class="line">//客户端</span><br><span class="line">public class Demeter1 &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line"><span class="attribute">System.out.println("~~~使用迪米特法则的改进~~~");</span></span><br><span class="line">//创建了一个 SchoolManager 对象</span><br><span class="line">SchoolManager schoolManager = new SchoolManager();</span><br><span class="line">//输出学院的员工 id  和	学校总部的员工信息</span><br><span class="line">schoolManager.printAllEmployee(new CollegeManager());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//学校总部员工类 class Employee &#123;</span><br><span class="line">private String id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public void setId(String id) &#123; this.id = id;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public String getId() &#123; return id;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//学院的员工类</span><br><span class="line">class CollegeEmployee &#123; private String id;</span><br><span class="line"></span><br><span class="line">public void setId(String id) &#123; this.id = id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public String getId() &#123; return id;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//管理学院员工的管理类 class CollegeManager &#123;</span><br><span class="line">//返回学院的所有员工</span><br><span class="line">public List&lt;CollegeEmployee&gt; getAllEmployee() &#123;</span><br><span class="line">List&lt;CollegeEmployee&gt; list = new ArrayList&lt;CollegeEmployee&gt;();</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">for (int i = 0; i &lt; 10; i++) &#123; //这里我们增加了 10 个员工到 list</span><br><span class="line">CollegeEmployee emp = new CollegeEmployee();</span><br><span class="line">emp.setId("学院员工 id= " + i); list.add(emp);</span><br><span class="line">&#125;</span><br><span class="line">return list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 输 出 学 院 员 工 的 信 息 public void printEmployee() &#123;</span><br><span class="line">//获取到学院员工</span><br><span class="line">List&lt;CollegeEmployee&gt; list1 = getAllEmployee(); System.out.println("------------学院员工------------"); for (CollegeEmployee e : list1) &#123;</span><br><span class="line"><span class="attribute">System.out.println(e.getId());</span></span><br><span class="line"><span class="attribute">&#125;</span></span><br><span class="line"><span class="attribute">&#125;</span></span><br><span class="line"><span class="attribute">&#125;</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line"><span class="attribute">//学校管理类</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line">//分析 SchoolManager 类的直接朋友类有哪些 Employee、CollegeManager</span><br><span class="line">//CollegeEmployee 不是 直接朋友 而是一个陌生类，这样违背了 迪米特法则</span><br><span class="line">class SchoolManager &#123;</span><br><span class="line">//返回学校总部的员工</span><br><span class="line">public List&lt;Employee&gt; getAllEmployee() &#123;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">List&lt;Employee&gt; list = new ArrayList&lt;Employee&gt;();</span><br><span class="line"></span><br><span class="line">for (int i = 0; i &lt; 5; i++) &#123; //这里我们增加了 5 个员工到 list Employee emp = new Employee();</span><br><span class="line">emp.setId("学校总部员工 id= " + i); list.add(emp);</span><br><span class="line">&#125;</span><br><span class="line">return list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//该方法完成输出学校总部和学院员工信息(id) void printAllEmployee(CollegeManager sub) &#123;</span><br><span class="line"></span><br><span class="line">//分析问题</span><br><span class="line">//1. 将输出学院的员工方法，封装到 CollegeManager</span><br><span class="line"><span class="attribute">sub.printEmployee();</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line"><span class="attribute">//获取到学校总部员工</span></span><br><span class="line">List&lt;Employee&gt; list2 = this.getAllEmployee(); System.out.println("------------学校总部员工------------"); for (Employee e : list2) &#123;</span><br><span class="line"><span class="attribute">System.out.println(e.getId());</span></span><br><span class="line"><span class="attribute">&#125;</span></span><br><span class="line"><span class="attribute">&#125;</span></span><br><span class="line"><span class="attribute">&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="迪米特法则注意事项和细节"><a href="#迪米特法则注意事项和细节" class="headerlink" title="迪米特法则注意事项和细节"></a>迪米特法则注意事项和细节</h2><p>1)    迪米特法则的核心是降低类之间的耦合<br>2)    但是注意：由于每个类都减少了不必要的依赖，因此迪米特法则只是要求降低类间(对象间)耦合关系， 并不是要求完全没有依赖关系    </p>
<h1 id="合成复用原则（Composite-Reuse-Principle）"><a href="#合成复用原则（Composite-Reuse-Principle）" class="headerlink" title="合成复用原则（Composite Reuse Principle）"></a>合成复用原则（Composite Reuse Principle）</h1><h2 id="基本介绍-6"><a href="#基本介绍-6" class="headerlink" title="基本介绍"></a>基本介绍</h2><p><img src="/2020/10/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%B8%83%E5%A4%A7%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/5.jpg" alt="05"></p>
<h2 id="设计原则核心思想"><a href="#设计原则核心思想" class="headerlink" title="设计原则核心思想"></a>设计原则核心思想</h2><p>1)    找出应用中可能需要变化之处，把它们独立出来，不要和那些不需要变化的代码混在一起。<br>2)    针对接口编程，而不是针对实现编程。<br>3)    为了交互对象之间的松耦合设计而努力</p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-单例设计模式</title>
    <url>/2020/10/11/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="单例设计模式介绍"><a href="#单例设计模式介绍" class="headerlink" title="单例设计模式介绍"></a>单例设计模式介绍</h1><p>所谓类的单例设计模式，就是采取一定的方法保证在整个的软件系统中，对某个类只能存在一个对象实例， 并且该类只提供一个取得其对象实例的方法(静态方法)。    </p>
<p>比如 Hibernate 的 SessionFactory，它充当数据存储源的代理，并负责创建 Session 对象。SessionFactory 并不是轻量级的，一般情况下，一个项目通常只需要一个 SessionFactory 就够，这是就会使用到单例模式。</p>
<a id="more"></a>
<h1 id="单例设计模式八种方式"><a href="#单例设计模式八种方式" class="headerlink" title="单例设计模式八种方式"></a>单例设计模式八种方式</h1><p>1)    饿汉式(静态常量)<br>2)    饿汉式（静态代码块）<br>3)    懒汉式(线程不安全)<br>4)    懒汉式(线程安全，同步方法)<br>5)    懒汉式(线程安全，同步代码块)<br>6)    双重检查<br>7)    静态内部类<br>8)    枚举</p>
<h1 id="饿汉式（静态常量）"><a href="#饿汉式（静态常量）" class="headerlink" title="饿汉式（静态常量）"></a>饿汉式（静态常量）</h1><p>饿汉式（静态常量）应用实例步骤如下：    </p>
<p>1)    构造器私有化 (防止 new )<br>2)    类的内部创建对象<br>3)    向外暴露一个静态的公共方法。getInstance<br>4)    代码实现</p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">package com.atguigu.singleton.type1;</span><br><span class="line"></span><br><span class="line">public class SingletonTest01 &#123;</span><br><span class="line"></span><br><span class="line">public<span class="keyword"> static</span> void main(String[] args) &#123;</span><br><span class="line">//测试</span><br><span class="line">Singleton<span class="built_in"> instance </span>= Singleton.getInstance(); Singleton instance2 = Singleton.getInstance(); System.out.println(instance == instance2); // true</span><br><span class="line">System.out.println(<span class="string">"instance.hashCode="</span> + instance.hashCode()); System.out.println(<span class="string">"instance2.hashCode="</span> + instance2.hashCode());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//饿汉式(静态变量) class Singleton &#123;</span><br><span class="line">//1. 构造器私有化,  外部能<span class="built_in"> new </span>private Singleton() &#123;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//2.本类内部创建对象实例</span><br><span class="line">private<span class="keyword"> final</span><span class="keyword"> static</span> Singleton<span class="built_in"> instance </span>=<span class="built_in"> new </span>Singleton();</span><br><span class="line"></span><br><span class="line">//3. 提供一个公有的静态方法，返回实例对象</span><br><span class="line">public<span class="keyword"> static</span> Singleton getInstance() &#123;<span class="built_in"> return </span>instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>优缺点说明：    </p>
<p>1)    优点：这种写法比较简单，就是在类装载的时候就完成实例化。避免了线程同步问题。    </p>
<p>2)    缺点：在类装载的时候就完成实例化，没有达到 Lazy Loading 的效果。如果从始至终从未使用过这个实例，则会造成内存的浪费    </p>
<p>3)    这种方式基于 classloder 机制避免了多线程的同步问题，不过，instance 在类装载时就实例化，在单例模式中大多数都是调用 getInstance 方法， 但是导致类装载的原因有很多种，因此不能确定有其他的方式（或者其他的静态方法）导致类装载，这时候初始化 instance 就没有达到 lazy loading 的效果    </p>
<p>4)    结论：这种单例模式可用，可能造成内存浪费</p>
<h1 id="饿汉式（静态代码块）"><a href="#饿汉式（静态代码块）" class="headerlink" title="饿汉式（静态代码块）"></a>饿汉式（静态代码块）</h1><p>代码演示：</p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">package com.atguigu.singleton.type2;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class SingletonTest02 &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public<span class="keyword"> static</span> void main(String[] args) &#123;</span><br><span class="line">//测试</span><br><span class="line">Singleton<span class="built_in"> instance </span>= Singleton.getInstance(); Singleton instance2 = Singleton.getInstance(); System.out.println(instance == instance2); // true</span><br><span class="line">System.out.println(<span class="string">"instance.hashCode="</span> + instance.hashCode()); System.out.println(<span class="string">"instance2.hashCode="</span> + instance2.hashCode());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//饿汉式(静态变量) class Singleton &#123;</span><br><span class="line">//1. 构造器私有化,  外部能<span class="built_in"> new </span>private Singleton() &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//2.本类内部创建对象实例</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">private<span class="keyword">	static</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">static &#123; // 在静态代码块中，创建单例对象</span><br><span class="line">instance =<span class="built_in"> new </span>Singleton();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//3. 提供一个公有的静态方法，返回实例对象</span><br><span class="line">public<span class="keyword"> static</span> Singleton getInstance() &#123;<span class="built_in"> return </span>instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>优缺点说明：    </p>
<p>1)    这种方式和上面的方式其实类似，只不过将类实例化的过程放在了静态代码块中，也是在类装载的时候，就执行静态代码块中的代码，初始化类的实例。优缺点和上面是一样的。    </p>
<p>2)    结论：这种单例模式可用，但是可能造成内存浪费    </p>
<h1 id="懒汉式-线程不安全"><a href="#懒汉式-线程不安全" class="headerlink" title="懒汉式(线程不安全)"></a>懒汉式(线程不安全)</h1><p>代码演示：</p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">package com.atguigu.singleton.type3;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class SingletonTest03 &#123;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public<span class="keyword"> static</span> void main(String[] args) &#123;</span><br><span class="line">System.out.println(<span class="string">"懒汉式 1 ， 线程不安全~"</span>); Singleton<span class="built_in"> instance </span>= Singleton.getInstance(); Singleton instance2 = Singleton.getInstance(); System.out.println(instance == instance2); // true</span><br><span class="line">System.out.println(<span class="string">"instance.hashCode="</span> + instance.hashCode()); System.out.println(<span class="string">"instance2.hashCode="</span> + instance2.hashCode());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Singleton &#123;</span><br><span class="line">private<span class="keyword"> static</span> Singleton instance;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">private Singleton() &#123;&#125;</span><br><span class="line"></span><br><span class="line">//提供一个静态的公有方法，当使用到该方法时，才去创建 instance</span><br><span class="line">//即懒汉式</span><br><span class="line">public<span class="keyword"> static</span> Singleton getInstance() &#123; if(instance == null) &#123;</span><br><span class="line">instance =<span class="built_in"> new </span>Singleton();</span><br><span class="line">&#125;</span><br><span class="line">return instance;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>优缺点说明：    </p>
<p>1)    起到了 Lazy Loading 的效果，但是只能在单线程下使用。    </p>
<p>2)    如果在多线程下，一个线程进入了 if (singleton == null)判断语句块，还未来得及往下执行，另一个线程也通过了这个判断语句，这时便会产生多个实例。所以在多线程环境下不可使用这种方式    </p>
<p>3)    结论：在实际开发中，不要使用这种方式</p>
<h1 id="懒汉式-线程安全，同步方法"><a href="#懒汉式-线程安全，同步方法" class="headerlink" title="懒汉式(线程安全，同步方法)"></a>懒汉式(线程安全，同步方法)</h1><p>代码演示：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">package com.atguigu.singleton.type4;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public <span class="keyword">class</span> SingletonTest04 &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String<span class="literal">[]</span> args) &#123;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"懒汉式 2 ， 线程安全~"</span>); Singleton instance = <span class="module-access"><span class="module"><span class="identifier">Singleton</span>.</span></span>get<span class="constructor">Instance()</span>; Singleton instance2 = <span class="module-access"><span class="module"><span class="identifier">Singleton</span>.</span></span>get<span class="constructor">Instance()</span>; <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(instance<span class="operator"> == </span>instance2); <span class="comment">// true</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"instance.hashCode="</span> + instance.hash<span class="constructor">Code()</span>); <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"instance2.hashCode="</span> + instance2.hash<span class="constructor">Code()</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 懒汉式(线程安全，同步方法) class Singleton &#123;</span></span><br><span class="line"><span class="keyword">private</span> static Singleton instance;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="constructor">Singleton()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//提供一个静态的公有方法，加入同步处理的代码，解决线程安全问题</span></span><br><span class="line"><span class="comment">//即懒汉式</span></span><br><span class="line">public static synchronized Singleton get<span class="constructor">Instance()</span> &#123; <span class="keyword">if</span>(instance<span class="operator"> == </span>null) &#123;</span><br><span class="line">instance = <span class="keyword">new</span> <span class="constructor">Singleton()</span>;</span><br><span class="line">&#125;</span><br><span class="line">return instance;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>优缺点说明：    </p>
<p>1)    解决了线程安全问题    </p>
<p>2)    效率太低了，每个线程在想获得类的实例时候，执行 getInstance()方法都要进行同步。而其实这个方法只执行一次实例化代码就够了，后面的想获得该类实例，直接 return 就行了。方法进行同步效率太低    </p>
<p>3)    结论：在实际开发中，不推荐使用这种方式</p>
<h1 id="懒汉式-线程安全-，同步代码块"><a href="#懒汉式-线程安全-，同步代码块" class="headerlink" title="懒汉式(线程安全?，同步代码块)"></a>懒汉式(线程安全?，同步代码块)</h1><p><img src="/2020/10/11/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/1.jpg" alt="01"></p>
<h1 id="双重检查"><a href="#双重检查" class="headerlink" title="双重检查"></a>双重检查</h1><p>代码演示</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">package com.atguigu.singleton.type6;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public <span class="keyword">class</span> SingletonTest06 &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String<span class="literal">[]</span> args) &#123;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"双重检查"</span>);</span><br><span class="line">Singleton instance = <span class="module-access"><span class="module"><span class="identifier">Singleton</span>.</span></span>get<span class="constructor">Instance()</span>; Singleton instance2 = <span class="module-access"><span class="module"><span class="identifier">Singleton</span>.</span></span>get<span class="constructor">Instance()</span>; <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(instance<span class="operator"> == </span>instance2); <span class="comment">// true</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"instance.hashCode="</span> + instance.hash<span class="constructor">Code()</span>);</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"instance2.hashCode="</span> + instance2.hash<span class="constructor">Code()</span>);</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 懒汉式(线程安全，同步方法) class Singleton &#123;</span></span><br><span class="line"><span class="keyword">private</span> static volatile Singleton instance;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="constructor">Singleton()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//提供一个静态的公有方法，加入双重检查代码，解决线程安全问题, 同时解决懒加载问题</span></span><br><span class="line"><span class="comment">//同时保证了效率, 推荐使用</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public static synchronized Singleton get<span class="constructor">Instance()</span> &#123; <span class="keyword">if</span>(instance<span class="operator"> == </span>null) &#123;</span><br><span class="line">synchronized (<span class="module-access"><span class="module"><span class="identifier">Singleton</span>.</span></span><span class="keyword">class</span>) &#123; <span class="keyword">if</span>(instance<span class="operator"> == </span>null) &#123;</span><br><span class="line">instance = <span class="keyword">new</span> <span class="constructor">Singleton()</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">return instance;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>    优缺点说明：</p>
<p>1)    Double-Check 概念是多线程开发中常使用到的，如代码中所示，我们进行了两次 if (singleton == null)检查，这样就可以保证线程安全了。    </p>
<p>2)    这样，实例化代码只用执行一次，后面再次访问时，判断 if (singleton == null)，直接 return 实例化对象，也避免的反复进行方法同步.    </p>
<p>3)    线程安全；延迟加载；效率较高    </p>
<p>4)    结论：在实际开发中，推荐使用这种单例设计模式</p>
<h1 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h1><p>代码演示：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">package com.atguigu.singleton.type7;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonTest07</span> &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;  System.out.<span class="built_in">println</span>(<span class="string">"使用静态内部类完成单例模式"</span>); Singleton instance = Singleton.getInstance();</span><br><span class="line">Singleton instance2 = Singleton.getInstance(); System.out.<span class="built_in">println</span>(instance == instance2); <span class="comment">// true System.out.println("instance.hashCode=" + instance.hashCode()); System.out.println("instance2.hashCode=" + instance2.hashCode());</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 静态内部类完成， 推荐使用</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton instance;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造器私有化private Singleton() &#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//写一个静态内部类,该类中有一个静态属性 Singleton private static class SingletonInstance &#123;</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//提供一个静态的公有方法，直接返回 SingletonInstance.INSTANCE public static synchronized Singleton getInstance() &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> SingletonInstance.INSTANCE;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>    优缺点说明：</p>
<p>1)    这种方式采用了类装载的机制来保证初始化实例时只有一个线程。</p>
<p>2)    静态内部类方式在 Singleton 类被装载时并不会立即实例化，而是在需要实例化时，调用 getInstance 方法，才会装载 SingletonInstance 类，从而完成 Singleton 的实例化。</p>
<p>3)    类的静态属性只会在第一次加载类的时候初始化，所以在这里，JVM 帮助我们保证了线程的安全性，在类进行初始化时，别的线程是无法进入的。</p>
<p>4)    优点：避免了线程不安全，利用静态内部类特点实现延迟加载，效率高</p>
<p>5)    结论：推荐使用.</p>
<h1 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h1><p>代码演示:</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">package com.atguigu.singleton.type8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonTest08</span> &#123;</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123; Singleton instance = Singleton.INSTANCE;</span><br><span class="line">Singleton instance2 = Singleton.INSTANCE; System.out.<span class="built_in">println</span>(instance == instance2);</span><br><span class="line"></span><br><span class="line">System.out.<span class="built_in">println</span>(instance.hashCode()); System.out.<span class="built_in">println</span>(instance2.hashCode());</span><br><span class="line"></span><br><span class="line">instance.sayOK();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用枚举，可以实现单例, 推荐</span></span><br><span class="line"><span class="keyword">enum</span> Singleton &#123;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">INSTANCE; <span class="comment">//属性</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayOK</span><span class="params">()</span> </span>&#123; System.out.<span class="built_in">println</span>(<span class="string">"ok~"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>    优缺点说明：</p>
<p>1)    这借助 JDK1.5 中添加的枚举来实现单例模式。不仅能避免多线程同步问题，而且还能防止反序列化重新创建新的对象。</p>
<p>2)    这种方式是 Effective Java 作者 Josh Bloch  提倡的方式</p>
<p>3)    结论：推荐使用</p>
<h1 id="单例模式在-JDK-应用的源码分析"><a href="#单例模式在-JDK-应用的源码分析" class="headerlink" title="单例模式在 JDK  应用的源码分析"></a>单例模式在 JDK  应用的源码分析</h1><p>JDK 中，java.lang.Runtime 就是经典的单例模式(饿汉式)<br><img src="/2020/10/11/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/2.jpg" alt="02"></p>
<h1 id="单例模式注意事项和细节说明"><a href="#单例模式注意事项和细节说明" class="headerlink" title="单例模式注意事项和细节说明"></a>单例模式注意事项和细节说明</h1><p>1)    单例模式保证了系统内存中该类只存在一个对象，节省了系统资源，对于一些需要频繁创建销毁的对象，使用单例模式可以提高系统性能</p>
<p>2)    当想实例化一个单例类的时候，必须要记住使用相应的获取对象的方法，而不是使用 new</p>
<p>3)    单例模式使用的场景：需要频繁的进行创建和销毁的对象、创建对象时耗时过多或耗费资源过多(即：重量级对象)，但又经常用到的对象、工具类对象、频繁访问数据库或文件的对象(比如数据源、session 工厂等)</p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-建造者模式</title>
    <url>/2020/10/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="盖房项目需求"><a href="#盖房项目需求" class="headerlink" title="盖房项目需求"></a>盖房项目需求</h1><p>1)    需要建房子：这一过程为打桩、砌墙、封顶。</p>
<p>2)    房子有各种各样的，比如普通房，高楼，别墅，各种房子的过程虽然一样，但是要求不要相同的。</p>
<p>3)    请编写程序，完成需求。</p>
<a id="more"></a>
<h1 id="传统方式解决盖房需求"><a href="#传统方式解决盖房需求" class="headerlink" title="传统方式解决盖房需求"></a>传统方式解决盖房需求</h1><p>1)    思路分析(图解)<br><img src="/2020/10/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/1.jpg" alt="01"><br>2)    代码演示</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.builder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractHouse</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打地基</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildBasic</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">//砌墙</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildWalls</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//封顶</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">roofed</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">()</span> </span>&#123; buildBasic(); buildWalls(); roofed();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> com.atguigu.builder;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonHouse</span> <span class="keyword">extends</span> <span class="title">AbstractHouse</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildBasic</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">" 普通房子打地基 "</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildWalls</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">" 普通房子砌墙 "</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">roofed</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">" 普通房子封顶 "</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> com.atguigu.builder;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">CommonHouse commonHouse = <span class="keyword">new</span> CommonHouse(); commonHouse.build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="传统方式的问题分析"><a href="#传统方式的问题分析" class="headerlink" title="传统方式的问题分析"></a>传统方式的问题分析</h1><p>1)    优点是比较好理解，简单易操作。</p>
<p>2)    设计的程序结构，过于简单，没有设计缓存层对象，程序的扩展和维护不好. 也就是说，这种设计方案，把产品(即：房子) 和 创建产品的过程(即：建房子流程) 封装在一起，耦合性增强了。</p>
<p>3)    解决方案：将产品和产品建造过程解耦  =&gt;    建造者模式。</p>
<h1 id="建造者模式基本介绍"><a href="#建造者模式基本介绍" class="headerlink" title="建造者模式基本介绍"></a>建造者模式基本介绍</h1><p>1)    建造者模式（Builder Pattern） 又叫生成器模式，是一种对象构建模式。它可以将复杂对象的建造过程抽象出来（抽象类别），使这个抽象过程的不同实现方法可以构造出不同表现（属性）的对象。</p>
<p>2)    建造者模式 是一步一步创建一个复杂的对象，它允许用户只通过指定复杂对象的类型和内容就可以构建它们， 用户不需要知道内部的具体构建细节。</p>
<h1 id="建造者模式的四个角色"><a href="#建造者模式的四个角色" class="headerlink" title="建造者模式的四个角色"></a>建造者模式的四个角色</h1><p>1)    Product（产品角色）： 一个具体的产品对象。</p>
<p>2)    Builder（抽象建造者）： 创建一个 Product 对象的各个部件指定的 接口/抽象类。</p>
<p>3)    ConcreteBuilder（具体建造者）： 实现接口，构建和装配各个部件。</p>
<p>4)    Director（指挥者）： 构建一个使用 Builder 接口的对象。它主要是用于创建一个复杂的对象。它主要有两个作用，一是：隔离了客户与对象的生产过程，二是：负责控制产品对象的生产过程。</p>
<h1 id="建造者模式原理类图"><a href="#建造者模式原理类图" class="headerlink" title="建造者模式原理类图"></a>建造者模式原理类图</h1><p><img src="/2020/10/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/2.jpg" alt="02"></p>
<h1 id="建造者模式解决盖房需求应用实例"><a href="#建造者模式解决盖房需求应用实例" class="headerlink" title="建造者模式解决盖房需求应用实例"></a>建造者模式解决盖房需求应用实例</h1><p>1)    需要建房子：这一过程为打桩、砌墙、封顶。不管是普通房子也好，别墅也好都需要经历这些过程，下面我们使用建造者模式(Builder Pattern)来完成</p>
<p>2)    思路分析图解(类图)<br><img src="/2020/10/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/3.jpg" alt="03"><br>3)    代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.builder.improve;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//盖普通房子</span></span><br><span class="line">CommonHouse commonHouse = <span class="keyword">new</span> CommonHouse();</span><br><span class="line"><span class="comment">//准备创建房子的指挥者</span></span><br><span class="line">HouseDirector houseDirector = <span class="keyword">new</span> HouseDirector(commonHouse);</span><br><span class="line"></span><br><span class="line"><span class="comment">//完成盖房子，返回产品(普通房子)</span></span><br><span class="line">House house = houseDirector.constructHouse();</span><br><span class="line"><span class="comment">//System.out.println(" 输 出 流 程 "); System.out.println("--------------------------");</span></span><br><span class="line"><span class="comment">//盖高楼</span></span><br><span class="line">HighBuilding highBuilding = <span class="keyword">new</span> HighBuilding();</span><br><span class="line"><span class="comment">//重置建造者houseDirector.setHouseBuilder(highBuilding);</span></span><br><span class="line"><span class="comment">//完成盖房子，返回产品(高楼) houseDirector.constructHouse();</span></span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> com.atguigu.builder.improve;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonHouse</span> <span class="keyword">extends</span> <span class="title">HouseBuilder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildBasic</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">" 普通房子打地基 5 米 "</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildWalls</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">" 普通房子砌墙 10cm "</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">roofed</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">" 普通房子屋顶 "</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> com.atguigu.builder.improve;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HighBuilding</span> <span class="keyword">extends</span> <span class="title">HouseBuilder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildBasic</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">" 高楼的打地基 100 米 "</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildWalls</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub System.out.println(" 高楼的砌墙 20cm ");</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">roofed</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">" 高楼的透明屋顶 "</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.atguigu.builder.improve;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 产 品 -&gt;Product public class House &#123;</span></span><br><span class="line"><span class="keyword">private</span> String baise; <span class="keyword">private</span> String wall; <span class="keyword">private</span> String roofed; <span class="function"><span class="keyword">public</span> String <span class="title">getBaise</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> baise;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBaise</span><span class="params">(String baise)</span> </span>&#123; <span class="keyword">this</span>.baise = baise;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getWall</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> wall;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWall</span><span class="params">(String wall)</span> </span>&#123; <span class="keyword">this</span>.wall = wall;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getRoofed</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> roofed;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRoofed</span><span class="params">(String roofed)</span> </span>&#123; <span class="keyword">this</span>.roofed = roofed;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> com.atguigu.builder.improve;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象的建造者</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">HouseBuilder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> House house = <span class="keyword">new</span> House();</span><br><span class="line"></span><br><span class="line"><span class="comment">//将建造的流程写好, 抽象的方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildBasic</span><span class="params">()</span></span>; <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildWalls</span><span class="params">()</span></span>; <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">roofed</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//建造房子好， 将产品(房子) 返回</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> House <span class="title">buildHouse</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> house;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> com.atguigu.builder.improve;</span><br><span class="line"></span><br><span class="line"><span class="comment">//指挥者，这里去指定制作流程，返回产品</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HouseDirector</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">HouseBuilder houseBuilder = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造器传入 houseBuilder</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HouseDirector</span><span class="params">(HouseBuilder houseBuilder)</span> </span>&#123; <span class="keyword">this</span>.houseBuilder = houseBuilder;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过 setter 传入 houseBuilder</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHouseBuilder</span><span class="params">(HouseBuilder houseBuilder)</span> </span>&#123; <span class="keyword">this</span>.houseBuilder = houseBuilder;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如何处理建造房子的流程，交给指挥者 public House constructHouse() &#123;</span></span><br><span class="line">houseBuilder.buildBasic(); houseBuilder.buildWalls(); houseBuilder.roofed();</span><br><span class="line"><span class="keyword">return</span> houseBuilder.buildHouse();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="建造者模式在-JDK-的应用和源码分析"><a href="#建造者模式在-JDK-的应用和源码分析" class="headerlink" title="建造者模式在 JDK 的应用和源码分析"></a>建造者模式在 JDK 的应用和源码分析</h1><p>1)    java.lang.StringBuilder 中的建造者模式</p>
<p>2)    代码说明+Debug 源码<br><img src="/2020/10/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/4.jpg" alt="04"><br>3)    源码中建造者模式角色分析<br>Appendable 接口定义了多个 append 方法(抽象方法), 即 Appendable 为抽象建造者, 定义了抽象方法</p>
<p>AbstractStringBuilder  实现了  Appendable  接口方法，这里的  AbstractStringBuilder    已经是建造者，只是不能实例化</p>
<p>StringBuilder 即充当了指挥者角色，同时充当了具体的建造者，建造方法的实现是由 AbstractStringBuilder 完成 , 而 StringBuilder    继承了 AbstractStringBuilder</p>
<h1 id="建造者模式的注意事项和细节"><a href="#建造者模式的注意事项和细节" class="headerlink" title="建造者模式的注意事项和细节"></a>建造者模式的注意事项和细节</h1><p>1)    客户端(使用程序)不必知道产品内部组成的细节，将产品本身与产品的创建过程解耦，使得相同的创建过程可以创建不同的产品对象。</p>
<p>2)    每一个具体建造者都相对独立，而与其他的具体建造者无关，因此可以很方便地替换具体建造者或增加新的具体建造者， 用户使用不同的具体建造者即可得到不同的产品对象。</p>
<p>3)    可以更加精细地控制产品的创建过程 。将复杂产品的创建步骤分解在不同的方法中，使得创建过程更加清晰， 也更方便使用程序来控制创建过程。</p>
<p>4)    增加新的具体建造者无须修改原有类库的代码，指挥者类针对抽象建造者类编程，系统扩展方便，符合“开闭原则”。</p>
<p>5)    建造者模式所创建的产品一般具有较多的共同点，其组成部分相似，如果产品之间的差异性很大，则不适合使用建造者模式，因此其使用范围受到一定的限制。</p>
<p>6)    如果产品的内部变化复杂，可能会导致需要定义很多具体建造者类来实现这种变化，导致系统变得很庞大，因此在这种情况下，要考虑是否选择建造者模式。</p>
<p>7)    抽象工厂模式 VS 建造者模式<br>抽象工厂模式实现对产品家族的创建，一个产品家族是这样的一系列产品：具有不同分类维度的产品组合，采用抽象工厂模式不需要关心构建过程，只关心什么产品由什么工厂生产即可。而建造者模式则是要求按照指定的蓝图建造产品，它的主要目的是通过组装零配件而产生一个新产品。</p>
]]></content>
  </entry>
  <entry>
    <title>设计模式-工厂模式</title>
    <url>/2020/10/12/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h1><h2 id="需求实例"><a href="#需求实例" class="headerlink" title="需求实例"></a>需求实例</h2><p>披萨项目：要便于披萨种类的扩展，要便于维护    </p>
<p>1)    披萨的种类很多(比如 GreekPizz、CheesePizz 等)<br>2)    披萨的制作有 prepare，bake, cut, box<br>3)    完成披萨店订购功能</p>
<a id="more"></a>
<h2 id="使用传统的方式来完成"><a href="#使用传统的方式来完成" class="headerlink" title="使用传统的方式来完成"></a>使用传统的方式来完成</h2><p>1)    思路分析(类图)<br><img src="/2020/10/12/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/1.jpg" alt="01"><br>编写 OrderPizza.java 去订购需要的各种 Pizza</p>
<p>2)    代码演示</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">public class OrderPizza &#123;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 构造器</span><br><span class="line"><span class="regexp">//</span>	public OrderPizza() &#123;</span><br><span class="line"><span class="regexp">//</span>	Pizza pizza = null;</span><br><span class="line"><span class="regexp">//</span>	String orderType; <span class="regexp">//</span>  订购披萨的类型</span><br><span class="line"><span class="regexp">//</span>	<span class="keyword">do</span> &#123;</span><br><span class="line"><span class="regexp">//</span>	orderType = getType();</span><br><span class="line"><span class="regexp">//</span>	<span class="keyword">if</span> (orderType.equals(<span class="string">"greek"</span>)) &#123;</span><br><span class="line"><span class="regexp">//</span>	pizza = new GreekPizza();</span><br><span class="line"><span class="regexp">//</span>	pizza.setName(<span class="string">" 希腊披萨 "</span>);</span><br><span class="line"><span class="regexp">//</span>	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (orderType.equals(<span class="string">"cheese"</span>)) &#123;</span><br><span class="line"><span class="regexp">//</span>	pizza = new CheesePizza();</span><br><span class="line"><span class="regexp">//</span>	pizza.setName(<span class="string">" 奶酪披萨 "</span>);</span><br><span class="line"><span class="regexp">//</span>	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (orderType.equals(<span class="string">"pepper"</span>)) &#123;</span><br><span class="line"><span class="regexp">//</span>	pizza = new PepperPizza();</span><br><span class="line"><span class="regexp">//</span>	pizza.setName(<span class="string">"胡椒披萨"</span>);</span><br><span class="line"><span class="regexp">//</span>	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="regexp">//</span>	<span class="keyword">break</span>;</span><br><span class="line"><span class="regexp">//</span>	&#125;</span><br><span class="line"><span class="regexp">//</span>	<span class="regexp">//</span>输出 pizza 制作过程</span><br><span class="line"><span class="regexp">//</span>	pizza.prepare();</span><br><span class="line"><span class="regexp">//</span>	pizza.bake();</span><br><span class="line"><span class="regexp">//</span>	pizza.cut();</span><br><span class="line"><span class="regexp">//</span>	pizza.box();</span><br><span class="line"><span class="regexp">//</span></span><br><span class="line"><span class="regexp">//</span>	&#125; <span class="keyword">while</span> (true);</span><br><span class="line"><span class="regexp">//</span>	&#125;</span><br></pre></td></tr></table></figure>
<h2 id="传统的方式的优缺点"><a href="#传统的方式的优缺点" class="headerlink" title="传统的方式的优缺点"></a>传统的方式的优缺点</h2><p>1)    优点是比较好理解，简单易操作。    </p>
<p>2)    缺点是违反了设计模式的 ocp 原则，即对扩展开放，对修改关闭。即当我们给类增加新功能的时候，尽量不修改代码，或者尽可能少修改代码.    </p>
<p>3)    比如我们这时要新增加一个 Pizza 的种类(Pepper 披萨)，我们需要做如下修改. 如果我们增加一个 Pizza 类，只要是订购 Pizza 的代码都需要修改<br><img src="/2020/10/12/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/2.jpg" alt="02"><br>4)    改进的思路分析<br>分析：修改代码可以接受，但是如果我们在其它的地方也有创建 Pizza 的代码，就意味着，也需要修改，而创建 Pizza<br>的代码，往往有多处。<br>思路：把创建 Pizza 对象封装到一个类中，这样我们有新的 Pizza 种类时，只需要修改该类就可，其它有创建到 Pizza<br>对象的代码就不需要修改了 -&gt; 简单工厂模式</p>
<h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><p>1)    简单工厂模式是属于创建型模式，是工厂模式的一种。简单工厂模式是由一个工厂对象决定创建出哪一种产品类的实例。简单工厂模式是工厂模式家族中最简单实用的模式</p>
<p>2)    简单工厂模式：定义了一个创建对象的类，由这个类来封装实例化对象的行为(代码)</p>
<p>3)    在软件开发中，当我们会用到大量的创建某种、某类或者某批对象时，就会使用到工厂模式</p>
<h2 id="使用简单工厂模式"><a href="#使用简单工厂模式" class="headerlink" title="使用简单工厂模式"></a>使用简单工厂模式</h2><p>1)    简单工厂模式的设计方案: 定义一个可以实例化 Pizaa 对象的类，封装创建对象的代码。<br><img src="/2020/10/12/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/3.jpg" alt="03"><br>2)    代码示例</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//简单工厂类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//更加 orderType 返回对应的 Pizza 对象</span></span><br><span class="line"><span class="keyword">public</span> Pizza createPizza(<span class="keyword">String</span> orderType) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Pizza pizza = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"使用简单工厂模式"</span>); <span class="keyword">if</span> (orderType.equals(<span class="string">"greek"</span>)) &#123;</span><br><span class="line">pizza = <span class="keyword">new</span> <span class="type">GreekPizza</span>();</span><br><span class="line">pizza.setName(<span class="string">" 希腊披萨 "</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (orderType.equals(<span class="string">"cheese"</span>)) &#123; pizza = <span class="keyword">new</span> <span class="type">CheesePizza</span>();</span><br><span class="line">pizza.setName(<span class="string">" 奶酪披萨 "</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (orderType.equals(<span class="string">"pepper"</span>)) &#123; pizza = <span class="keyword">new</span> <span class="type">PepperPizza</span>();</span><br><span class="line">pizza.setName(<span class="string">"胡椒披萨"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> pizza;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//简单工厂模式 也叫 静态工厂模式</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Pizza createPizza2(<span class="keyword">String</span> orderType) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Pizza pizza = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"使用简单工厂模式 2"</span>); <span class="keyword">if</span> (orderType.equals(<span class="string">"greek"</span>)) &#123;</span><br><span class="line">pizza = <span class="keyword">new</span> <span class="type">GreekPizza</span>();</span><br><span class="line">pizza.setName(<span class="string">" 希腊披萨 "</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (orderType.equals(<span class="string">"cheese"</span>)) &#123; pizza = <span class="keyword">new</span> <span class="type">CheesePizza</span>();</span><br><span class="line">pizza.setName(<span class="string">" 奶酪披萨 "</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (orderType.equals(<span class="string">"pepper"</span>)) &#123; pizza = <span class="keyword">new</span> <span class="type">PepperPizza</span>();</span><br><span class="line">pizza.setName(<span class="string">"胡椒披萨"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> pizza;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//OrderPizza.java</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.atguigu.factory.simplefactory.pizzastore.order;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException; <span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.factory.simplefactory.pizzastore.pizza.Pizza;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderPizza</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造器</span></span><br><span class="line"><span class="comment">//	public OrderPizza() &#123;</span></span><br><span class="line"><span class="comment">//	Pizza pizza = null;</span></span><br><span class="line"><span class="comment">//	String orderType; //  订购披萨的类型</span></span><br><span class="line"><span class="comment">//	do &#123;</span></span><br><span class="line"><span class="comment">//	orderType = getType();</span></span><br><span class="line"><span class="comment">//	if (orderType.equals("greek")) &#123;</span></span><br><span class="line"><span class="comment">//	pizza = new GreekPizza();</span></span><br><span class="line"><span class="comment">//	pizza.setName(" 希腊披萨 ");</span></span><br><span class="line"><span class="comment">//	&#125; else if (orderType.equals("cheese")) &#123;</span></span><br><span class="line"><span class="comment">//	pizza = new CheesePizza();</span></span><br><span class="line"><span class="comment">//	pizza.setName(" 奶酪披萨 ");</span></span><br><span class="line"><span class="comment">//	&#125; else if (orderType.equals("pepper")) &#123;</span></span><br><span class="line"><span class="comment">//	pizza = new PepperPizza();</span></span><br><span class="line"><span class="comment">//	pizza.setName("胡椒披萨");</span></span><br><span class="line"><span class="comment">//	&#125; else &#123;</span></span><br><span class="line"><span class="comment">//	break;</span></span><br><span class="line"><span class="comment">//	&#125;</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">//	//输出 pizza 制作过程</span></span><br><span class="line"><span class="comment">//	pizza.prepare();</span></span><br><span class="line"><span class="comment">//	pizza.bake();</span></span><br><span class="line"><span class="comment">//	pizza.cut();</span></span><br><span class="line"><span class="comment">//	pizza.box();</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//	&#125; while (true);</span></span><br><span class="line"><span class="comment">//	&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个简单工厂对象SimpleFactory simpleFactory; Pizza pizza = null;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//构造器</span></span><br><span class="line"><span class="keyword">public</span> OrderPizza(SimpleFactory simpleFactory) &#123; setFactory(simpleFactory);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> void setFactory(SimpleFactory simpleFactory) &#123;</span><br><span class="line"><span class="keyword">String</span> orderType = <span class="string">""</span>; <span class="comment">//用户输入的</span></span><br><span class="line"><span class="built_in">this</span>.simpleFactory = simpleFactory; <span class="comment">//设置简单工厂对象do &#123;</span></span><br><span class="line">orderType = getType();</span><br><span class="line">pizza = <span class="built_in">this</span>.simpleFactory.createPizza(orderType);</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//输出 pizza</span></span><br><span class="line"><span class="keyword">if</span>(pizza != <span class="literal">null</span>) &#123; <span class="comment">//订购成功</span></span><br><span class="line">pizza.prepare(); pizza.bake();</span><br><span class="line">pizza.cut();</span><br><span class="line">pizza.box();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">" 订购披萨失败 "</span>); <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">while</span>(<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写一个方法，可以获取客户希望订购的披萨种类</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">String</span> getType() &#123; <span class="keyword">try</span> &#123;</span><br><span class="line">BufferedReader strin = <span class="keyword">new</span> <span class="type">BufferedReader</span>(<span class="keyword">new</span> <span class="type">InputStreamReader</span>(System.<span class="keyword">in</span>)); System.out.println(<span class="string">"input pizza 种类:"</span>);</span><br><span class="line"><span class="keyword">String</span> str = strin.readLine();</span><br><span class="line"><span class="keyword">return</span> str;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123; e.printStackTrace(); <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h1><h2 id="新的需求"><a href="#新的需求" class="headerlink" title="新的需求"></a>新的需求</h2><p>披萨项目新的需求：客户在点披萨时，可以点不同口味的披萨，比如 北京的奶酪 pizza、北京的胡椒 pizza 或者是伦敦的奶酪 pizza、伦敦的胡椒 pizza。</p>
<h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路 1"></a>思路 1</h2><p>使用简单工厂模式，创建不同的简单工厂类，比如 BJPizzaSimpleFactory、LDPizzaSimpleFactory 等等.从当前这个案例来说，也是可以的，但是考虑到项目的规模，以及软件的可维护性、可扩展性并不是特别好</p>
<h2 id="思路-2"><a href="#思路-2" class="headerlink" title="思路 2"></a>思路 2</h2><p>使用工厂方法模式</p>
<h2 id="工厂方法模式介绍"><a href="#工厂方法模式介绍" class="headerlink" title="工厂方法模式介绍"></a>工厂方法模式介绍</h2><p>1)    工厂方法模式设计方案：将披萨项目的实例化功能抽象成抽象方法，在不同的口味点餐子类中具体实现。    </p>
<p>2)    工厂方法模式：定义了一个创建对象的抽象方法，由子类决定要实例化的类。工厂方法模式将对象的实例化推迟到子类。</p>
<h2 id="工厂方法模式应用案例"><a href="#工厂方法模式应用案例" class="headerlink" title="工厂方法模式应用案例"></a>工厂方法模式应用案例</h2><p>1)    披萨项目新的需求：客户在点披萨时，可以点不同口味的披萨，比如 北京的奶酪 pizza、北京的胡椒 pizza 或者是伦敦的奶酪 pizza、伦敦的胡椒 pizza</p>
<p>2)    思路分析图解<br><img src="/2020/10/12/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/4.jpg" alt="04"><br>3)    代码实现</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">//OrderPizza.java 类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.atguigu.factory.factorymethod.pizzastore.order;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.<span class="type">BufferedReader</span>; <span class="keyword">import</span> java.io.<span class="type">IOException</span>; <span class="keyword">import</span> java.io.<span class="type">InputStreamReader</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.factory.factorymethod.pizzastore.pizza.<span class="type">Pizza</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderPizza</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个抽象方法，createPizza ,  让各个工厂子类自己实现</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="type">Pizza</span> createPizza(<span class="type">String</span> orderType);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造器</span></span><br><span class="line">public <span class="type">OrderPizza</span>() &#123; <span class="type">Pizza</span> pizza = <span class="literal">null</span>;</span><br><span class="line"><span class="type">String</span> orderType; <span class="comment">//  订购披萨的类型</span></span><br><span class="line">do &#123;</span><br><span class="line">orderType = getType();</span><br><span class="line">pizza = createPizza(orderType); <span class="comment">//抽象方法，由工厂子类完成</span></span><br><span class="line"><span class="comment">//输出 pizza 制作过程</span></span><br><span class="line">pizza.prepare(); pizza.bake();</span><br><span class="line">pizza.cut();</span><br><span class="line">pizza.box();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">// 写一个方法，可以获取客户希望订购的披萨种类</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">String</span> getType() &#123; <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">BufferedReader</span> strin = <span class="keyword">new</span> <span class="type">BufferedReader</span>(<span class="keyword">new</span> <span class="type">InputStreamReader</span>(<span class="type">System</span>.in)); <span class="type">System</span>.out.println(<span class="string">"input pizza 种类:"</span>);</span><br><span class="line"><span class="type">String</span> str = strin.readLine();</span><br><span class="line"><span class="keyword">return</span> str;</span><br><span class="line">&#125; <span class="keyword">catch</span> (<span class="type">IOException</span> e) &#123; e.printStackTrace(); <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.atguigu.factory.factorymethod.pizzastore.order;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.factory.factorymethod.pizzastore.pizza.<span class="type">BJCheesePizza</span>; <span class="keyword">import</span> com.atguigu.factory.factorymethod.pizzastore.pizza.<span class="type">BJPepperPizza</span>; <span class="keyword">import</span> com.atguigu.factory.factorymethod.pizzastore.pizza.<span class="type">Pizza</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">BJOrderPizza</span> <span class="keyword">extends</span> <span class="title">OrderPizza</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="type">Pizza</span> createPizza(<span class="type">String</span> orderType) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">Pizza</span> pizza = <span class="literal">null</span>; <span class="keyword">if</span>(orderType.equals(<span class="string">"cheese"</span>)) &#123;</span><br><span class="line">pizza = <span class="keyword">new</span> <span class="type">BJCheesePizza</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (orderType.equals(<span class="string">"pepper"</span>)) &#123; pizza = <span class="keyword">new</span> <span class="type">BJPepperPizza</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub return pizza;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> com.atguigu.factory.factorymethod.pizzastore.order;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.factory.factorymethod.pizzastore.pizza.<span class="type">BJCheesePizza</span>; <span class="keyword">import</span> com.atguigu.factory.factorymethod.pizzastore.pizza.<span class="type">BJPepperPizza</span>; <span class="keyword">import</span> com.atguigu.factory.factorymethod.pizzastore.pizza.<span class="type">LDCheesePizza</span>; <span class="keyword">import</span> com.atguigu.factory.factorymethod.pizzastore.pizza.<span class="type">LDPepperPizza</span>; <span class="keyword">import</span> com.atguigu.factory.factorymethod.pizzastore.pizza.<span class="type">Pizza</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">LDOrderPizza</span> <span class="keyword">extends</span> <span class="title">OrderPizza</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="type">Pizza</span> createPizza(<span class="type">String</span> orderType) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">Pizza</span> pizza = <span class="literal">null</span>; <span class="keyword">if</span>(orderType.equals(<span class="string">"cheese"</span>)) &#123;</span><br><span class="line">pizza = <span class="keyword">new</span> <span class="type">LDCheesePizza</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (orderType.equals(<span class="string">"pepper"</span>)) &#123; pizza = <span class="keyword">new</span> <span class="type">LDPepperPizza</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub return pizza;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h1><h2 id="基本介绍-1"><a href="#基本介绍-1" class="headerlink" title="基本介绍"></a>基本介绍</h2><p>1)    抽象工厂模式：定义了一个 interface 用于创建相关或有依赖关系的<strong>对象簇</strong>，而无需指明具体的类    </p>
<p>2)    抽象工厂模式可以将简单工厂模式和工厂方法模式进行整合。    </p>
<p>3)    从设计层面看，抽象工厂模式就是对简单工厂模式的改进(或者称为进一步的抽象)。    </p>
<p>4)    将工厂抽象成两层，AbsFactory(抽象工厂) 和 具体实现的工厂子类。程序员可以根据创建对象类型使用对应的工厂子类。这样将单个的简单工厂类变成了工厂簇，更利于代码的维护和扩展。</p>
<p>5)    类图<br><img src="/2020/10/12/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/5.jpg" alt="05"></p>
<h2 id="抽象工厂模式应用实例"><a href="#抽象工厂模式应用实例" class="headerlink" title="抽象工厂模式应用实例"></a>抽象工厂模式应用实例</h2><p>使用抽象工厂模式来完成披萨项目</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">package com.atguigu.<span class="keyword">factory</span>.absfactory.pizzastore.order;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.<span class="keyword">factory</span>.absfactory.pizzastore.pizza.Pizza;</span><br><span class="line"></span><br><span class="line"><span class="comment">//一个抽象工厂模式的抽象层(接口) public interface AbsFactory &#123;</span></span><br><span class="line"><span class="comment">//让下面的工厂子类来 具体实现</span></span><br><span class="line">public Pizza createPizza(<span class="built_in">String</span> orderType);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">package com.atguigu.<span class="keyword">factory</span>.absfactory.pizzastore.order;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.<span class="keyword">factory</span>.absfactory.pizzastore.pizza.BJCheesePizza; <span class="keyword">import</span> com.atguigu.<span class="keyword">factory</span>.absfactory.pizzastore.pizza.BJPepperPizza; <span class="keyword">import</span> com.atguigu.<span class="keyword">factory</span>.absfactory.pizzastore.pizza.Pizza;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这是工厂子类</span></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">BJFactory</span> <span class="keyword">implements</span> <span class="title">AbsFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">public Pizza createPizza(<span class="built_in">String</span> orderType) &#123;</span><br><span class="line">System.out.println(<span class="string">"~使用的是抽象工厂模式~"</span>);</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub Pizza pizza = null; if(orderType.equals("cheese")) &#123;</span></span><br><span class="line">pizza = <span class="keyword">new</span> BJCheesePizza();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (orderType.equals(<span class="string">"pepper"</span>))&#123; pizza = <span class="keyword">new</span> BJPepperPizza();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> pizza;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">package com.atguigu.<span class="keyword">factory</span>.absfactory.pizzastore.order;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.<span class="keyword">factory</span>.absfactory.pizzastore.pizza.LDCheesePizza; <span class="keyword">import</span> com.atguigu.<span class="keyword">factory</span>.absfactory.pizzastore.pizza.LDPepperPizza; <span class="keyword">import</span> com.atguigu.<span class="keyword">factory</span>.absfactory.pizzastore.pizza.Pizza;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">LDFactory</span> <span class="keyword">implements</span> <span class="title">AbsFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">public Pizza createPizza(<span class="built_in">String</span> orderType) &#123;</span><br><span class="line">System.out.println(<span class="string">"~使用的是抽象工厂模式~"</span>); Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (orderType.equals(<span class="string">"cheese"</span>)) &#123; pizza = <span class="keyword">new</span> LDCheesePizza();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (orderType.equals(<span class="string">"pepper"</span>)) &#123; pizza = <span class="keyword">new</span> LDPepperPizza();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> pizza;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//OrderPizza.java</span></span><br><span class="line">package com.atguigu.<span class="keyword">factory</span>.absfactory.pizzastore.order;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException; <span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.<span class="keyword">factory</span>.absfactory.pizzastore.pizza.Pizza;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">OrderPizza</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">AbsFactory <span class="keyword">factory</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造器</span></span><br><span class="line">public OrderPizza(AbsFactory <span class="keyword">factory</span>) &#123; setFactory(<span class="keyword">factory</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">private <span class="keyword">void</span> setFactory(AbsFactory <span class="keyword">factory</span>) &#123; Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line"><span class="built_in">String</span> orderType = <span class="string">""</span>; <span class="comment">//  用户输入</span></span><br><span class="line"><span class="keyword">this</span>.<span class="keyword">factory</span> = <span class="keyword">factory</span>; <span class="keyword">do</span> &#123;</span><br><span class="line">orderType = getType();</span><br><span class="line"><span class="comment">// factory  可能是北京的工厂子类，也可能是伦敦的工厂子类</span></span><br><span class="line">pizza = <span class="keyword">factory</span>.createPizza(orderType); <span class="keyword">if</span> (pizza != <span class="keyword">null</span>) &#123; <span class="comment">// 订 购 ok</span></span><br><span class="line">pizza.prepare();</span><br><span class="line">pizza.bake();</span><br><span class="line">pizza.cut();</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">pizza.box();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"订购失败"</span>); <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写一个方法，可以获取客户希望订购的披萨种类</span></span><br><span class="line">private <span class="built_in">String</span> getType() &#123; <span class="keyword">try</span> &#123;</span><br><span class="line">BufferedReader strin = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.<span class="keyword">in</span>)); System.out.println(<span class="string">"input pizza 种类:"</span>);</span><br><span class="line"><span class="built_in">String</span> str = strin.readLine();</span><br><span class="line"><span class="keyword">return</span> str;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123; e.printStackTrace(); <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="工厂模式在-JDK-Calendar-应用的源码分析"><a href="#工厂模式在-JDK-Calendar-应用的源码分析" class="headerlink" title="工厂模式在 JDK-Calendar 应用的源码分析"></a>工厂模式在 JDK-Calendar 应用的源码分析</h2><p>1)    JDK 中的 Calendar 类中，就使用了简单工厂模式</p>
<p>2)    源码分析</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">package com.atguigu.jdk;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span> &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">// getInstance 是 Calendar 静态方法</span></span><br><span class="line">Calendar cal = Calendar.getInstance();</span><br><span class="line"><span class="comment">// 注意月份下标从 0 开始，所以取月份要+1</span></span><br><span class="line">System.out.<span class="built_in">println</span>(<span class="string">"年:"</span> + cal.<span class="built_in">get</span>(Calendar.YEAR));</span><br><span class="line">System.out.<span class="built_in">println</span>(<span class="string">" 月 :"</span> + (cal.<span class="built_in">get</span>(Calendar.MONTH) + <span class="number">1</span>)); System.out.<span class="built_in">println</span>(<span class="string">"日:"</span> + cal.<span class="built_in">get</span>(Calendar.DAY_OF_MONTH));</span><br><span class="line">System.out.<span class="built_in">println</span>(<span class="string">"时:"</span> + cal.<span class="built_in">get</span>(Calendar.HOUR_OF_DAY));</span><br><span class="line">System.out.<span class="built_in">println</span>(<span class="string">"分:"</span> + cal.<span class="built_in">get</span>(Calendar.MINUTE));</span><br><span class="line">System.out.<span class="built_in">println</span>(<span class="string">"秒:"</span> + cal.<span class="built_in">get</span>(Calendar.SECOND));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Calendar.java</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Calendar <span class="title">getInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> createCalendar(TimeZone.getDefault(), Locale.getDefault(Locale.Category.FORMAT));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Calendar <span class="title">createCalendar</span><span class="params">(TimeZone zone,</span></span></span><br><span class="line"><span class="function"><span class="params">Locale aLocale)</span> <span class="comment">//根据 TimeZone zone, locale 创建对应的实例</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">CalendarProvider provider = LocaleProviderAdapter.getAdapter(CalendarProvider.class, aLocale)</span><br><span class="line">.getCalendarProvider();</span><br><span class="line"><span class="keyword">if</span> (provider != null) &#123; <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">return</span> provider.getInstance(zone, aLocale);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IllegalArgumentException iae) &#123;</span><br><span class="line"><span class="comment">// fall back to the default instantiation</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Calendar cal = null;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (aLocale.hasExtensions()) &#123;</span><br><span class="line"><span class="keyword">String</span> caltype = aLocale.getUnicodeLocaleType(<span class="string">"ca"</span>); <span class="keyword">if</span> (caltype != null) &#123;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (caltype) &#123; <span class="keyword">case</span> <span class="string">"buddhist"</span>:</span><br><span class="line">cal = <span class="keyword">new</span> BuddhistCalendar(zone, aLocale);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"japanese"</span>:</span><br><span class="line">cal = <span class="keyword">new</span> JapaneseImperialCalendar(zone, aLocale);</span><br><span class="line"><span class="keyword">break</span>; <span class="keyword">case</span> <span class="string">"gregory"</span>:</span><br><span class="line">cal = <span class="keyword">new</span> GregorianCalendar(zone, aLocale);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (cal == null) &#123;</span><br><span class="line"><span class="comment">// If no known calendar type is explicitly specified,</span></span><br><span class="line"><span class="comment">// perform the traditional way to create a Calendar:</span></span><br><span class="line"><span class="comment">// create a BuddhistCalendar for th_TH locale,</span></span><br><span class="line"><span class="comment">// a JapaneseImperialCalendar for ja_JP_JP locale, or</span></span><br><span class="line"><span class="comment">// a GregorianCalendar for any other locales.</span></span><br><span class="line"><span class="comment">// <span class="doctag">NOTE:</span> The language, country and variant strings are interned.</span></span><br><span class="line"><span class="keyword">if</span> (aLocale.getLanguage() == <span class="string">"th"</span> &amp;&amp; aLocale.getCountry() == <span class="string">"TH"</span>) &#123; cal = <span class="keyword">new</span> BuddhistCalendar(zone, aLocale);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (aLocale.getVariant() == <span class="string">"JP"</span> &amp;&amp; aLocale.getLanguage() == <span class="string">"ja"</span> &amp;&amp; aLocale.getCountry() == <span class="string">"JP"</span>) &#123;</span><br><span class="line">cal = <span class="keyword">new</span> JapaneseImperialCalendar(zone, aLocale);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br></pre></td></tr></table></figure>
<h1 id="工厂模式小结"><a href="#工厂模式小结" class="headerlink" title="工厂模式小结"></a>工厂模式小结</h1><p>1)    工厂模式的意义<br>将实例化对象的代码提取出来，放到一个类中统一管理和维护，达到和主项目的依赖关系的解耦。从而提高项目的扩展和维护性。    </p>
<p>2)    三种工厂模式 (简单工厂模式、工厂方法模式、抽象工厂模式)</p>
<p>3)    设计模式的依赖抽象原则<br>创建对象实例时，不要直接 new 类, 而是把这个 new 类的动作放在一个工厂的方法中，并返回。有的书上说， 变量不要直接持有具体类的引用。</p>
<p>不要让类继承具体类，而是继承抽象类或者是实现 interface(接口)</p>
<p>不要覆盖基类中已经实现的方法。</p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-适配器模式</title>
    <url>/2020/10/14/%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="现实生活中的适配器例子"><a href="#现实生活中的适配器例子" class="headerlink" title="现实生活中的适配器例子"></a>现实生活中的适配器例子</h1><p>泰国插座用的是两孔的（欧标），可以买个多功能转换插头 (适配器) ，这样就可以使用了。</p>
<h1 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h1><p>1)    适配器模式(Adapter Pattern)将某个类的接口转换成客户端期望的另一个接口表示，主的目的是兼容性，让原本因接口不匹配不能一起工作的两个类可以协同工作。其别名为包装器(Wrapper)。</p>
<p>2)    适配器模式属于结构型模式。</p>
<p>3)    主要分为三类：类适配器模式、对象适配器模式、接口适配器模式。</p>
<a id="more"></a>
<h1 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h1><p>1)    适配器模式：将一个类的接口转换成另一种接口.让原本接口不兼容的类可以兼容。</p>
<p>2)    从用户的角度看不到被适配者，是解耦的。</p>
<p>3)    用户调用适配器转化出来的目标接口方法，适配器再调用被适配者的相关接口方法。</p>
<p>4)    用户收到反馈结果，感觉只是和目标接口交互，如图。<br><img src="/2020/10/14/%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/1.jpg" alt="01"></p>
<h1 id="类适配器模式"><a href="#类适配器模式" class="headerlink" title="类适配器模式"></a>类适配器模式</h1><h2 id="类适配器模式介绍"><a href="#类适配器模式介绍" class="headerlink" title="类适配器模式介绍"></a>类适配器模式介绍</h2><p>基本介绍：Adapter 类，通过继承 src 类，实现 dst  类接口，完成 src-&gt;dst 的适配。</p>
<h2 id="类适配器模式应用实例"><a href="#类适配器模式应用实例" class="headerlink" title="类适配器模式应用实例"></a>类适配器模式应用实例</h2><p>1)    应用实例说明</p>
<p>以生活中充电器的例子来讲解适配器，充电器本身相当于 Adapter，220V 交流电相当于 src (即被适配者)，我们的目 dst(即 目标)是 5V 直流电</p>
<p>2)    思路分析(类图)<br><img src="/2020/10/14/%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/2.jpg" alt="02"></p>
<p>3)    代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.adapter.classadapter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub System.out.println(" === 类适配器模式 ===="); Phone phone = new Phone();</span></span><br><span class="line">phone.charging(<span class="keyword">new</span> VoltageAdapter());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> com.atguigu.adapter.classadapter;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//适配接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IVoltage5V</span> </span>&#123; <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">output5V</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> com.atguigu.adapter.classadapter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">//充电</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">charging</span><span class="params">(IVoltage5V iVoltage5V)</span> </span>&#123; <span class="keyword">if</span>(iVoltage5V.output5V() == <span class="number">5</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"电压为 5V, 可以充电~~"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (iVoltage5V.output5V() &gt; <span class="number">5</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"电压大于 5V, 不能充电~~"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> com.atguigu.adapter.classadapter;</span><br><span class="line"></span><br><span class="line"><span class="comment">//被适配的类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Voltage220V</span> </span>&#123;</span><br><span class="line"><span class="comment">//输出 220V 的电压</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">output220V</span><span class="params">()</span> </span>&#123; <span class="keyword">int</span> src = <span class="number">220</span>;</span><br><span class="line">System.out.println(<span class="string">"电压="</span> + src + <span class="string">"伏"</span>);</span><br><span class="line"><span class="keyword">return</span> src;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> com.atguigu.adapter.classadapter;</span><br><span class="line"></span><br><span class="line"><span class="comment">//适配器类</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VoltageAdapter</span> <span class="keyword">extends</span> <span class="title">Voltage220V</span> <span class="keyword">implements</span> <span class="title">IVoltage5V</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">output5V</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">//获取到 220V 电压</span></span><br><span class="line"><span class="keyword">int</span> srcV = output220V();</span><br><span class="line"><span class="keyword">int</span> dstV = srcV / <span class="number">44</span> ; <span class="comment">//转成 5v return dstV;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="类适配器模式注意事项和细节"><a href="#类适配器模式注意事项和细节" class="headerlink" title="类适配器模式注意事项和细节"></a>类适配器模式注意事项和细节</h2><p>1)    Java 是单继承机制，所以类适配器需要继承 src 类这一点算是一个缺点, 因为这要求 dst 必须是接口，有一定局限性。</p>
<p>2)    src 类的方法在 Adapter 中都会暴露出来，也增加了使用的成本。</p>
<p>3)    由于其继承了 src 类，所以它可以根据需求重写 src 类的方法，使得 Adapter 的灵活性增强了。</p>
<h1 id="对象适配器模式"><a href="#对象适配器模式" class="headerlink" title="对象适配器模式"></a>对象适配器模式</h1><h2 id="对象适配器模式介绍"><a href="#对象适配器模式介绍" class="headerlink" title="对象适配器模式介绍"></a>对象适配器模式介绍</h2><p>1)    基本思路和类的适配器模式相同，只是将 Adapter 类作修改，不是继承 src 类，而是持有 src 类的实例，以解决兼容性的问题。 即：持有 src 类，实现 dst  类接口，完成 src-&gt;dst 的适配。</p>
<p>2)    根据“合成复用原则”，在系统中尽量使用关联关系（聚合）来替代继承关系。</p>
<p>3)    对象适配器模式是适配器模式常用的一种。</p>
<h2 id="对象适配器模式应用实例"><a href="#对象适配器模式应用实例" class="headerlink" title="对象适配器模式应用实例"></a>对象适配器模式应用实例</h2><p>1)    应用实例说明</p>
<p>以生活中充电器的例子来讲解适配器，充电器本身相当于 Adapter，220V 交流电相当于 src (即被适配者)，我们的目 dst(即目标)是 5V 直流电，使用对象适配器模式完成。</p>
<p>2)    思路分析(类图)：只需修改适配器即可, 如下:</p>
<p><img src="/2020/10/14/%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/3.jpg" alt="03"></p>
<p>3)    代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub System.out.println(" === 对象适配器模式 ===="); Phone phone = new Phone();</span></span><br><span class="line">phone.charging(<span class="keyword">new</span> VoltageAdapter(<span class="keyword">new</span> Voltage220V()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> com.atguigu.adapter.objectadapter;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//适配接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IVoltage5V</span> </span>&#123; <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">output5V</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> com.atguigu.adapter.objectadapter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//充电</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">charging</span><span class="params">(IVoltage5V iVoltage5V)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(iVoltage5V.output5V() == <span class="number">5</span>) &#123;</span><br><span class="line"> </span><br><span class="line">System.out.println(<span class="string">"电压为 5V, 可以充电~~"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (iVoltage5V.output5V() &gt; <span class="number">5</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"电压大于 5V, 不能充电~~"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> com.atguigu.adapter.objectadapter;</span><br><span class="line"></span><br><span class="line"><span class="comment">//被适配的类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Voltage220V</span> </span>&#123;</span><br><span class="line"><span class="comment">//输出 220V 的电压，不变</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">output220V</span><span class="params">()</span> </span>&#123; <span class="keyword">int</span> src = <span class="number">220</span>;</span><br><span class="line">System.out.println(<span class="string">"电压="</span> + src + <span class="string">"伏"</span>);</span><br><span class="line"><span class="keyword">return</span> src;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> com.atguigu.adapter.objectadapter;</span><br><span class="line"></span><br><span class="line"><span class="comment">//适配器类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VoltageAdapter</span>	<span class="keyword">implements</span> <span class="title">IVoltage5V</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Voltage220V voltage220V; <span class="comment">// 关联关系-聚合</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过构造器，传入一个 Voltage220V 实例</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">VoltageAdapter</span><span class="params">(Voltage220V voltage220v)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.voltage220V = voltage220v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">output5V</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dst = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">null</span> != voltage220V) &#123;</span><br><span class="line"><span class="keyword">int</span> src = voltage220V.output220V();<span class="comment">//获取 220V 电压System.out.println("使用对象适配器，进行适配~~"); dst = src / 44;</span></span><br><span class="line">System.out.println(<span class="string">"适配完成，输出的电压为="</span> + dst);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> dst;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="对象适配器模式注意事项和细节"><a href="#对象适配器模式注意事项和细节" class="headerlink" title="对象适配器模式注意事项和细节"></a>对象适配器模式注意事项和细节</h2><p>1)    对象适配器和类适配器其实算是同一种思想，只不过实现方式不同。</p>
<p>根据合成复用原则，使用组合替代继承， 所以它解决了类适配器必须继承 src 的局限性问题，也不再要求 dst<br>必须是接口。</p>
<p>2)    使用成本更低，更灵活。</p>
<h1 id="接口适配器模式"><a href="#接口适配器模式" class="headerlink" title="接口适配器模式"></a>接口适配器模式</h1><h2 id="接口适配器模式介绍"><a href="#接口适配器模式介绍" class="headerlink" title="接口适配器模式介绍"></a>接口适配器模式介绍</h2><p>1)    一些书籍称为：适配器模式(Default Adapter Pattern)或缺省适配器模式。</p>
<p>2)    核心思路：当不需要全部实现接口提供的方法时，可先设计一个抽象类实现接口，并为该接口中每个方法提供一个默认实现（空方法），那么该抽象类的子类可有选择地覆盖父类的某些方法来实现需求。</p>
<p>3)    适用于一个接口不想使用其所有的方法的情况。</p>
<h2 id="接口适配器模式应用实例"><a href="#接口适配器模式应用实例" class="headerlink" title="接口适配器模式应用实例"></a>接口适配器模式应用实例</h2><p>1)    Android 中的属性动画 ValueAnimator 类可以通过 addListener(AnimatorListener listener)方法添加监听器， 那么常规写法如右：</p>
<p>2)    有时候我们不想实现 Animator.AnimatorListener 接口的全部方法，我们只想监听 onAnimationStart，我们会如下写。<br><img src="/2020/10/14/%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/4.jpg" alt="04"><br>3)    AnimatorListenerAdapter 类，就是一个接口适配器，代码如右图:它空实现了Animator.AnimatorListener 类(src)的所有方法。</p>
<p>4)    AnimatorListener 是一个接口。<br><img src="/2020/10/14/%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/5.jpg" alt="05"><br>5)    程序里的匿名内部类就是 Listener 具体实现类。<br><img src="/2020/10/14/%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/6.jpg" alt="06"><br>6)    案例说明。<br><img src="/2020/10/14/%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/7.jpg" alt="07"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.adapter.interfaceadapter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Interface4</span> </span>&#123; <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span></span>; <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span></span>; <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m3</span><span class="params">()</span></span>; <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m4</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> com.atguigu.adapter.interfaceadapter;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">//在 AbsAdapter 我们将 Interface4 的方法进行默认实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbsAdapter</span> <span class="keyword">implements</span> <span class="title">Interface4</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//默认实现</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m3</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m4</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> com.atguigu.adapter.interfaceadapter;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">AbsAdapter absAdapter = <span class="keyword">new</span> AbsAdapter() &#123;</span><br><span class="line"><span class="comment">//只需要去覆盖我们 需要使用 接口方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">"使用了 m1 的方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">absAdapter.m1();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="适配器模式在-SpringMVC-框架应用的源码剖析"><a href="#适配器模式在-SpringMVC-框架应用的源码剖析" class="headerlink" title="适配器模式在 SpringMVC 框架应用的源码剖析"></a>适配器模式在 SpringMVC 框架应用的源码剖析</h1><p>1)    SpringMvc 中的 HandlerAdapter, 就使用了适配器模式。</p>
<p>2)    SpringMVC 处理请求的流程回顾。</p>
<p>3)    使用 HandlerAdapter 的原因分析:<br>可以看到处理器的类型不同，有多重实现方式，那么调用方式就不是确定的，如果需要直接调用 Controller 方法，需要调用的时候就得不断是使用 if else 来进行判断是哪一种子类然后执行。那么如果后面要扩展 Controller， 就得修改原来的代码，这样违背了 OCP 原则。</p>
<p>4)    代码分析+Debug 源码。<br><img src="/2020/10/14/%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/8.jpg" alt="08"><br><img src="/2020/10/14/%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/9.jpg" alt="09"><br>通过doDispatch拿到Controller，再根据Controller获取对应的适配器，然后通过适配器调用Controller里面的方法。</p>
<h1 id="适配器模式的注意事项和细节"><a href="#适配器模式的注意事项和细节" class="headerlink" title="适配器模式的注意事项和细节"></a>适配器模式的注意事项和细节</h1><p>1)    三种命名方式，是根据 src 是以怎样的形式给到 Adapter（在 Adapter 里的形式）来命名的。</p>
<p>2)    类适配器：以类给到，在 Adapter 里，就是将 src 当做类，继承。</p>
<p>对象适配器：以对象给到，在 Adapter 里，将 src 作为一个对象，持有。</p>
<p>接口适配器：以接口给到，在 Adapter 里，将 src 作为一个接口，实现。</p>
<p>3)    Adapter 模式最大的作用还是将原本不兼容的接口融合在一起工作。</p>
<p>4)    实际开发中，实现起来不拘泥于我们讲解的三种经典形式</p>
]]></content>
  </entry>
  <entry>
    <title>设计模式-桥接模式</title>
    <url>/2020/10/14/%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="手机操作问题"><a href="#手机操作问题" class="headerlink" title="手机操作问题"></a>手机操作问题</h1><p>现在对不同手机类型的不同品牌实现操作编程(比如:开机、关机、上网，打电话等)，如图:<br><img src="/2020/10/14/%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/1.jpg" alt="01"></p>
<a id="more"></a>
<h1 id="传统方案解决手机操作问题"><a href="#传统方案解决手机操作问题" class="headerlink" title="传统方案解决手机操作问题"></a>传统方案解决手机操作问题</h1><p>传统方法对应的类图<br><img src="/2020/10/14/%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/2.jpg" alt="02"></p>
<h1 id="传统方案解决手机操作问题分析"><a href="#传统方案解决手机操作问题分析" class="headerlink" title="传统方案解决手机操作问题分析"></a>传统方案解决手机操作问题分析</h1><p>1)    扩展性问题(类爆炸)，如果我们再增加手机的样式(旋转式)，就需要增加各个品牌手机的类，同样如果我们增加一个手机品牌，也要在各个手机样式类下增加。</p>
<p>2)    违反了单一职责原则，当我们增加手机样式时，要同时增加所有品牌的手机，这样增加了代码维护成本。</p>
<p>3)    解决方案-使用桥接模式。</p>
<h1 id="桥接模式-Bridge-基本介绍"><a href="#桥接模式-Bridge-基本介绍" class="headerlink" title="桥接模式(Bridge)-基本介绍"></a>桥接模式(Bridge)-基本介绍</h1><p>1)    桥接模式(Bridge 模式)是指：将实现与抽象放在两个不同的类层次中，使两个层次可以独立改变。</p>
<p>2)    是一种结构型设计模式。</p>
<p>3)    Bridge 模式基于类的最小设计原则，通过使用封装、聚合及继承等行为让不同的类承担不同的职责。它的主要特点是把抽象(Abstraction)与行为实现(Implementation)分离开来，从而可以保持各部分的独立性以及应对他们的功能扩展。</p>
<h1 id="桥接模式-Bridge-原理类图"><a href="#桥接模式-Bridge-原理类图" class="headerlink" title="桥接模式(Bridge)-原理类图"></a>桥接模式(Bridge)-原理类图</h1><p><img src="/2020/10/14/%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/3.jpg" alt="03"></p>
<p>1)    Client 类：桥接模式的调用者。</p>
<p>2)    抽象类(Abstraction) :维护了 Implementor / 即它的实现类 ConcreteImplementorA.., 二者是聚合关系, Abstraction充当桥接类。</p>
<p>3)    RefinedAbstraction :  是 Abstraction  抽象类的子类。</p>
<p>4)    Implementor :  行为实现类的接口。</p>
<p>5)    ConcreteImplementorA /B ：行为的具体实现类。</p>
<p>6)    从 UML 图：这里的抽象类和接口是聚合的关系，其实调用和被调用关系。</p>
<h1 id="桥接模式解决手机操作问题"><a href="#桥接模式解决手机操作问题" class="headerlink" title="桥接模式解决手机操作问题"></a>桥接模式解决手机操作问题</h1><p>使用桥接模式改进传统方式，让程序具有搞好的扩展性，利用程序维护</p>
<p>1)    应用实例说明<br>2)    使用桥接模式对应的类图<br><img src="/2020/10/14/%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/4.jpg" alt="04"><br>3)    代码</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">package com.atguigu.bridge;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">//接口</span><br><span class="line"><span class="built_in">public</span> interface Brand &#123; <span class="type">void</span> <span class="keyword">open</span>();</span><br><span class="line"><span class="type">void</span> <span class="keyword">close</span>(); <span class="type">void</span> <span class="keyword">call</span>();</span><br><span class="line">&#125;</span><br><span class="line">package com.atguigu.bridge;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> Client &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">//获取折叠式手机 (样式 + 品牌 )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Phone phone1 = <span class="built_in">new</span> FoldedPhone(<span class="built_in">new</span> XiaoMi());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">phone1.<span class="keyword">open</span>(); phone1.<span class="keyword">call</span>(); phone1.<span class="keyword">close</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">System</span>.<span class="keyword">out</span>.println("=======================");</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Phone phone2 = <span class="built_in">new</span> FoldedPhone(<span class="built_in">new</span> Vivo());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">phone2.<span class="keyword">open</span>();</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">phone2.<span class="keyword">call</span>(); phone2.<span class="keyword">close</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">System</span>.<span class="keyword">out</span>.println("==============");</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">UpRightPhone phone3 = <span class="built_in">new</span> UpRightPhone(<span class="built_in">new</span> XiaoMi());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">phone3.<span class="keyword">open</span>(); phone3.<span class="keyword">call</span>(); phone3.<span class="keyword">close</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">System</span>.<span class="keyword">out</span>.println("==============");</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">UpRightPhone phone4 = <span class="built_in">new</span> UpRightPhone(<span class="built_in">new</span> Vivo());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">phone4.<span class="keyword">open</span>(); phone4.<span class="keyword">call</span>(); phone4.<span class="keyword">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">package com.atguigu.bridge;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//折叠式手机类，继承 抽象类 Phone</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> FoldedPhone extends Phone &#123;</span><br><span class="line"></span><br><span class="line">//构造器</span><br><span class="line"><span class="built_in">public</span> FoldedPhone(Brand brand) &#123; super(brand);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="type">void</span> <span class="keyword">open</span>() &#123; super.<span class="keyword">open</span>();</span><br><span class="line"><span class="keyword">System</span>.<span class="keyword">out</span>.println(" 折叠样式手机 ");</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="type">void</span> <span class="keyword">close</span>() &#123; super.<span class="keyword">close</span>();</span><br><span class="line"><span class="keyword">System</span>.<span class="keyword">out</span>.println(" 折叠样式手机 ");</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="type">void</span> <span class="keyword">call</span>() &#123; super.<span class="keyword">call</span>();</span><br><span class="line"><span class="keyword">System</span>.<span class="keyword">out</span>.println(" 折叠样式手机 ");</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">package com.atguigu.bridge;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> abstract <span class="keyword">class</span> Phone &#123;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//组合品牌</span><br><span class="line">private Brand brand;</span><br><span class="line"></span><br><span class="line">//构造器</span><br><span class="line"><span class="built_in">public</span> Phone(Brand brand) &#123; super();</span><br><span class="line">this.brand = brand;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">protected <span class="type">void</span> <span class="keyword">open</span>() &#123; this.brand.<span class="keyword">open</span>();</span><br><span class="line">&#125;</span><br><span class="line">protected <span class="type">void</span> <span class="keyword">close</span>() &#123; brand.<span class="keyword">close</span>();</span><br><span class="line">&#125;</span><br><span class="line">protected <span class="type">void</span> <span class="keyword">call</span>() &#123; brand.<span class="keyword">call</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">package com.atguigu.bridge;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> UpRightPhone extends Phone &#123;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">//构造器</span><br><span class="line"><span class="built_in">public</span> UpRightPhone(Brand brand) &#123; super(brand);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="type">void</span> <span class="keyword">open</span>() &#123; super.<span class="keyword">open</span>();</span><br><span class="line"><span class="keyword">System</span>.<span class="keyword">out</span>.println(" 直立样式手机 ");</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="type">void</span> <span class="keyword">close</span>() &#123; super.<span class="keyword">close</span>();</span><br><span class="line"><span class="keyword">System</span>.<span class="keyword">out</span>.println(" 直立样式手机 ");</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="type">void</span> <span class="keyword">call</span>() &#123; super.<span class="keyword">call</span>();</span><br><span class="line"><span class="keyword">System</span>.<span class="keyword">out</span>.println(" 直立样式手机 ");</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">package com.atguigu.bridge;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> Vivo implements Brand &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="type">void</span> <span class="keyword">open</span>() &#123;</span><br><span class="line">// TODO Auto-<span class="keyword">generated</span> <span class="keyword">method</span> stub <span class="keyword">System</span>.<span class="keyword">out</span>.println(" Vivo 手机开机 ");</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line"><span class="built_in">public</span> <span class="type">void</span> <span class="keyword">close</span>() &#123;</span><br><span class="line">// TODO Auto-<span class="keyword">generated</span> <span class="keyword">method</span> stub <span class="keyword">System</span>.<span class="keyword">out</span>.println(" Vivo 手机关机 ");</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line"><span class="built_in">public</span> <span class="type">void</span> <span class="keyword">call</span>() &#123;</span><br><span class="line">// TODO Auto-<span class="keyword">generated</span> <span class="keyword">method</span> stub <span class="keyword">System</span>.<span class="keyword">out</span>.println(" Vivo 手机打电话 ");</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">package com.atguigu.bridge;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> XiaoMi implements Brand &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line"><span class="built_in">public</span> <span class="type">void</span> <span class="keyword">open</span>() &#123;</span><br><span class="line">// TODO Auto-<span class="keyword">generated</span> <span class="keyword">method</span> stub</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">System</span>.<span class="keyword">out</span>.println(" 小米手机开机 ");</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line"><span class="built_in">public</span> <span class="type">void</span> <span class="keyword">close</span>() &#123;</span><br><span class="line">// TODO Auto-<span class="keyword">generated</span> <span class="keyword">method</span> stub</span><br><span class="line"><span class="keyword">System</span>.<span class="keyword">out</span>.println(" 小米手机关机 ");</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line"><span class="built_in">public</span> <span class="type">void</span> <span class="keyword">call</span>() &#123;</span><br><span class="line">// TODO Auto-<span class="keyword">generated</span> <span class="keyword">method</span> stub</span><br><span class="line"><span class="keyword">System</span>.<span class="keyword">out</span>.println(" 小米手机打电话 ");</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="桥接模式在-JDBC-的源码剖析"><a href="#桥接模式在-JDBC-的源码剖析" class="headerlink" title="桥接模式在 JDBC 的源码剖析"></a>桥接模式在 JDBC 的源码剖析</h1><p>1)    Jdbc 的 Driver 接口，如果从桥接模式来看，Driver 就是一个接口，下面可以有 MySQL 的 Driver，Oracle 的Driver，这些就可以当做实现接口类。</p>
<p>2)    代码分析+Debug 源码。<br><img src="/2020/10/14/%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/5.jpg" alt="05"><br><img src="/2020/10/14/%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/6.jpg" alt="06"></p>
<h1 id="桥接模式的注意事项和细节"><a href="#桥接模式的注意事项和细节" class="headerlink" title="桥接模式的注意事项和细节"></a>桥接模式的注意事项和细节</h1><p>1)    实现了抽象和实现部分的分离，从而极大的提供了系统的灵活性，让抽象部分和实现部分独立开来，这有助于系统进行分层设计，从而产生更好的结构化系统。</p>
<p>2)    对于系统的高层部分，只需要知道抽象部分和实现部分的接口就可以了，其它的部分由具体业务来完成。</p>
<p>3)    桥接模式替代多层继承方案，可以减少子类的个数，降低系统的管理和维护成本。</p>
<p>4)    桥接模式的引入增加了系统的理解和设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计和编程。</p>
<p>5)    桥接模式要求正确识别出系统中两个独立变化的维度(抽象、和实现)，因此其使用范围有一定的局限性，即需要有这样的应用场景。</p>
<p>桥接模式其它应用场景<br>对于那些不希望使用继承或因为多层次继承导致系统类的个数急剧增加的系统，桥接模式尤为适用。</p>
<h1 id="常见的应用场景"><a href="#常见的应用场景" class="headerlink" title="常见的应用场景"></a>常见的应用场景</h1><p>1)    -JDBC 驱动程序</p>
<p>2)    -银行转账系统<br>转账分类: 网上转账，柜台转账，AMT 转账<br>转账用户类型：普通用户，银卡用户，金卡用户..</p>
<p>3)    -消息管理<br>消息类型：即时消息，延时消息<br>消息分类：手机短信，邮件消息，QQ 消息…</p>
]]></content>
  </entry>
  <entry>
    <title>设计模式-装饰者模式</title>
    <url>/2020/10/18/%E6%A8%A1%E5%BC%8F-%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="星巴克咖啡订单项目"><a href="#星巴克咖啡订单项目" class="headerlink" title="星巴克咖啡订单项目"></a>星巴克咖啡订单项目</h1><p>1)    咖啡种类/单品咖啡：Espresso(意大利浓咖啡)、ShortBlack、LongBlack(美式咖啡)、Decaf(无因咖啡)。</p>
<p>2)    调料：Milk、Soy(豆浆)、Chocolate。</p>
<p>3)    要求在扩展新的咖啡种类时，具有良好的扩展性、改动方便、维护方便。</p>
<p>4)    使用 OO 的来计算不同种类咖啡的费用:  客户可以点单品咖啡，也可以单品咖啡+调料组合。</p>
<a id="more"></a>
<h1 id="方案-1-解决星巴克咖啡订单项目"><a href="#方案-1-解决星巴克咖啡订单项目" class="headerlink" title="方案 1 解决星巴克咖啡订单项目"></a>方案 1 解决星巴克咖啡订单项目</h1><p><img src="/2020/10/18/%E6%A8%A1%E5%BC%8F-%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/1.jpg" alt="01"></p>
<h1 id="方案-1-解决星巴克咖啡订单问题分析"><a href="#方案-1-解决星巴克咖啡订单问题分析" class="headerlink" title="方案 1 解决星巴克咖啡订单问题分析"></a>方案 1 解决星巴克咖啡订单问题分析</h1><p>1)    Drink 是一个抽象类，表示饮料。</p>
<p>2)    des 就是对咖啡的描述, 比如咖啡的名字。</p>
<p>3)    cost() 方法就是计算费用，Drink 类中做成一个抽象方法。</p>
<p>4)    Decaf 就是单品咖啡， 继承 Drink,  并实现 cost。</p>
<p>5)    Espress &amp;&amp; Milk 就是单品咖啡+调料， 这个组合很多。</p>
<p>6)    问题：这样设计，会有很多类，当我们增加一个单品咖啡，或者一个新的调料，类的数量就会倍增，就会出现类爆炸。</p>
<h1 id="方案-2-解决星巴克咖啡订单"><a href="#方案-2-解决星巴克咖啡订单" class="headerlink" title="方案 2 解决星巴克咖啡订单"></a>方案 2 解决星巴克咖啡订单</h1><p>1)    前面分析到方案 1 因为咖啡单品+调料组合会造成类的倍增，因此可以做改进，将调料内置到 Drink 类，这样就不会造成类数量过多。从而提高项目的维护性(如图)。</p>
<p><img src="/2020/10/18/%E6%A8%A1%E5%BC%8F-%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/2.jpg" alt="02"></p>
<p>2)    说明: milk,soy,chocolate 可以设计为 Boolean,表示是否要添加相应的调料。</p>
<h1 id="方案-2-解决星巴克咖啡订单问题分析"><a href="#方案-2-解决星巴克咖啡订单问题分析" class="headerlink" title="方案 2 解决星巴克咖啡订单问题分析"></a>方案 2 解决星巴克咖啡订单问题分析</h1><p>1)    方案 2 可以控制类的数量，不至于造成很多的类。</p>
<p>2)    在增加或者删除调料种类时，代码的维护量很大。</p>
<p>3)    考虑到用户可以添加多份 调料时，可以将 hasMilk 返回一个对应 int。</p>
<p>4)    考虑使用装饰者模式。</p>
<h1 id="装饰者模式定义"><a href="#装饰者模式定义" class="headerlink" title="装饰者模式定义"></a>装饰者模式定义</h1><p>1)    装饰者模式：动态的将新功能附加到对象上。在对象功能扩展方面，它比继承更有弹性，装饰者模式也体现了开闭原则(ocp)。</p>
<p>2)    这里提到的动态的将新功能附加到对象和 ocp 原则，在后面的应用实例上会以代码的形式体现。</p>
<h1 id="装饰者模式原理"><a href="#装饰者模式原理" class="headerlink" title="装饰者模式原理"></a>装饰者模式原理</h1><p>1)    装饰者模式就像打包一个快递<br>主体：比如：陶瓷、衣服 (Component) //  被装饰者<br>包装：比如：报纸填充、塑料泡沫、纸板、木板(Decorator)</p>
<p>2)    Component 主体：比如类似前面的 Drink。</p>
<p>3)    ConcreteComponent 和 Decorator。<br>ConcreteComponent：具体的主体， 比如前面的各个单品咖啡</p>
<p>4)    Decorator: 装饰者，比如各调料。<br>在如图的 Component 与 ConcreteComponent 之间，如果ConcreteComponent 类很多,还可以设计一个缓冲层，将共有的部分提取出来，抽象层一个类。<br><img src="/2020/10/18/%E6%A8%A1%E5%BC%8F-%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/3.jpg" alt="03"></p>
<h1 id="装饰者模式解决星巴克咖啡订单"><a href="#装饰者模式解决星巴克咖啡订单" class="headerlink" title="装饰者模式解决星巴克咖啡订单"></a>装饰者模式解决星巴克咖啡订单</h1><p><img src="/2020/10/18/%E6%A8%A1%E5%BC%8F-%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/4.jpg" alt="04"></p>
<h1 id="装饰者模式下的订单：2-份巧克力-一份牛奶的-LongBlack"><a href="#装饰者模式下的订单：2-份巧克力-一份牛奶的-LongBlack" class="headerlink" title="装饰者模式下的订单：2 份巧克力+一份牛奶的 LongBlack"></a>装饰者模式下的订单：2 份巧克力+一份牛奶的 LongBlack</h1><p><img src="/2020/10/18/%E6%A8%A1%E5%BC%8F-%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/5.jpg" alt="05"></p>
<h1 id="装饰者模式咖啡订单项目应用实例"><a href="#装饰者模式咖啡订单项目应用实例" class="headerlink" title="装饰者模式咖啡订单项目应用实例"></a>装饰者模式咖啡订单项目应用实例</h1><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.decorator;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体的 Decorator， 这里就是调味品</span></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Chocolate</span> <span class="keyword">extends</span> <span class="title">Decorator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">public <span class="type">Chocolate</span>(<span class="type">Drink</span> obj) &#123; <span class="keyword">super</span>(obj);</span><br><span class="line">setDes(<span class="string">" 巧克力 "</span>);</span><br><span class="line">setPrice(<span class="number">3.0</span>f); <span class="comment">// 调味品 的价格</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> com.atguigu.decorator;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Coffee</span>	<span class="keyword">extends</span> <span class="title">Drink</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">public float cost() &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub return super.getPrice();</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> com.atguigu.decorator;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">CoffeeBar</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public static void main(<span class="type">String</span>[] args) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">// 装饰者模式下的订单：2 份巧克力+一份牛奶的 LongBlack</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.  点一份 LongBlack</span></span><br><span class="line"><span class="type">Drink</span> order = <span class="keyword">new</span> <span class="type">LongBlack</span>();</span><br><span class="line"><span class="type">System</span>.out.println(<span class="string">"费用 1="</span> + order.cost());</span><br><span class="line"><span class="type">System</span>.out.println(<span class="string">"描述="</span> + order.getDes());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. order 加入一份牛奶</span></span><br><span class="line">order = <span class="keyword">new</span> <span class="type">Milk</span>(order);</span><br><span class="line"></span><br><span class="line"><span class="type">System</span>.out.println(<span class="string">"order 加入一份牛奶 费用 ="</span> + order.cost());</span><br><span class="line"><span class="type">System</span>.out.println(<span class="string">"order 加入一份牛奶 描述 = "</span> + order.getDes());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. order 加入一份巧克力</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">order = <span class="keyword">new</span> <span class="type">Chocolate</span>(order);</span><br><span class="line"></span><br><span class="line"><span class="type">System</span>.out.println(<span class="string">"order 加入一份牛奶  加入一份巧克力	费 用 ="</span> + order.cost());</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="type">System</span>.out.println(<span class="string">"order 加入一份牛奶 加入一份巧克力 描述 = "</span> + order.getDes());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. order 加入一份巧克力</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">order = <span class="keyword">new</span> <span class="type">Chocolate</span>(order);</span><br><span class="line"></span><br><span class="line"><span class="type">System</span>.out.println(<span class="string">"order 加入一份牛奶  加入 2 份巧克力	费 用 ="</span> + order.cost());</span><br><span class="line"><span class="type">System</span>.out.println(<span class="string">"order 加入一份牛奶 加入 2 份巧克力 描述 = "</span> + order.getDes());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">System</span>.out.println(<span class="string">"==========================="</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">Drink</span> order2 = <span class="keyword">new</span> <span class="type">DeCaf</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">System</span>.out.println(<span class="string">"order2 无因咖啡	费 用 ="</span> + order2.cost());</span><br><span class="line"><span class="type">System</span>.out.println(<span class="string">"order2 无因咖啡 描述 = "</span> + order2.getDes());</span><br><span class="line">order2               =                <span class="keyword">new</span>                <span class="type">Milk</span>(order2); <span class="type">System</span>.out.println(<span class="string">"order2 无因咖啡  加入一份牛奶	费 用 ="</span> + order2.cost());</span><br><span class="line"><span class="type">System</span>.out.println(<span class="string">"order2 无因咖啡 加入一份牛奶 描述 = "</span> + order2.getDes());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.atguigu.decorator;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">DeCaf</span> <span class="keyword">extends</span> <span class="title">Coffee</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public <span class="type">DeCaf</span>() &#123;</span><br><span class="line">setDes(<span class="string">" 无因咖啡 "</span>); setPrice(<span class="number">1.0</span>f);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> com.atguigu.decorator;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Decorator</span> <span class="keyword">extends</span> <span class="title">Drink</span> </span>&#123; <span class="keyword">private</span> <span class="type">Drink</span> obj;</span><br><span class="line"></span><br><span class="line">public <span class="type">Decorator</span>(<span class="type">Drink</span> obj) &#123; <span class="comment">//组合</span></span><br><span class="line"><span class="comment">// TODO Auto-generated constructor stub this.obj = obj;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">public float cost() &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">// getPrice 自己价格</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">super</span>.getPrice() + obj.cost();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">public <span class="type">String</span> getDes() &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">// obj.getDes() 输出被装饰者的信息</span></span><br><span class="line"><span class="keyword">return</span> des + <span class="string">" "</span> + getPrice() + <span class="string">" &amp;&amp; "</span> + obj.getDes();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> com.atguigu.decorator;</span><br><span class="line">public <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Drink</span> </span>&#123; public <span class="type">String</span> des; <span class="comment">// 描 述</span></span><br><span class="line"><span class="keyword">private</span> float price = <span class="number">0.0</span>f; public <span class="type">String</span> getDes() &#123;</span><br><span class="line"><span class="keyword">return</span> des;</span><br><span class="line">&#125;</span><br><span class="line">public void setDes(<span class="type">String</span> des) &#123; <span class="keyword">this</span>.des = des;</span><br><span class="line">&#125;</span><br><span class="line">public float getPrice() &#123; <span class="keyword">return</span> price;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line">public void setPrice(float price) &#123; <span class="keyword">this</span>.price = price;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算费用的抽象方法</span></span><br><span class="line"><span class="comment">//子类来实现</span></span><br><span class="line">public <span class="keyword">abstract</span> float cost();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> com.atguigu.decorator;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Espresso</span> <span class="keyword">extends</span> <span class="title">Coffee</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public <span class="type">Espresso</span>() &#123;</span><br><span class="line">setDes(<span class="string">" 意大利咖啡 "</span>); setPrice(<span class="number">6.0</span>f);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> com.atguigu.decorator;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">LongBlack</span> <span class="keyword">extends</span> <span class="title">Coffee</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public <span class="type">LongBlack</span>() &#123;</span><br><span class="line"> </span><br><span class="line">setDes(<span class="string">" longblack "</span>); setPrice(<span class="number">5.0</span>f);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> com.atguigu.decorator;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Milk</span> <span class="keyword">extends</span> <span class="title">Decorator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public <span class="type">Milk</span>(<span class="type">Drink</span> obj) &#123; <span class="keyword">super</span>(obj);</span><br><span class="line"><span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">setDes(<span class="string">" 牛 奶 "</span>); setPrice(<span class="number">2.0</span>f);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> com.atguigu.decorator;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">ShortBlack</span> <span class="keyword">extends</span> <span class="title">Coffee</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public <span class="type">ShortBlack</span>() &#123; setDes(<span class="string">" shortblack "</span>); setPrice(<span class="number">4.0</span>f);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> com.atguigu.decorator;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Soy</span> <span class="keyword">extends</span> <span class="title">Decorator</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public <span class="type">Soy</span>(<span class="type">Drink</span> obj) &#123; <span class="keyword">super</span>(obj);</span><br><span class="line"><span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">setDes(<span class="string">" 豆浆	"</span>); setPrice(<span class="number">1.5</span>f);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="装饰者模式在-JDK-应用的源码分析"><a href="#装饰者模式在-JDK-应用的源码分析" class="headerlink" title="装饰者模式在 JDK 应用的源码分析"></a>装饰者模式在 JDK 应用的源码分析</h1><p>Java 的 IO 结构，FilterInputStream 就是一个装饰者<br><img src="/2020/10/18/%E6%A8%A1%E5%BC%8F-%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/6.jpg" alt="06"></p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">package com.atguigu.jdk;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.DataInputStream; <span class="keyword">import</span> java.io.FileInputStream; <span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Decorator</span> &#123;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> throws Exception</span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//说明</span></span><br><span class="line"><span class="comment">//1. InputStream  是抽象类,  类似我们前面讲的 Drink</span></span><br><span class="line"><span class="comment">//2. FileInputStream 是	InputStream  子类，类似我们前面的 DeCaf, LongBlack</span></span><br><span class="line"><span class="comment">//3. FilterInputStream	是	InputStream 子类：类似我们前面 的 Decorator 修饰者</span></span><br><span class="line"><span class="comment">//4. DataInputStream  是 FilterInputStream  子类，具体的修饰者，类似前面的 Milk, Soy 等</span></span><br><span class="line"><span class="comment">//5. FilterInputStream 类  有	protected volatile InputStream in;  即含被装饰者</span></span><br><span class="line"><span class="comment">//6. 分析得出在 jdk 的 io 体系中，就是使用装饰者模式</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DataInputStream dis = <span class="keyword">new</span> DataInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"d:\\abc.txt"</span>)); System.out.<span class="built_in">println</span>(dis.<span class="built_in">read</span>());</span><br><span class="line">dis.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
</search>
